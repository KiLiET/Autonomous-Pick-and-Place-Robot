
Main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000072c  00800200  00001eb6  00001f4a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001eb6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  0080092c  0080092c  00002676  2**0
                  ALLOC
  3 .stab         00001ed8  00000000  00000000  00002678  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000006a5  00000000  00000000  00004550  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00004bf8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b8c  00000000  00000000  00004cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003e6  00000000  00000000  00006844  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a37  00000000  00000000  00006c2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005fc  00000000  00000000  00007664  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000953  00000000  00000000  00007c60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001073  00000000  00000000  000085b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00009626  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__vector_1>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	19 e0       	ldi	r17, 0x09	; 9
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e6 eb       	ldi	r30, 0xB6	; 182
      fc:	fe e1       	ldi	r31, 0x1E	; 30
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	ac 32       	cpi	r26, 0x2C	; 44
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	19 e0       	ldi	r17, 0x09	; 9
     110:	ac e2       	ldi	r26, 0x2C	; 44
     112:	b9 e0       	ldi	r27, 0x09	; 9
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	ad 34       	cpi	r26, 0x4D	; 77
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 0a 0c 	call	0x1814	; 0x1814 <main>
     122:	0c 94 59 0f 	jmp	0x1eb2	; 0x1eb2 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <_Z15lcd_port_configv>:
unsigned int million;

//Function to configure LCD port
void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
     12a:	87 b1       	in	r24, 0x07	; 7
     12c:	87 6f       	ori	r24, 0xF7	; 247
     12e:	87 b9       	out	0x07, r24	; 7
 PORTC = PORTC & 0x08; // all the LCD pins are set to logic 0 except PORTC 7
     130:	88 b1       	in	r24, 0x08	; 8
     132:	88 70       	andi	r24, 0x08	; 8
     134:	88 b9       	out	0x08, r24	; 8
}
     136:	08 95       	ret

00000138 <_Z12lcd_set_4bitv>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     138:	8f e9       	ldi	r24, 0x9F	; 159
     13a:	9f e0       	ldi	r25, 0x0F	; 15
     13c:	01 97       	sbiw	r24, 0x01	; 1
     13e:	f1 f7       	brne	.-4      	; 0x13c <_Z12lcd_set_4bitv+0x4>
     140:	00 c0       	rjmp	.+0      	; 0x142 <_Z12lcd_set_4bitv+0xa>
     142:	00 00       	nop
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     144:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     146:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     148:	80 e3       	ldi	r24, 0x30	; 48
     14a:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     14c:	42 9a       	sbi	0x08, 2	; 8
     14e:	ef e1       	ldi	r30, 0x1F	; 31
     150:	fe e4       	ldi	r31, 0x4E	; 78
     152:	31 97       	sbiw	r30, 0x01	; 1
     154:	f1 f7       	brne	.-4      	; 0x152 <_Z12lcd_set_4bitv+0x1a>
     156:	00 c0       	rjmp	.+0      	; 0x158 <_Z12lcd_set_4bitv+0x20>
     158:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     15a:	42 98       	cbi	0x08, 2	; 8
     15c:	ef e9       	ldi	r30, 0x9F	; 159
     15e:	ff e0       	ldi	r31, 0x0F	; 15
     160:	31 97       	sbiw	r30, 0x01	; 1
     162:	f1 f7       	brne	.-4      	; 0x160 <_Z12lcd_set_4bitv+0x28>
     164:	00 c0       	rjmp	.+0      	; 0x166 <_Z12lcd_set_4bitv+0x2e>
     166:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     168:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     16a:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     16c:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     16e:	42 9a       	sbi	0x08, 2	; 8
     170:	ef e1       	ldi	r30, 0x1F	; 31
     172:	fe e4       	ldi	r31, 0x4E	; 78
     174:	31 97       	sbiw	r30, 0x01	; 1
     176:	f1 f7       	brne	.-4      	; 0x174 <_Z12lcd_set_4bitv+0x3c>
     178:	00 c0       	rjmp	.+0      	; 0x17a <_Z12lcd_set_4bitv+0x42>
     17a:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     17c:	42 98       	cbi	0x08, 2	; 8
     17e:	ef e9       	ldi	r30, 0x9F	; 159
     180:	ff e0       	ldi	r31, 0x0F	; 15
     182:	31 97       	sbiw	r30, 0x01	; 1
     184:	f1 f7       	brne	.-4      	; 0x182 <_Z12lcd_set_4bitv+0x4a>
     186:	00 c0       	rjmp	.+0      	; 0x188 <_Z12lcd_set_4bitv+0x50>
     188:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     18a:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     18c:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     18e:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     190:	42 9a       	sbi	0x08, 2	; 8
     192:	8f e1       	ldi	r24, 0x1F	; 31
     194:	9e e4       	ldi	r25, 0x4E	; 78
     196:	01 97       	sbiw	r24, 0x01	; 1
     198:	f1 f7       	brne	.-4      	; 0x196 <_Z12lcd_set_4bitv+0x5e>
     19a:	00 c0       	rjmp	.+0      	; 0x19c <_Z12lcd_set_4bitv+0x64>
     19c:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     19e:	42 98       	cbi	0x08, 2	; 8
     1a0:	ef e9       	ldi	r30, 0x9F	; 159
     1a2:	ff e0       	ldi	r31, 0x0F	; 15
     1a4:	31 97       	sbiw	r30, 0x01	; 1
     1a6:	f1 f7       	brne	.-4      	; 0x1a4 <_Z12lcd_set_4bitv+0x6c>
     1a8:	00 c0       	rjmp	.+0      	; 0x1aa <_Z12lcd_set_4bitv+0x72>
     1aa:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     1ac:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     1ae:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     1b0:	80 e2       	ldi	r24, 0x20	; 32
     1b2:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     1b4:	42 9a       	sbi	0x08, 2	; 8
     1b6:	8f e1       	ldi	r24, 0x1F	; 31
     1b8:	9e e4       	ldi	r25, 0x4E	; 78
     1ba:	01 97       	sbiw	r24, 0x01	; 1
     1bc:	f1 f7       	brne	.-4      	; 0x1ba <_Z12lcd_set_4bitv+0x82>
     1be:	00 c0       	rjmp	.+0      	; 0x1c0 <_Z12lcd_set_4bitv+0x88>
     1c0:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     1c2:	42 98       	cbi	0x08, 2	; 8

	
}
     1c4:	08 95       	ret

000001c6 <_Z14lcd_wr_commandh>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
     1c6:	98 b1       	in	r25, 0x08	; 8
     1c8:	9f 70       	andi	r25, 0x0F	; 15
     1ca:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     1cc:	98 b1       	in	r25, 0x08	; 8
//Function to Write Command on LCD
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
     1ce:	28 2f       	mov	r18, r24
     1d0:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     1d2:	92 2b       	or	r25, r18
     1d4:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     1d6:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     1d8:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     1da:	42 9a       	sbi	0x08, 2	; 8
     1dc:	ef e1       	ldi	r30, 0x1F	; 31
     1de:	fe e4       	ldi	r31, 0x4E	; 78
     1e0:	31 97       	sbiw	r30, 0x01	; 1
     1e2:	f1 f7       	brne	.-4      	; 0x1e0 <_Z14lcd_wr_commandh+0x1a>
     1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <_Z14lcd_wr_commandh+0x20>
     1e6:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     1e8:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
     1ea:	98 b1       	in	r25, 0x08	; 8
     1ec:	9f 70       	andi	r25, 0x0F	; 15
     1ee:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
     1f0:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
     1f2:	82 95       	swap	r24
     1f4:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= cmd;
     1f6:	89 2b       	or	r24, r25
     1f8:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
     1fa:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     1fc:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     1fe:	42 9a       	sbi	0x08, 2	; 8
     200:	8f e1       	ldi	r24, 0x1F	; 31
     202:	9e e4       	ldi	r25, 0x4E	; 78
     204:	01 97       	sbiw	r24, 0x01	; 1
     206:	f1 f7       	brne	.-4      	; 0x204 <_Z14lcd_wr_commandh+0x3e>
     208:	00 c0       	rjmp	.+0      	; 0x20a <_Z14lcd_wr_commandh+0x44>
     20a:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     20c:	42 98       	cbi	0x08, 2	; 8
}
     20e:	08 95       	ret

00000210 <_Z8lcd_initv>:
}

//Function to Initialize LCD
void lcd_init()
{
	lcd_set_4bit();
     210:	0e 94 9c 00 	call	0x138	; 0x138 <_Z12lcd_set_4bitv>
     214:	8f e9       	ldi	r24, 0x9F	; 159
     216:	9f e0       	ldi	r25, 0x0F	; 15
     218:	01 97       	sbiw	r24, 0x01	; 1
     21a:	f1 f7       	brne	.-4      	; 0x218 <_Z8lcd_initv+0x8>
     21c:	00 c0       	rjmp	.+0      	; 0x21e <_Z8lcd_initv+0xe>
     21e:	00 00       	nop
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     220:	88 e2       	ldi	r24, 0x28	; 40
     222:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <_Z14lcd_wr_commandh>
	lcd_wr_command(0x01);
     226:	81 e0       	ldi	r24, 0x01	; 1
     228:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <_Z14lcd_wr_commandh>
	lcd_wr_command(0x06);
     22c:	86 e0       	ldi	r24, 0x06	; 6
     22e:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <_Z14lcd_wr_commandh>
	lcd_wr_command(0x0E);
     232:	8e e0       	ldi	r24, 0x0E	; 14
     234:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <_Z14lcd_wr_commandh>
	lcd_wr_command(0x80);
     238:	80 e8       	ldi	r24, 0x80	; 128
     23a:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <_Z14lcd_wr_commandh>
		
}
     23e:	08 95       	ret

00000240 <_Z11lcd_wr_charc>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     240:	98 b1       	in	r25, 0x08	; 8
     242:	9f 70       	andi	r25, 0x0F	; 15
     244:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     246:	98 b1       	in	r25, 0x08	; 8
//Function to Write Data on LCD
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
     248:	28 2f       	mov	r18, r24
     24a:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     24c:	92 2b       	or	r25, r18
     24e:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     250:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     252:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     254:	42 9a       	sbi	0x08, 2	; 8
     256:	ef e1       	ldi	r30, 0x1F	; 31
     258:	fe e4       	ldi	r31, 0x4E	; 78
     25a:	31 97       	sbiw	r30, 0x01	; 1
     25c:	f1 f7       	brne	.-4      	; 0x25a <_Z11lcd_wr_charc+0x1a>
     25e:	00 c0       	rjmp	.+0      	; 0x260 <_Z11lcd_wr_charc+0x20>
     260:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     262:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
     264:	98 b1       	in	r25, 0x08	; 8
     266:	9f 70       	andi	r25, 0x0F	; 15
     268:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
     26a:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
     26c:	82 95       	swap	r24
     26e:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= letter;
     270:	89 2b       	or	r24, r25
     272:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
     274:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     276:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     278:	42 9a       	sbi	0x08, 2	; 8
     27a:	8f e1       	ldi	r24, 0x1F	; 31
     27c:	9e e4       	ldi	r25, 0x4E	; 78
     27e:	01 97       	sbiw	r24, 0x01	; 1
     280:	f1 f7       	brne	.-4      	; 0x27e <_Z11lcd_wr_charc+0x3e>
     282:	00 c0       	rjmp	.+0      	; 0x284 <_Z11lcd_wr_charc+0x44>
     284:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     286:	42 98       	cbi	0x08, 2	; 8
}
     288:	08 95       	ret

0000028a <_Z8lcd_homev>:


//Function to bring cursor at home position
void lcd_home()
{
	lcd_wr_command(0x80);
     28a:	80 e8       	ldi	r24, 0x80	; 128
     28c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <_Z14lcd_wr_commandh>
}
     290:	08 95       	ret

00000292 <_Z10lcd_stringPc>:


//Function to Print String on LCD
void lcd_string(char *str)
{
     292:	cf 93       	push	r28
     294:	df 93       	push	r29
     296:	ec 01       	movw	r28, r24
	while(*str != '\0')
     298:	88 81       	ld	r24, Y
     29a:	88 23       	and	r24, r24
     29c:	31 f0       	breq	.+12     	; 0x2aa <_Z10lcd_stringPc+0x18>
	lcd_wr_command(0x80);
}


//Function to Print String on LCD
void lcd_string(char *str)
     29e:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		lcd_wr_char(*str);
     2a0:	0e 94 20 01 	call	0x240	; 0x240 <_Z11lcd_wr_charc>


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
     2a4:	89 91       	ld	r24, Y+
     2a6:	88 23       	and	r24, r24
     2a8:	d9 f7       	brne	.-10     	; 0x2a0 <_Z10lcd_stringPc+0xe>
	{
		lcd_wr_char(*str);
		str++;
	}
}
     2aa:	df 91       	pop	r29
     2ac:	cf 91       	pop	r28
     2ae:	08 95       	ret

000002b0 <_Z10lcd_cursorcc>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
	switch (row) {
     2b0:	82 30       	cpi	r24, 0x02	; 2
     2b2:	79 f0       	breq	.+30     	; 0x2d2 <_Z10lcd_cursorcc+0x22>
     2b4:	83 30       	cpi	r24, 0x03	; 3
     2b6:	18 f4       	brcc	.+6      	; 0x2be <_Z10lcd_cursorcc+0xe>
     2b8:	81 30       	cpi	r24, 0x01	; 1
     2ba:	c9 f4       	brne	.+50     	; 0x2ee <_Z10lcd_cursorcc+0x3e>
     2bc:	05 c0       	rjmp	.+10     	; 0x2c8 <_Z10lcd_cursorcc+0x18>
     2be:	83 30       	cpi	r24, 0x03	; 3
     2c0:	69 f0       	breq	.+26     	; 0x2dc <_Z10lcd_cursorcc+0x2c>
     2c2:	84 30       	cpi	r24, 0x04	; 4
     2c4:	a1 f4       	brne	.+40     	; 0x2ee <_Z10lcd_cursorcc+0x3e>
     2c6:	0f c0       	rjmp	.+30     	; 0x2e6 <_Z10lcd_cursorcc+0x36>
		case 1: lcd_wr_command (0x80 + column - 1); break;
     2c8:	86 2f       	mov	r24, r22
     2ca:	81 58       	subi	r24, 0x81	; 129
     2cc:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <_Z14lcd_wr_commandh>
     2d0:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     2d2:	86 2f       	mov	r24, r22
     2d4:	81 54       	subi	r24, 0x41	; 65
     2d6:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <_Z14lcd_wr_commandh>
     2da:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
     2dc:	86 2f       	mov	r24, r22
     2de:	8d 56       	subi	r24, 0x6D	; 109
     2e0:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <_Z14lcd_wr_commandh>
     2e4:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
     2e6:	86 2f       	mov	r24, r22
     2e8:	8d 52       	subi	r24, 0x2D	; 45
     2ea:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <_Z14lcd_wr_commandh>
     2ee:	08 95       	ret

000002f0 <_Z9lcd_printccji>:
	}
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
     2f0:	0f 93       	push	r16
     2f2:	1f 93       	push	r17
     2f4:	cf 93       	push	r28
     2f6:	df 93       	push	r29
     2f8:	8a 01       	movw	r16, r20
     2fa:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     2fc:	88 23       	and	r24, r24
     2fe:	11 f0       	breq	.+4      	; 0x304 <_Z9lcd_printccji+0x14>
     300:	66 23       	and	r22, r22
     302:	19 f4       	brne	.+6      	; 0x30a <_Z9lcd_printccji+0x1a>
	{
		lcd_home();
     304:	0e 94 45 01 	call	0x28a	; 0x28a <_Z8lcd_homev>
     308:	02 c0       	rjmp	.+4      	; 0x30e <_Z9lcd_printccji+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
     30a:	0e 94 58 01 	call	0x2b0	; 0x2b0 <_Z10lcd_cursorcc>
	}
	if(digits==5 || flag==1)
     30e:	c5 30       	cpi	r28, 0x05	; 5
     310:	d1 05       	cpc	r29, r1
     312:	71 f4       	brne	.+28     	; 0x330 <_Z9lcd_printccji+0x40>
	{
		million=value/10000+48;
     314:	c8 01       	movw	r24, r16
     316:	60 e1       	ldi	r22, 0x10	; 16
     318:	77 e2       	ldi	r23, 0x27	; 39
     31a:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <__udivmodhi4>
     31e:	cb 01       	movw	r24, r22
     320:	c0 96       	adiw	r24, 0x30	; 48
     322:	90 93 3c 09 	sts	0x093C, r25
     326:	80 93 3b 09 	sts	0x093B, r24
		lcd_wr_char(million);
     32a:	0e 94 20 01 	call	0x240	; 0x240 <_Z11lcd_wr_charc>
     32e:	03 c0       	rjmp	.+6      	; 0x336 <_Z9lcd_printccji+0x46>
		flag=1;
	}
	if(digits==4 || flag==1)
     330:	c4 30       	cpi	r28, 0x04	; 4
     332:	d1 05       	cpc	r29, r1
     334:	b9 f4       	brne	.+46     	; 0x364 <_Z9lcd_printccji+0x74>
	{
		temp = value/1000;
     336:	c8 01       	movw	r24, r16
     338:	68 ee       	ldi	r22, 0xE8	; 232
     33a:	73 e0       	ldi	r23, 0x03	; 3
     33c:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <__udivmodhi4>
     340:	cb 01       	movw	r24, r22
     342:	70 93 46 09 	sts	0x0946, r23
     346:	60 93 45 09 	sts	0x0945, r22
		thousand = temp%10 + 48;
     34a:	6a e0       	ldi	r22, 0x0A	; 10
     34c:	70 e0       	ldi	r23, 0x00	; 0
     34e:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <__udivmodhi4>
     352:	c0 96       	adiw	r24, 0x30	; 48
     354:	90 93 3e 09 	sts	0x093E, r25
     358:	80 93 3d 09 	sts	0x093D, r24
		lcd_wr_char(thousand);
     35c:	0e 94 20 01 	call	0x240	; 0x240 <_Z11lcd_wr_charc>
		flag=1;
     360:	81 e0       	ldi	r24, 0x01	; 1
     362:	01 c0       	rjmp	.+2      	; 0x366 <_Z9lcd_printccji+0x76>
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
     364:	80 e0       	ldi	r24, 0x00	; 0
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
     366:	c3 30       	cpi	r28, 0x03	; 3
     368:	d1 05       	cpc	r29, r1
     36a:	11 f0       	breq	.+4      	; 0x370 <_Z9lcd_printccji+0x80>
     36c:	81 30       	cpi	r24, 0x01	; 1
     36e:	b1 f4       	brne	.+44     	; 0x39c <_Z9lcd_printccji+0xac>
	{
		temp = value/100;
     370:	c8 01       	movw	r24, r16
     372:	64 e6       	ldi	r22, 0x64	; 100
     374:	70 e0       	ldi	r23, 0x00	; 0
     376:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <__udivmodhi4>
     37a:	cb 01       	movw	r24, r22
     37c:	70 93 46 09 	sts	0x0946, r23
     380:	60 93 45 09 	sts	0x0945, r22
		hundred = temp%10 + 48;
     384:	6a e0       	ldi	r22, 0x0A	; 10
     386:	70 e0       	ldi	r23, 0x00	; 0
     388:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <__udivmodhi4>
     38c:	c0 96       	adiw	r24, 0x30	; 48
     38e:	90 93 40 09 	sts	0x0940, r25
     392:	80 93 3f 09 	sts	0x093F, r24
		lcd_wr_char(hundred);
     396:	0e 94 20 01 	call	0x240	; 0x240 <_Z11lcd_wr_charc>
		flag=1;
     39a:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==2 || flag==1)
     39c:	c2 30       	cpi	r28, 0x02	; 2
     39e:	d1 05       	cpc	r29, r1
     3a0:	11 f0       	breq	.+4      	; 0x3a6 <_Z9lcd_printccji+0xb6>
     3a2:	81 30       	cpi	r24, 0x01	; 1
     3a4:	b1 f4       	brne	.+44     	; 0x3d2 <_Z9lcd_printccji+0xe2>
	{
		temp = value/10;
     3a6:	2a e0       	ldi	r18, 0x0A	; 10
     3a8:	30 e0       	ldi	r19, 0x00	; 0
     3aa:	c8 01       	movw	r24, r16
     3ac:	b9 01       	movw	r22, r18
     3ae:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <__udivmodhi4>
     3b2:	cb 01       	movw	r24, r22
     3b4:	70 93 46 09 	sts	0x0946, r23
     3b8:	60 93 45 09 	sts	0x0945, r22
		tens = temp%10 + 48;
     3bc:	b9 01       	movw	r22, r18
     3be:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <__udivmodhi4>
     3c2:	c0 96       	adiw	r24, 0x30	; 48
     3c4:	90 93 42 09 	sts	0x0942, r25
     3c8:	80 93 41 09 	sts	0x0941, r24
		lcd_wr_char(tens);
     3cc:	0e 94 20 01 	call	0x240	; 0x240 <_Z11lcd_wr_charc>
		flag=1;
     3d0:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==1 || flag==1)
     3d2:	c1 30       	cpi	r28, 0x01	; 1
     3d4:	d1 05       	cpc	r29, r1
     3d6:	11 f0       	breq	.+4      	; 0x3dc <_Z9lcd_printccji+0xec>
     3d8:	81 30       	cpi	r24, 0x01	; 1
     3da:	61 f4       	brne	.+24     	; 0x3f4 <_Z9lcd_printccji+0x104>
	{
		unit = value%10 + 48;
     3dc:	c8 01       	movw	r24, r16
     3de:	6a e0       	ldi	r22, 0x0A	; 10
     3e0:	70 e0       	ldi	r23, 0x00	; 0
     3e2:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <__udivmodhi4>
     3e6:	c0 96       	adiw	r24, 0x30	; 48
     3e8:	90 93 44 09 	sts	0x0944, r25
     3ec:	80 93 43 09 	sts	0x0943, r24
		lcd_wr_char(unit);
     3f0:	0e 94 20 01 	call	0x240	; 0x240 <_Z11lcd_wr_charc>
	}
	if(digits>5)
     3f4:	c6 30       	cpi	r28, 0x06	; 6
     3f6:	d1 05       	cpc	r29, r1
     3f8:	1c f0       	brlt	.+6      	; 0x400 <_Z9lcd_printccji+0x110>
	{
		lcd_wr_char('E');
     3fa:	85 e4       	ldi	r24, 0x45	; 69
     3fc:	0e 94 20 01 	call	0x240	; 0x240 <_Z11lcd_wr_charc>
	}
	
}
     400:	df 91       	pop	r29
     402:	cf 91       	pop	r28
     404:	1f 91       	pop	r17
     406:	0f 91       	pop	r16
     408:	08 95       	ret

0000040a <_Z15rgb_port_configv>:


//Function for rgb led port configuration
void rgb_port_config (void)
{
	DDRA |= 0x70;
     40a:	81 b1       	in	r24, 0x01	; 1
     40c:	80 67       	ori	r24, 0x70	; 112
     40e:	81 b9       	out	0x01, r24	; 1
	PORTA |= 0x70;
     410:	82 b1       	in	r24, 0x02	; 2
     412:	80 67       	ori	r24, 0x70	; 112
     414:	82 b9       	out	0x02, r24	; 2

}
     416:	08 95       	ret

00000418 <_Z7rgb_offv>:

void rgb_off(void)
{
	PORTA |= 0x70;
     418:	82 b1       	in	r24, 0x02	; 2
     41a:	80 67       	ori	r24, 0x70	; 112
     41c:	82 b9       	out	0x02, r24	; 2
}
     41e:	08 95       	ret

00000420 <_Z8glow_redv>:
//function to glow Red LED
void glow_red(void)
{
	
	PORTA |= 0x70;
     420:	82 b1       	in	r24, 0x02	; 2
     422:	80 67       	ori	r24, 0x70	; 112
     424:	82 b9       	out	0x02, r24	; 2
	PORTA&=0x6F;
     426:	82 b1       	in	r24, 0x02	; 2
     428:	8f 76       	andi	r24, 0x6F	; 111
     42a:	82 b9       	out	0x02, r24	; 2
}
     42c:	08 95       	ret

0000042e <_Z9glow_bluev>:

//function to glow Blue LED
void glow_blue(void)
{
	PORTA |= 0x70;
     42e:	82 b1       	in	r24, 0x02	; 2
     430:	80 67       	ori	r24, 0x70	; 112
     432:	82 b9       	out	0x02, r24	; 2
	PORTA &=0x3F;
     434:	82 b1       	in	r24, 0x02	; 2
     436:	8f 73       	andi	r24, 0x3F	; 63
     438:	82 b9       	out	0x02, r24	; 2
}
     43a:	08 95       	ret

0000043c <_Z10glow_greenv>:

//function to glow Green LED
void glow_green(void)
{
	PORTA |= 0x70;
     43c:	82 b1       	in	r24, 0x02	; 2
     43e:	80 67       	ori	r24, 0x70	; 112
     440:	82 b9       	out	0x02, r24	; 2
	PORTA&=0x5F;
     442:	82 b1       	in	r24, 0x02	; 2
     444:	8f 75       	andi	r24, 0x5F	; 95
     446:	82 b9       	out	0x02, r24	; 2
}
     448:	08 95       	ret

0000044a <_Z23color_sensor_pin_configv>:
//Define DDR and PORT values for the port on which Color sensor is connected
void color_sensor_pin_config(void)
{
	// Color Sensor Scaling 
	// 20% Scaling
	DDRE|=0x08;
     44a:	6b 9a       	sbi	0x0d, 3	; 13
	PORTE&=0xF7;//S1 LOW
     44c:	73 98       	cbi	0x0e, 3	; 14
	DDRG|=0x20;
     44e:	9d 9a       	sbi	0x13, 5	; 19
	PORTG|=0x20;//S0 HIGH
     450:	a5 9a       	sbi	0x14, 5	; 20
	
	//Configuring Ports for S3 and S2 pins
	DDRH|=0x18;
     452:	e1 e0       	ldi	r30, 0x01	; 1
     454:	f1 e0       	ldi	r31, 0x01	; 1
     456:	80 81       	ld	r24, Z
     458:	88 61       	ori	r24, 0x18	; 24
     45a:	80 83       	st	Z, r24
	PORTH&=0xEF;//S3 LOW
     45c:	e2 e0       	ldi	r30, 0x02	; 2
     45e:	f1 e0       	ldi	r31, 0x01	; 1
     460:	80 81       	ld	r24, Z
     462:	8f 7e       	andi	r24, 0xEF	; 239
     464:	80 83       	st	Z, r24
	PORTH|=0x08;//S2 HIGH
     466:	80 81       	ld	r24, Z
     468:	88 60       	ori	r24, 0x08	; 8
     46a:	80 83       	st	Z, r24
	
}
     46c:	08 95       	ret

0000046e <_Z31color_sensor_pin_interrupt_initv>:

//Interrupt 0 enable
void color_sensor_pin_interrupt_init(void) 
{
	cli(); //Clears the global interrupt
     46e:	f8 94       	cli
	EICRA = 0x02; // INT0 is set to trigger with falling edge
     470:	82 e0       	ldi	r24, 0x02	; 2
     472:	80 93 69 00 	sts	0x0069, r24
	EIMSK = 0x01; // Enable Interrupt INT0 for color sensor
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	8d bb       	out	0x1d, r24	; 29
	sei(); // Enables the global interrupt
     47a:	78 94       	sei
}
     47c:	08 95       	ret

0000047e <__vector_1>:

//ISR for color sensor
ISR(INT0_vect) 
{
     47e:	1f 92       	push	r1
     480:	0f 92       	push	r0
     482:	0f b6       	in	r0, 0x3f	; 63
     484:	0f 92       	push	r0
     486:	11 24       	eor	r1, r1
     488:	8f 93       	push	r24
     48a:	9f 93       	push	r25
	//increment on receiving pulse from the color sensor
	pulse++;
     48c:	80 91 39 09 	lds	r24, 0x0939
     490:	90 91 3a 09 	lds	r25, 0x093A
     494:	01 96       	adiw	r24, 0x01	; 1
     496:	90 93 3a 09 	sts	0x093A, r25
     49a:	80 93 39 09 	sts	0x0939, r24
}
     49e:	9f 91       	pop	r25
     4a0:	8f 91       	pop	r24
     4a2:	0f 90       	pop	r0
     4a4:	0f be       	out	0x3f, r0	; 63
     4a6:	0f 90       	pop	r0
     4a8:	1f 90       	pop	r1
     4aa:	18 95       	reti

000004ac <_Z10filter_redv>:


//Filter Selection
void filter_red(void) //Filter Select - RED filter
{	
	PORTH&=0xF7;// S2 LOW
     4ac:	e2 e0       	ldi	r30, 0x02	; 2
     4ae:	f1 e0       	ldi	r31, 0x01	; 1
     4b0:	80 81       	ld	r24, Z
     4b2:	87 7f       	andi	r24, 0xF7	; 247
     4b4:	80 83       	st	Z, r24
	PORTH&=0xEF;// S3 LOW
     4b6:	80 81       	ld	r24, Z
     4b8:	8f 7e       	andi	r24, 0xEF	; 239
     4ba:	80 83       	st	Z, r24
}
     4bc:	08 95       	ret

000004be <_Z12filter_greenv>:

void filter_green(void)	//Filter Select - GREEN filter
{
	PORTH|=0x08;// S2 HIGH
     4be:	e2 e0       	ldi	r30, 0x02	; 2
     4c0:	f1 e0       	ldi	r31, 0x01	; 1
     4c2:	80 81       	ld	r24, Z
     4c4:	88 60       	ori	r24, 0x08	; 8
     4c6:	80 83       	st	Z, r24
	PORTH|=0x10;// S3 HIGH
     4c8:	80 81       	ld	r24, Z
     4ca:	80 61       	ori	r24, 0x10	; 16
     4cc:	80 83       	st	Z, r24
}
     4ce:	08 95       	ret

000004d0 <_Z11filter_bluev>:

void filter_blue(void)	//Filter Select - BLUE filter
{
	PORTH&=0xF7;// S2 LOW
     4d0:	e2 e0       	ldi	r30, 0x02	; 2
     4d2:	f1 e0       	ldi	r31, 0x01	; 1
     4d4:	80 81       	ld	r24, Z
     4d6:	87 7f       	andi	r24, 0xF7	; 247
     4d8:	80 83       	st	Z, r24
	PORTH|=0x10;// S3 HIGH
     4da:	80 81       	ld	r24, Z
     4dc:	80 61       	ori	r24, 0x10	; 16
     4de:	80 83       	st	Z, r24
}
     4e0:	08 95       	ret

000004e2 <_Z12filter_clearv>:

void filter_clear(void)	//Filter Select - no filter
{
	PORTH&=0xEF;// S3 LOW
     4e2:	e2 e0       	ldi	r30, 0x02	; 2
     4e4:	f1 e0       	ldi	r31, 0x01	; 1
     4e6:	80 81       	ld	r24, Z
     4e8:	8f 7e       	andi	r24, 0xEF	; 239
     4ea:	80 83       	st	Z, r24
	PORTH|=0x08;// S2 HIGH
     4ec:	80 81       	ld	r24, Z
     4ee:	88 60       	ori	r24, 0x08	; 8
     4f0:	80 83       	st	Z, r24
}
     4f2:	08 95       	ret

000004f4 <_Z8red_readv>:
* Example Call	: <red_read()>
*/
void red_read(void) 
{
	//Red
	filter_red();//select red filter
     4f4:	0e 94 56 02 	call	0x4ac	; 0x4ac <_Z10filter_redv>
	pulse = 0;//reset the count to 0
     4f8:	10 92 3a 09 	sts	0x093A, r1
     4fc:	10 92 39 09 	sts	0x0939, r1
     500:	8f ef       	ldi	r24, 0xFF	; 255
     502:	91 ee       	ldi	r25, 0xE1	; 225
     504:	a4 e0       	ldi	r26, 0x04	; 4
     506:	81 50       	subi	r24, 0x01	; 1
     508:	90 40       	sbci	r25, 0x00	; 0
     50a:	a0 40       	sbci	r26, 0x00	; 0
     50c:	e1 f7       	brne	.-8      	; 0x506 <_Z8red_readv+0x12>
     50e:	00 c0       	rjmp	.+0      	; 0x510 <_Z8red_readv+0x1c>
     510:	00 00       	nop
	_delay_ms(100);//capture the pulses for 100 ms or 0.1 second
	red = pulse;//store the count in variable called red
     512:	80 91 39 09 	lds	r24, 0x0939
     516:	90 91 3a 09 	lds	r25, 0x093A
     51a:	90 93 38 09 	sts	0x0938, r25
     51e:	80 93 37 09 	sts	0x0937, r24

}
     522:	08 95       	ret

00000524 <_Z10green_readv>:
* Example Call	: <green_read()>
*/
void green_read(void) 
{
	//Green
	filter_green();//select green filter
     524:	0e 94 5f 02 	call	0x4be	; 0x4be <_Z12filter_greenv>
	pulse = 0;//reset the count to 0
     528:	10 92 3a 09 	sts	0x093A, r1
     52c:	10 92 39 09 	sts	0x0939, r1
     530:	8f ef       	ldi	r24, 0xFF	; 255
     532:	91 ee       	ldi	r25, 0xE1	; 225
     534:	a4 e0       	ldi	r26, 0x04	; 4
     536:	81 50       	subi	r24, 0x01	; 1
     538:	90 40       	sbci	r25, 0x00	; 0
     53a:	a0 40       	sbci	r26, 0x00	; 0
     53c:	e1 f7       	brne	.-8      	; 0x536 <_Z10green_readv+0x12>
     53e:	00 c0       	rjmp	.+0      	; 0x540 <_Z10green_readv+0x1c>
     540:	00 00       	nop
	_delay_ms(100);//capture the pulses for 100 ms or 0.1 second
	green = pulse;//store the count in variable called green
     542:	80 91 39 09 	lds	r24, 0x0939
     546:	90 91 3a 09 	lds	r25, 0x093A
     54a:	90 93 34 09 	sts	0x0934, r25
     54e:	80 93 33 09 	sts	0x0933, r24

}
     552:	08 95       	ret

00000554 <_Z9blue_readv>:
* Example Call	: <blue_read()>
*/
void blue_read(void) 
{
	//Blue
	filter_blue(); //select blue filter
     554:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_Z11filter_bluev>
	pulse=0; //reset the count to 0
     558:	10 92 3a 09 	sts	0x093A, r1
     55c:	10 92 39 09 	sts	0x0939, r1
     560:	8f ef       	ldi	r24, 0xFF	; 255
     562:	91 ee       	ldi	r25, 0xE1	; 225
     564:	a4 e0       	ldi	r26, 0x04	; 4
     566:	81 50       	subi	r24, 0x01	; 1
     568:	90 40       	sbci	r25, 0x00	; 0
     56a:	a0 40       	sbci	r26, 0x00	; 0
     56c:	e1 f7       	brne	.-8      	; 0x566 <_Z9blue_readv+0x12>
     56e:	00 c0       	rjmp	.+0      	; 0x570 <_Z9blue_readv+0x1c>
     570:	00 00       	nop
	_delay_ms(100); //capture the pulses for 100 ms or 0.1 second
	blue = pulse;  //store the count in variable called blue
     572:	80 91 39 09 	lds	r24, 0x0939
     576:	90 91 3a 09 	lds	r25, 0x093A
     57a:	90 93 36 09 	sts	0x0936, r25
     57e:	80 93 35 09 	sts	0x0935, r24
	
}
     582:	08 95       	ret

00000584 <_Z4glowv>:
* Logic			: <Glows appropiate LED color based on the input from color sensor in accordance with the color of block infront>
* Example Call	: <glow()>
*/
int glow()
{
	red_read();
     584:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <_Z8red_readv>
	blue_read();
     588:	0e 94 aa 02 	call	0x554	; 0x554 <_Z9blue_readv>
	green_read();
     58c:	0e 94 92 02 	call	0x524	; 0x524 <_Z10green_readv>
	if(red>blue && red>green)
     590:	20 91 37 09 	lds	r18, 0x0937
     594:	30 91 38 09 	lds	r19, 0x0938
     598:	80 91 35 09 	lds	r24, 0x0935
     59c:	90 91 36 09 	lds	r25, 0x0936
     5a0:	82 17       	cp	r24, r18
     5a2:	93 07       	cpc	r25, r19
     5a4:	90 f5       	brcc	.+100    	; 0x60a <_Z4glowv+0x86>
     5a6:	20 91 37 09 	lds	r18, 0x0937
     5aa:	30 91 38 09 	lds	r19, 0x0938
     5ae:	80 91 33 09 	lds	r24, 0x0933
     5b2:	90 91 34 09 	lds	r25, 0x0934
     5b6:	82 17       	cp	r24, r18
     5b8:	93 07       	cpc	r25, r19
     5ba:	38 f5       	brcc	.+78     	; 0x60a <_Z4glowv+0x86>
	{
		glow_red();
     5bc:	0e 94 10 02 	call	0x420	; 0x420 <_Z8glow_redv>
		return 1;
     5c0:	21 e0       	ldi	r18, 0x01	; 1
     5c2:	30 e0       	ldi	r19, 0x00	; 0
     5c4:	1f c0       	rjmp	.+62     	; 0x604 <_Z4glowv+0x80>
	}	
	else if(blue>red && blue>green)
     5c6:	20 91 35 09 	lds	r18, 0x0935
     5ca:	30 91 36 09 	lds	r19, 0x0936
     5ce:	80 91 33 09 	lds	r24, 0x0933
     5d2:	90 91 34 09 	lds	r25, 0x0934
     5d6:	82 17       	cp	r24, r18
     5d8:	93 07       	cpc	r25, r19
     5da:	10 f5       	brcc	.+68     	; 0x620 <_Z4glowv+0x9c>
	{
		glow_blue();
     5dc:	0e 94 17 02 	call	0x42e	; 0x42e <_Z9glow_bluev>
		return 3;
     5e0:	23 e0       	ldi	r18, 0x03	; 3
     5e2:	30 e0       	ldi	r19, 0x00	; 0
     5e4:	0f c0       	rjmp	.+30     	; 0x604 <_Z4glowv+0x80>
	}	
	else if(green>red && green>blue)
     5e6:	20 91 33 09 	lds	r18, 0x0933
     5ea:	30 91 34 09 	lds	r19, 0x0934
     5ee:	80 91 35 09 	lds	r24, 0x0935
     5f2:	90 91 36 09 	lds	r25, 0x0936
     5f6:	82 17       	cp	r24, r18
     5f8:	93 07       	cpc	r25, r19
     5fa:	e8 f4       	brcc	.+58     	; 0x636 <_Z4glowv+0xb2>
	{
		glow_green();
     5fc:	0e 94 1e 02 	call	0x43c	; 0x43c <_Z10glow_greenv>
		return 2;
     600:	22 e0       	ldi	r18, 0x02	; 2
     602:	30 e0       	ldi	r19, 0x00	; 0
     604:	82 2f       	mov	r24, r18
     606:	93 2f       	mov	r25, r19
     608:	08 95       	ret
	if(red>blue && red>green)
	{
		glow_red();
		return 1;
	}	
	else if(blue>red && blue>green)
     60a:	20 91 35 09 	lds	r18, 0x0935
     60e:	30 91 36 09 	lds	r19, 0x0936
     612:	80 91 37 09 	lds	r24, 0x0937
     616:	90 91 38 09 	lds	r25, 0x0938
     61a:	82 17       	cp	r24, r18
     61c:	93 07       	cpc	r25, r19
     61e:	98 f2       	brcs	.-90     	; 0x5c6 <_Z4glowv+0x42>
	{
		glow_blue();
		return 3;
	}	
	else if(green>red && green>blue)
     620:	20 91 33 09 	lds	r18, 0x0933
     624:	30 91 34 09 	lds	r19, 0x0934
     628:	80 91 37 09 	lds	r24, 0x0937
     62c:	90 91 38 09 	lds	r25, 0x0938
     630:	82 17       	cp	r24, r18
     632:	93 07       	cpc	r25, r19
     634:	c0 f2       	brcs	.-80     	; 0x5e6 <_Z4glowv+0x62>
	{
		glow_green();
		return 2;
	}	
}
     636:	08 95       	ret

00000638 <_Z17color_sensor_initv>:
* Logic			: <Initialise PORTS for Color Sensor and RGB conrol>
* Example Call	: <color_sensor_init()>
*/
void color_sensor_init()
{
	rgb_port_config();
     638:	0e 94 05 02 	call	0x40a	; 0x40a <_Z15rgb_port_configv>
	color_sensor_pin_config();
     63c:	0e 94 25 02 	call	0x44a	; 0x44a <_Z23color_sensor_pin_configv>
	color_sensor_pin_interrupt_init();
     640:	0e 94 37 02 	call	0x46e	; 0x46e <_Z31color_sensor_pin_interrupt_initv>
     644:	08 95       	ret

00000646 <_Z12servo_configv>:
void servo_2(unsigned char degrees);


void servo_config()
{
	DDRB  = DDRB | 0x20;  //making PORTB 5 pin output
     646:	25 9a       	sbi	0x04, 5	; 4
	PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
     648:	2d 9a       	sbi	0x05, 5	; 5
	
	DDRB  = DDRB | 0x40;  //making PORTB 6 pin output
     64a:	26 9a       	sbi	0x04, 6	; 4
	PORTB = PORTB | 0x40; //setting PORTB 6 pin to logic 1
     64c:	2e 9a       	sbi	0x05, 6	; 5
}
     64e:	08 95       	ret

00000650 <_Z11timer1_initv>:
//Prescale:256
// WGM: 7) PWM 10bit fast, TOP=0x03FF
// actual value: 52.25Hz 
void timer1_init(void)
{
 TCCR1B = 0x00; //stop
     650:	e1 e8       	ldi	r30, 0x81	; 129
     652:	f0 e0       	ldi	r31, 0x00	; 0
     654:	10 82       	st	Z, r1
 TCNT1H = 0xFC; //Counter high value to which OCR1xH value is to be compared with
     656:	8c ef       	ldi	r24, 0xFC	; 252
     658:	80 93 85 00 	sts	0x0085, r24
 TCNT1L = 0x01;	//Counter low value to which OCR1xH value is to be compared with
     65c:	81 e0       	ldi	r24, 0x01	; 1
     65e:	80 93 84 00 	sts	0x0084, r24
 OCR1AH = 0x03;	//Output compare Register high value for servo 1
     662:	93 e0       	ldi	r25, 0x03	; 3
     664:	90 93 89 00 	sts	0x0089, r25
 OCR1AL = 0xFF;	//Output Compare Register low Value For servo 1
     668:	8f ef       	ldi	r24, 0xFF	; 255
     66a:	80 93 88 00 	sts	0x0088, r24
 OCR1BH = 0x03;	//Output compare Register high value for servo 2
     66e:	90 93 8b 00 	sts	0x008B, r25
 OCR1BL = 0xFF;	//Output Compare Register low Value For servo 2
     672:	80 93 8a 00 	sts	0x008A, r24
 
 ICR1H  = 0x03;	
     676:	90 93 87 00 	sts	0x0087, r25
 ICR1L  = 0xFF;
     67a:	80 93 86 00 	sts	0x0086, r24
 TCCR1A = 0xAB; /*{COM1A1=1, COM1A0=0; COM1B1=1, COM1B0=0; COM1C1=1 COM1C0=0}
     67e:	8b ea       	ldi	r24, 0xAB	; 171
     680:	80 93 80 00 	sts	0x0080, r24
 					For Overriding normal port functionality to OCRnA outputs.
				  {WGM11=1, WGM10=1} Along With WGM12 in TCCR1B for Selecting FAST PWM Mode*/
 TCCR1C = 0x00;
     684:	10 92 82 00 	sts	0x0082, r1
 TCCR1B = 0x0C; //WGM12=1; CS12=1, CS11=0, CS10=0 (Prescaler=256)
     688:	8c e0       	ldi	r24, 0x0C	; 12
     68a:	80 83       	st	Z, r24
}
     68c:	08 95       	ret

0000068e <_Z7servo_1h>:
*/
void servo_1(unsigned char degrees)
{
	float PositionPanServo = 0;
	PositionPanServo = ((float)degrees / 1.86) + 35.0;
	OCR1AH = 0x00;
     68e:	10 92 89 00 	sts	0x0089, r1
* Example Call	: <servo_1(93)>
*/
void servo_1(unsigned char degrees)
{
	float PositionPanServo = 0;
	PositionPanServo = ((float)degrees / 1.86) + 35.0;
     692:	68 2f       	mov	r22, r24
     694:	70 e0       	ldi	r23, 0x00	; 0
     696:	80 e0       	ldi	r24, 0x00	; 0
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__floatunsisf>
     69e:	2b e7       	ldi	r18, 0x7B	; 123
     6a0:	34 e1       	ldi	r19, 0x14	; 20
     6a2:	4e ee       	ldi	r20, 0xEE	; 238
     6a4:	5f e3       	ldi	r21, 0x3F	; 63
     6a6:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <__divsf3>
     6aa:	20 e0       	ldi	r18, 0x00	; 0
     6ac:	30 e0       	ldi	r19, 0x00	; 0
     6ae:	4c e0       	ldi	r20, 0x0C	; 12
     6b0:	52 e4       	ldi	r21, 0x42	; 66
     6b2:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <__addsf3>
	OCR1AH = 0x00;
	OCR1AL = (unsigned char) PositionPanServo;
     6b6:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <__fixunssfsi>
     6ba:	60 93 88 00 	sts	0x0088, r22
}
     6be:	08 95       	ret

000006c0 <_Z7servo_2h>:
*/
void servo_2(unsigned char degrees)
{
	float PositionTiltServo = 0;
	PositionTiltServo = ((float)degrees / 1.86) + 35.0;
	OCR1BH = 0x00;
     6c0:	10 92 8b 00 	sts	0x008B, r1
* Example Call	: <servo_2(93)>
*/
void servo_2(unsigned char degrees)
{
	float PositionTiltServo = 0;
	PositionTiltServo = ((float)degrees / 1.86) + 35.0;
     6c4:	68 2f       	mov	r22, r24
     6c6:	70 e0       	ldi	r23, 0x00	; 0
     6c8:	80 e0       	ldi	r24, 0x00	; 0
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__floatunsisf>
     6d0:	2b e7       	ldi	r18, 0x7B	; 123
     6d2:	34 e1       	ldi	r19, 0x14	; 20
     6d4:	4e ee       	ldi	r20, 0xEE	; 238
     6d6:	5f e3       	ldi	r21, 0x3F	; 63
     6d8:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <__divsf3>
     6dc:	20 e0       	ldi	r18, 0x00	; 0
     6de:	30 e0       	ldi	r19, 0x00	; 0
     6e0:	4c e0       	ldi	r20, 0x0C	; 12
     6e2:	52 e4       	ldi	r21, 0x42	; 66
     6e4:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <__addsf3>
	OCR1BH = 0x00;
	OCR1BL = (unsigned char) PositionTiltServo;
     6e8:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <__fixunssfsi>
     6ec:	60 93 8a 00 	sts	0x008A, r22
}
     6f0:	08 95       	ret

000006f2 <_Z12servo_1_freev>:
* Logic			: <This function is used to unlock servo motor from any angle. Used to lower arm for picking nuts>
* Example Call	: <servo_1_free()>
*/
void servo_1_free (void) //makes servo 1 free rotating
{
	OCR1AH = 0x03;
     6f2:	83 e0       	ldi	r24, 0x03	; 3
     6f4:	80 93 89 00 	sts	0x0089, r24
	OCR1AL = 0xFF; //Servo 1 off
     6f8:	8f ef       	ldi	r24, 0xFF	; 255
     6fa:	80 93 88 00 	sts	0x0088, r24
}
     6fe:	08 95       	ret

00000700 <_Z12servo_2_freev>:
* Logic			: <This function is used to unlock servo motor from any angle. Used to release nuts >
* Example Call	: <servo_2_free()>
*/
void servo_2_free (void) //makes servo 2 free rotating
{
	OCR1BH = 0x03;
     700:	83 e0       	ldi	r24, 0x03	; 3
     702:	80 93 8b 00 	sts	0x008B, r24
	OCR1BL = 0xFF; //Servo 2 off
     706:	8f ef       	ldi	r24, 0xFF	; 255
     708:	80 93 8a 00 	sts	0x008A, r24
}
     70c:	08 95       	ret

0000070e <_Z4pickv>:
*/
void pick()
{
	
	
	servo_2(25);		//grab nut
     70e:	89 e1       	ldi	r24, 0x19	; 25
     710:	0e 94 60 03 	call	0x6c0	; 0x6c0 <_Z7servo_2h>
     714:	8f ef       	ldi	r24, 0xFF	; 255
     716:	97 ea       	ldi	r25, 0xA7	; 167
     718:	a1 e6       	ldi	r26, 0x61	; 97
     71a:	81 50       	subi	r24, 0x01	; 1
     71c:	90 40       	sbci	r25, 0x00	; 0
     71e:	a0 40       	sbci	r26, 0x00	; 0
     720:	e1 f7       	brne	.-8      	; 0x71a <_Z4pickv+0xc>
     722:	00 c0       	rjmp	.+0      	; 0x724 <_Z4pickv+0x16>
     724:	00 00       	nop
	_delay_ms(2000);	
	servo_1(153);		//elevate the arm
     726:	89 e9       	ldi	r24, 0x99	; 153
     728:	0e 94 47 03 	call	0x68e	; 0x68e <_Z7servo_1h>
     72c:	8f ef       	ldi	r24, 0xFF	; 255
     72e:	9b e7       	ldi	r25, 0x7B	; 123
     730:	a2 e9       	ldi	r26, 0x92	; 146
     732:	81 50       	subi	r24, 0x01	; 1
     734:	90 40       	sbci	r25, 0x00	; 0
     736:	a0 40       	sbci	r26, 0x00	; 0
     738:	e1 f7       	brne	.-8      	; 0x732 <_Z4pickv+0x24>
     73a:	00 c0       	rjmp	.+0      	; 0x73c <_Z4pickv+0x2e>
     73c:	00 00       	nop
	_delay_ms(3000);
	rgb_off();
     73e:	0e 94 0c 02 	call	0x418	; 0x418 <_Z7rgb_offv>
	servo_1_free();
     742:	0e 94 79 03 	call	0x6f2	; 0x6f2 <_Z12servo_1_freev>
	servo_2_free();
     746:	0e 94 80 03 	call	0x700	; 0x700 <_Z12servo_2_freev>
	
}
     74a:	08 95       	ret

0000074c <_Z5placev>:
* Logic			: <This function is used to place nuts using arm. Servos are rotated to appropiate angles to place nut. >
* Example Call	: <place()>
*/
void place()
{
	servo_2(43);
     74c:	8b e2       	ldi	r24, 0x2B	; 43
     74e:	0e 94 60 03 	call	0x6c0	; 0x6c0 <_Z7servo_2h>
     752:	8f ef       	ldi	r24, 0xFF	; 255
     754:	91 ee       	ldi	r25, 0xE1	; 225
     756:	a4 e0       	ldi	r26, 0x04	; 4
     758:	81 50       	subi	r24, 0x01	; 1
     75a:	90 40       	sbci	r25, 0x00	; 0
     75c:	a0 40       	sbci	r26, 0x00	; 0
     75e:	e1 f7       	brne	.-8      	; 0x758 <_Z5placev+0xc>
     760:	00 c0       	rjmp	.+0      	; 0x762 <_Z5placev+0x16>
     762:	00 00       	nop
	_delay_ms(100);
	servo_1(13);		//lower the arm
     764:	8d e0       	ldi	r24, 0x0D	; 13
     766:	0e 94 47 03 	call	0x68e	; 0x68e <_Z7servo_1h>
     76a:	8f ef       	ldi	r24, 0xFF	; 255
     76c:	9b e7       	ldi	r25, 0x7B	; 123
     76e:	a2 e9       	ldi	r26, 0x92	; 146
     770:	81 50       	subi	r24, 0x01	; 1
     772:	90 40       	sbci	r25, 0x00	; 0
     774:	a0 40       	sbci	r26, 0x00	; 0
     776:	e1 f7       	brne	.-8      	; 0x770 <_Z5placev+0x24>
     778:	00 c0       	rjmp	.+0      	; 0x77a <_Z5placev+0x2e>
     77a:	00 00       	nop
	_delay_ms(3000);
	servo_2(93);		//release the nut
     77c:	8d e5       	ldi	r24, 0x5D	; 93
     77e:	0e 94 60 03 	call	0x6c0	; 0x6c0 <_Z7servo_2h>
     782:	8f ef       	ldi	r24, 0xFF	; 255
     784:	97 ea       	ldi	r25, 0xA7	; 167
     786:	a1 e6       	ldi	r26, 0x61	; 97
     788:	81 50       	subi	r24, 0x01	; 1
     78a:	90 40       	sbci	r25, 0x00	; 0
     78c:	a0 40       	sbci	r26, 0x00	; 0
     78e:	e1 f7       	brne	.-8      	; 0x788 <_Z5placev+0x3c>
     790:	00 c0       	rjmp	.+0      	; 0x792 <_Z5placev+0x46>
     792:	00 00       	nop
	_delay_ms(2000);
	
	servo_1(153);		//elevate the arm
     794:	89 e9       	ldi	r24, 0x99	; 153
     796:	0e 94 47 03 	call	0x68e	; 0x68e <_Z7servo_1h>
     79a:	8f ef       	ldi	r24, 0xFF	; 255
     79c:	9b e7       	ldi	r25, 0x7B	; 123
     79e:	a2 e9       	ldi	r26, 0x92	; 146
     7a0:	81 50       	subi	r24, 0x01	; 1
     7a2:	90 40       	sbci	r25, 0x00	; 0
     7a4:	a0 40       	sbci	r26, 0x00	; 0
     7a6:	e1 f7       	brne	.-8      	; 0x7a0 <_Z5placev+0x54>
     7a8:	00 c0       	rjmp	.+0      	; 0x7aa <_Z5placev+0x5e>
     7aa:	00 00       	nop
	_delay_ms(3000);
	servo_1_free();
     7ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <_Z12servo_1_freev>
	servo_2_free();
     7b0:	0e 94 80 03 	call	0x700	; 0x700 <_Z12servo_2_freev>
	
}
     7b4:	08 95       	ret

000007b6 <_Z14adc_pin_configv>:


//ADC pin configuration
void adc_pin_config (void)
{
 DDRF = 0x00; 
     7b6:	10 ba       	out	0x10, r1	; 16
 PORTF = 0x00;
     7b8:	11 ba       	out	0x11, r1	; 17
 DDRK = 0x00;
     7ba:	10 92 07 01 	sts	0x0107, r1
 PORTK = 0x00;
     7be:	10 92 08 01 	sts	0x0108, r1
}
     7c2:	08 95       	ret

000007c4 <_Z17motion_pin_configv>:

//Function to configure ports to enable robot's motion
void motion_pin_config (void)
{
	DDRA = DDRA | 0x0F;
     7c4:	81 b1       	in	r24, 0x01	; 1
     7c6:	8f 60       	ori	r24, 0x0F	; 15
     7c8:	81 b9       	out	0x01, r24	; 1
	PORTA = PORTA & 0xF0;
     7ca:	82 b1       	in	r24, 0x02	; 2
     7cc:	80 7f       	andi	r24, 0xF0	; 240
     7ce:	82 b9       	out	0x02, r24	; 2
	DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     7d0:	ea e0       	ldi	r30, 0x0A	; 10
     7d2:	f1 e0       	ldi	r31, 0x01	; 1
     7d4:	80 81       	ld	r24, Z
     7d6:	88 61       	ori	r24, 0x18	; 24
     7d8:	80 83       	st	Z, r24
	PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
     7da:	eb e0       	ldi	r30, 0x0B	; 11
     7dc:	f1 e0       	ldi	r31, 0x01	; 1
     7de:	80 81       	ld	r24, Z
     7e0:	88 61       	ori	r24, 0x18	; 24
     7e2:	80 83       	st	Z, r24
}
     7e4:	08 95       	ret

000007e6 <_Z11timer5_initv>:
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
	TCCR5B = 0x00;	//Stop
     7e6:	e1 e2       	ldi	r30, 0x21	; 33
     7e8:	f1 e0       	ldi	r31, 0x01	; 1
     7ea:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
     7ec:	8f ef       	ldi	r24, 0xFF	; 255
     7ee:	80 93 25 01 	sts	0x0125, r24
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
     7f2:	91 e0       	ldi	r25, 0x01	; 1
     7f4:	90 93 24 01 	sts	0x0124, r25
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
     7f8:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
     7fc:	80 93 28 01 	sts	0x0128, r24
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
     800:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
     804:	80 93 2a 01 	sts	0x012A, r24
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
     808:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
     80c:	80 93 2c 01 	sts	0x012C, r24
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
     810:	89 ea       	ldi	r24, 0xA9	; 169
     812:	80 93 20 01 	sts	0x0120, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     816:	8b e0       	ldi	r24, 0x0B	; 11
     818:	80 83       	st	Z, r24
}
     81a:	08 95       	ret

0000081c <_Z8adc_initv>:

//Initialize ADC registers 
void adc_init()
{
	//ADC Control and Status Register A 
	ADCSRA = 0x00;	
     81c:	ea e7       	ldi	r30, 0x7A	; 122
     81e:	f0 e0       	ldi	r31, 0x00	; 0
     820:	10 82       	st	Z, r1
	//ADC Control and Status Register B  
	ADCSRB = 0x00;		//MUX5 = 0
     822:	10 92 7b 00 	sts	0x007B, r1
	//ADC Multiplexer Selection Register
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     826:	80 e2       	ldi	r24, 0x20	; 32
     828:	80 93 7c 00 	sts	0x007C, r24
	//Analog Comparator Control and Status Register 
	ACSR = 0x80;		//Analog Comparator Disable
     82c:	80 e8       	ldi	r24, 0x80	; 128
     82e:	80 bf       	out	0x30, r24	; 48
	
	ADCSRA = 0x86;		//ADEN=1 --- ADSP1=1 --- ADPS2=1
     830:	86 e8       	ldi	r24, 0x86	; 134
     832:	80 83       	st	Z, r24
}
     834:	08 95       	ret

00000836 <_Z14ADC_Conversionh>:
* Example Call	: <ADC_Conversion(1)>
*/
unsigned char ADC_Conversion(unsigned char Ch) 
{
	unsigned char a;
	if(Ch>7)
     836:	88 30       	cpi	r24, 0x08	; 8
     838:	18 f0       	brcs	.+6      	; 0x840 <_Z14ADC_Conversionh+0xa>
	{
		ADCSRB = 0x08;
     83a:	98 e0       	ldi	r25, 0x08	; 8
     83c:	90 93 7b 00 	sts	0x007B, r25
	}
	Ch = Ch & 0x07;  			
     840:	87 70       	andi	r24, 0x07	; 7
	ADMUX= 0x20| Ch;	   		
     842:	80 62       	ori	r24, 0x20	; 32
     844:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
     848:	ea e7       	ldi	r30, 0x7A	; 122
     84a:	f0 e0       	ldi	r31, 0x00	; 0
     84c:	80 81       	ld	r24, Z
     84e:	80 64       	ori	r24, 0x40	; 64
     850:	80 83       	st	Z, r24
	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
     852:	80 81       	ld	r24, Z
     854:	84 ff       	sbrs	r24, 4
     856:	fd cf       	rjmp	.-6      	; 0x852 <_Z14ADC_Conversionh+0x1c>
	a=ADCH;
     858:	80 91 79 00 	lds	r24, 0x0079
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     85c:	ea e7       	ldi	r30, 0x7A	; 122
     85e:	f0 e0       	ldi	r31, 0x00	; 0
     860:	90 81       	ld	r25, Z
     862:	90 61       	ori	r25, 0x10	; 16
     864:	90 83       	st	Z, r25
	ADCSRB = 0x00;
     866:	10 92 7b 00 	sts	0x007B, r1
	return a;
}
     86a:	08 95       	ret

0000086c <_Z12print_sensorcch>:
* Output		: <None>
* Logic			: <Finds ADC converted value and displays on lcd >
* Example Call	: <print_sensor(1,1,1)>
*/
void print_sensor(char row, char coloumn,unsigned char channel)
{
     86c:	cf 93       	push	r28
     86e:	df 93       	push	r29
     870:	d8 2f       	mov	r29, r24
     872:	c6 2f       	mov	r28, r22
     874:	84 2f       	mov	r24, r20
	
	ADC_Value = ADC_Conversion(channel);
     876:	0e 94 1b 04 	call	0x836	; 0x836 <_Z14ADC_Conversionh>
     87a:	48 2f       	mov	r20, r24
     87c:	80 93 32 09 	sts	0x0932, r24
	lcd_print(row, coloumn, ADC_Value, 3);
     880:	8d 2f       	mov	r24, r29
     882:	6c 2f       	mov	r22, r28
     884:	50 e0       	ldi	r21, 0x00	; 0
     886:	23 e0       	ldi	r18, 0x03	; 3
     888:	30 e0       	ldi	r19, 0x00	; 0
     88a:	0e 94 78 01 	call	0x2f0	; 0x2f0 <_Z9lcd_printccji>
}
     88e:	df 91       	pop	r29
     890:	cf 91       	pop	r28
     892:	08 95       	ret

00000894 <_Z8velocityhh>:
* Logic			: <Modify PWM duty cycle to change velocity of wheels >
* Example Call	: <velocity(180,180)>
*/
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     894:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     898:	60 93 2a 01 	sts	0x012A, r22
}
     89c:	08 95       	ret

0000089e <_Z10motion_seth>:
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	
	PortARestore = PORTA; 		// reading the PORTA original status
     89e:	92 b1       	in	r25, 0x02	; 2
	PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     8a0:	90 7f       	andi	r25, 0xF0	; 240
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     8a2:	89 2b       	or	r24, r25
	PORTA = PortARestore; 		// executing the command
     8a4:	82 b9       	out	0x02, r24	; 2
}
     8a6:	08 95       	ret

000008a8 <_Z7forwardv>:

//Move both wheels in forward direction
void forward (void) 
{
	
  motion_set(0x05);
     8a8:	85 e0       	ldi	r24, 0x05	; 5
     8aa:	0e 94 4f 04 	call	0x89e	; 0x89e <_Z10motion_seth>
}
     8ae:	08 95       	ret

000008b0 <_Z4backv>:

//Move both wheels in backward direction
void back (void)
{
	motion_set(0x0A);
     8b0:	8a e0       	ldi	r24, 0x0A	; 10
     8b2:	0e 94 4f 04 	call	0x89e	; 0x89e <_Z10motion_seth>
}
     8b6:	08 95       	ret

000008b8 <_Z5rightv>:

//Moves robot in right direction (left wheel forwards, right wheel backwards)
void right (void)
{
	motion_set(0x09);
     8b8:	89 e0       	ldi	r24, 0x09	; 9
     8ba:	0e 94 4f 04 	call	0x89e	; 0x89e <_Z10motion_seth>
}
     8be:	08 95       	ret

000008c0 <_Z4leftv>:

//Moves robot in left direction (right wheel forward, left wheel backward)
void left (void)
{
	motion_set(0x06);
     8c0:	86 e0       	ldi	r24, 0x06	; 6
     8c2:	0e 94 4f 04 	call	0x89e	; 0x89e <_Z10motion_seth>
}
     8c6:	08 95       	ret

000008c8 <_Z4stopv>:


//Stops both wheels
void stop (void)
{
   motion_set(0x00);
     8c8:	80 e0       	ldi	r24, 0x00	; 0
     8ca:	0e 94 4f 04 	call	0x89e	; 0x89e <_Z10motion_seth>
}
     8ce:	08 95       	ret

000008d0 <_Z11adjust_pickv>:
* Logic			: <Moves robot back to adjust to pick nuts >
* Example Call	: <adjust_pick()>
*/
void adjust_pick()
{
	back();
     8d0:	0e 94 58 04 	call	0x8b0	; 0x8b0 <_Z4backv>
     8d4:	8f e7       	ldi	r24, 0x7F	; 127
     8d6:	96 e9       	ldi	r25, 0x96	; 150
     8d8:	ab e1       	ldi	r26, 0x1B	; 27
     8da:	81 50       	subi	r24, 0x01	; 1
     8dc:	90 40       	sbci	r25, 0x00	; 0
     8de:	a0 40       	sbci	r26, 0x00	; 0
     8e0:	e1 f7       	brne	.-8      	; 0x8da <_Z11adjust_pickv+0xa>
     8e2:	00 c0       	rjmp	.+0      	; 0x8e4 <_Z11adjust_pickv+0x14>
     8e4:	00 00       	nop
	_delay_ms(565);
	stop();
     8e6:	0e 94 64 04 	call	0x8c8	; 0x8c8 <_Z4stopv>
	servo_2(93);		//open gripper
     8ea:	8d e5       	ldi	r24, 0x5D	; 93
     8ec:	0e 94 60 03 	call	0x6c0	; 0x6c0 <_Z7servo_2h>
     8f0:	8f ef       	ldi	r24, 0xFF	; 255
     8f2:	93 ed       	ldi	r25, 0xD3	; 211
     8f4:	a0 e3       	ldi	r26, 0x30	; 48
     8f6:	81 50       	subi	r24, 0x01	; 1
     8f8:	90 40       	sbci	r25, 0x00	; 0
     8fa:	a0 40       	sbci	r26, 0x00	; 0
     8fc:	e1 f7       	brne	.-8      	; 0x8f6 <_Z11adjust_pickv+0x26>
     8fe:	00 c0       	rjmp	.+0      	; 0x900 <_Z11adjust_pickv+0x30>
     900:	00 00       	nop
	_delay_ms(1000);
	servo_1(13);		//lower the arm
     902:	8d e0       	ldi	r24, 0x0D	; 13
     904:	0e 94 47 03 	call	0x68e	; 0x68e <_Z7servo_1h>
     908:	8f ef       	ldi	r24, 0xFF	; 255
     90a:	9b e7       	ldi	r25, 0x7B	; 123
     90c:	a2 e9       	ldi	r26, 0x92	; 146
     90e:	81 50       	subi	r24, 0x01	; 1
     910:	90 40       	sbci	r25, 0x00	; 0
     912:	a0 40       	sbci	r26, 0x00	; 0
     914:	e1 f7       	brne	.-8      	; 0x90e <_Z11adjust_pickv+0x3e>
     916:	00 c0       	rjmp	.+0      	; 0x918 <_Z11adjust_pickv+0x48>
     918:	00 00       	nop
	_delay_ms(3000);
	forward();
     91a:	0e 94 54 04 	call	0x8a8	; 0x8a8 <_Z7forwardv>
     91e:	8f ef       	ldi	r24, 0xFF	; 255
     920:	95 ea       	ldi	r25, 0xA5	; 165
     922:	ae e0       	ldi	r26, 0x0E	; 14
     924:	81 50       	subi	r24, 0x01	; 1
     926:	90 40       	sbci	r25, 0x00	; 0
     928:	a0 40       	sbci	r26, 0x00	; 0
     92a:	e1 f7       	brne	.-8      	; 0x924 <_Z11adjust_pickv+0x54>
     92c:	00 c0       	rjmp	.+0      	; 0x92e <_Z11adjust_pickv+0x5e>
     92e:	00 00       	nop
	_delay_ms(300);
	stop();
     930:	0e 94 64 04 	call	0x8c8	; 0x8c8 <_Z4stopv>
}
     934:	08 95       	ret

00000936 <_Z12adjust_placev>:
* Logic			: <Moves robot back to adjust to place nuts >
* Example Call	: <adjust_place()>
*/
void adjust_place()
{
	back();
     936:	0e 94 58 04 	call	0x8b0	; 0x8b0 <_Z4backv>
     93a:	8f e7       	ldi	r24, 0x7F	; 127
     93c:	93 e1       	ldi	r25, 0x13	; 19
     93e:	ac e1       	ldi	r26, 0x1C	; 28
     940:	81 50       	subi	r24, 0x01	; 1
     942:	90 40       	sbci	r25, 0x00	; 0
     944:	a0 40       	sbci	r26, 0x00	; 0
     946:	e1 f7       	brne	.-8      	; 0x940 <_Z12adjust_placev+0xa>
     948:	00 c0       	rjmp	.+0      	; 0x94a <_Z12adjust_placev+0x14>
     94a:	00 00       	nop
	_delay_ms(575);
	stop();
     94c:	0e 94 64 04 	call	0x8c8	; 0x8c8 <_Z4stopv>
}
     950:	08 95       	ret

00000952 <_Z17buzzer_pin_configv>:

//Buzzer Pin Configuration
void buzzer_pin_config (void)
{
	DDRC = DDRC | 0x08;			//Setting PORTC 3 as output
     952:	3b 9a       	sbi	0x07, 3	; 7
	PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
     954:	43 98       	cbi	0x08, 3	; 8
}
     956:	08 95       	ret

00000958 <_Z9buzzer_onv>:

//To Configure Buzzer On
void buzzer_on (void)
{
	unsigned char port_restore = 0;
	port_restore = PINC;
     958:	86 b1       	in	r24, 0x06	; 6
	port_restore = port_restore | 0x08;
     95a:	88 60       	ori	r24, 0x08	; 8
	PORTC = port_restore;
     95c:	88 b9       	out	0x08, r24	; 8
}
     95e:	08 95       	ret

00000960 <_Z10buzzer_offv>:

//To configure Buzzer Off
void buzzer_off (void)
{
	unsigned char port_restore = 0;
	port_restore = PINC;
     960:	86 b1       	in	r24, 0x06	; 6
	port_restore = port_restore & 0xF7;
     962:	87 7f       	andi	r24, 0xF7	; 247
	PORTC = port_restore;
     964:	88 b9       	out	0x08, r24	; 8
}
     966:	08 95       	ret

00000968 <_Z9port_initv>:
//Function to Initialize PORTS
void port_init()
{
	buzzer_pin_config();
     968:	0e 94 a9 04 	call	0x952	; 0x952 <_Z17buzzer_pin_configv>
	servo_config();//Servo configuration included in arm.h
     96c:	0e 94 23 03 	call	0x646	; 0x646 <_Z12servo_configv>
	lcd_port_config();// lcd configuration include in lcd.h
     970:	0e 94 95 00 	call	0x12a	; 0x12a <_Z15lcd_port_configv>
	adc_pin_config();// adc configuration
     974:	0e 94 db 03 	call	0x7b6	; 0x7b6 <_Z14adc_pin_configv>
	motion_pin_config();//motor pin configuration
     978:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <_Z17motion_pin_configv>
	color_sensor_init();// color sensor configuration included in color.h
     97c:	0e 94 1c 03 	call	0x638	; 0x638 <_Z17color_sensor_initv>
}
     980:	08 95       	ret

00000982 <_Z12init_devicesv>:

void init_devices (void)
{
 	cli(); //Clears the global interrupts
     982:	f8 94       	cli
	port_init();
     984:	0e 94 b4 04 	call	0x968	; 0x968 <_Z9port_initv>
	adc_init();//initialize adc registers
     988:	0e 94 0e 04 	call	0x81c	; 0x81c <_Z8adc_initv>
	timer1_init();//initialize Timer 1
     98c:	0e 94 28 03 	call	0x650	; 0x650 <_Z11timer1_initv>
	timer5_init();//initialize Timer 2
     990:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <_Z11timer5_initv>
	sei();   //Enables the global interrupts
     994:	78 94       	sei
}
     996:	08 95       	ret

00000998 <_Z9direction6vertexS_i>:
					  This function finds direction of destination vertex from current vertex. Arena is represented by vertices given by all_nodes.
					  eg. if current vertex is {0,0} and destination is {1,0} then destination lies to right of current vertex or West by 4th case>
* Example Call		: <direction({1,0},{0,1},5)> *
*/
int direction(vertex dest, vertex src, int d)
{
     998:	4f 92       	push	r4
     99a:	5f 92       	push	r5
     99c:	6f 92       	push	r6
     99e:	7f 92       	push	r7
     9a0:	8f 92       	push	r8
     9a2:	9f 92       	push	r9
     9a4:	af 92       	push	r10
     9a6:	bf 92       	push	r11
     9a8:	cf 92       	push	r12
     9aa:	df 92       	push	r13
     9ac:	ef 92       	push	r14
     9ae:	ff 92       	push	r15
     9b0:	0f 93       	push	r16
     9b2:	1f 93       	push	r17
     9b4:	cf 93       	push	r28
     9b6:	df 93       	push	r29
     9b8:	cd b7       	in	r28, 0x3d	; 61
     9ba:	de b7       	in	r29, 0x3e	; 62
     9bc:	60 97       	sbiw	r28, 0x10	; 16
     9be:	0f b6       	in	r0, 0x3f	; 63
     9c0:	f8 94       	cli
     9c2:	de bf       	out	0x3e, r29	; 62
     9c4:	0f be       	out	0x3f, r0	; 63
     9c6:	cd bf       	out	0x3d, r28	; 61
     9c8:	29 83       	std	Y+1, r18	; 0x01
     9ca:	3a 83       	std	Y+2, r19	; 0x02
     9cc:	4b 83       	std	Y+3, r20	; 0x03
     9ce:	5c 83       	std	Y+4, r21	; 0x04
     9d0:	6d 83       	std	Y+5, r22	; 0x05
     9d2:	7e 83       	std	Y+6, r23	; 0x06
     9d4:	8f 83       	std	Y+7, r24	; 0x07
     9d6:	98 87       	std	Y+8, r25	; 0x08
     9d8:	a9 86       	std	Y+9, r10	; 0x09
     9da:	ba 86       	std	Y+10, r11	; 0x0a
     9dc:	cb 86       	std	Y+11, r12	; 0x0b
     9de:	dc 86       	std	Y+12, r13	; 0x0c
     9e0:	ed 86       	std	Y+13, r14	; 0x0d
     9e2:	fe 86       	std	Y+14, r15	; 0x0e
     9e4:	0f 87       	std	Y+15, r16	; 0x0f
     9e6:	18 8b       	std	Y+16, r17	; 0x10
	}
	else if ((dest.x - src.x) == 0)
	{
		//North
		if ((dest.y - src.y) < 0)
			d = 0;
     9e8:	8d 80       	ldd	r8, Y+5	; 0x05
     9ea:	9e 80       	ldd	r9, Y+6	; 0x06
     9ec:	af 80       	ldd	r10, Y+7	; 0x07
     9ee:	b8 84       	ldd	r11, Y+8	; 0x08
     9f0:	4d 84       	ldd	r4, Y+13	; 0x0d
     9f2:	5e 84       	ldd	r5, Y+14	; 0x0e
     9f4:	6f 84       	ldd	r6, Y+15	; 0x0f
     9f6:	78 88       	ldd	r7, Y+16	; 0x10
					  eg. if current vertex is {0,0} and destination is {1,0} then destination lies to right of current vertex or West by 4th case>
* Example Call		: <direction({1,0},{0,1},5)> *
*/
int direction(vertex dest, vertex src, int d)
{
	if ((dest.x - src.x) < 0)
     9f8:	69 81       	ldd	r22, Y+1	; 0x01
     9fa:	7a 81       	ldd	r23, Y+2	; 0x02
     9fc:	8b 81       	ldd	r24, Y+3	; 0x03
     9fe:	9c 81       	ldd	r25, Y+4	; 0x04
     a00:	29 85       	ldd	r18, Y+9	; 0x09
     a02:	3a 85       	ldd	r19, Y+10	; 0x0a
     a04:	4b 85       	ldd	r20, Y+11	; 0x0b
     a06:	5c 85       	ldd	r21, Y+12	; 0x0c
     a08:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <__subsf3>
     a0c:	e6 2e       	mov	r14, r22
     a0e:	f7 2e       	mov	r15, r23
     a10:	08 2f       	mov	r16, r24
     a12:	19 2f       	mov	r17, r25
     a14:	86 2f       	mov	r24, r22
     a16:	9f 2d       	mov	r25, r15
     a18:	a0 2f       	mov	r26, r16
     a1a:	b1 2f       	mov	r27, r17
     a1c:	bc 01       	movw	r22, r24
     a1e:	cd 01       	movw	r24, r26
     a20:	20 e0       	ldi	r18, 0x00	; 0
     a22:	30 e0       	ldi	r19, 0x00	; 0
     a24:	a9 01       	movw	r20, r18
     a26:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <__cmpsf2>
     a2a:	88 23       	and	r24, r24
     a2c:	0c f0       	brlt	.+2      	; 0xa30 <_Z9direction6vertexS_i+0x98>
     a2e:	c7 c0       	rjmp	.+398    	; 0xbbe <_Z9direction6vertexS_i+0x226>
	{
		//North-North-West
		if ((dest.x - src.x) == -0.5 && (dest.y - src.y) == -1)
     a30:	8e 2d       	mov	r24, r14
     a32:	9f 2d       	mov	r25, r15
     a34:	a0 2f       	mov	r26, r16
     a36:	b1 2f       	mov	r27, r17
     a38:	bc 01       	movw	r22, r24
     a3a:	cd 01       	movw	r24, r26
     a3c:	20 e0       	ldi	r18, 0x00	; 0
     a3e:	30 e0       	ldi	r19, 0x00	; 0
     a40:	40 e0       	ldi	r20, 0x00	; 0
     a42:	5f eb       	ldi	r21, 0xBF	; 191
     a44:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <__cmpsf2>
     a48:	88 23       	and	r24, r24
     a4a:	81 f4       	brne	.+32     	; 0xa6c <_Z9direction6vertexS_i+0xd4>
     a4c:	c5 01       	movw	r24, r10
     a4e:	b4 01       	movw	r22, r8
     a50:	a3 01       	movw	r20, r6
     a52:	92 01       	movw	r18, r4
     a54:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <__subsf3>
     a58:	20 e0       	ldi	r18, 0x00	; 0
     a5a:	30 e0       	ldi	r19, 0x00	; 0
     a5c:	40 e8       	ldi	r20, 0x80	; 128
     a5e:	5f eb       	ldi	r21, 0xBF	; 191
     a60:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <__cmpsf2>
     a64:	88 23       	and	r24, r24
     a66:	09 f4       	brne	.+2      	; 0xa6a <_Z9direction6vertexS_i+0xd2>
     a68:	96 c1       	rjmp	.+812    	; 0xd96 <_Z9direction6vertexS_i+0x3fe>
     a6a:	3b c0       	rjmp	.+118    	; 0xae2 <_Z9direction6vertexS_i+0x14a>
		{
			d =15;
		}
		//North-West-West
		else if((dest.x - src.x) == -1 && (dest.y - src.y) == -0.5)
     a6c:	8e 2d       	mov	r24, r14
     a6e:	9f 2d       	mov	r25, r15
     a70:	a0 2f       	mov	r26, r16
     a72:	b1 2f       	mov	r27, r17
     a74:	bc 01       	movw	r22, r24
     a76:	cd 01       	movw	r24, r26
     a78:	20 e0       	ldi	r18, 0x00	; 0
     a7a:	30 e0       	ldi	r19, 0x00	; 0
     a7c:	40 e8       	ldi	r20, 0x80	; 128
     a7e:	5f eb       	ldi	r21, 0xBF	; 191
     a80:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <__cmpsf2>
     a84:	88 23       	and	r24, r24
     a86:	81 f4       	brne	.+32     	; 0xaa8 <_Z9direction6vertexS_i+0x110>
     a88:	c5 01       	movw	r24, r10
     a8a:	b4 01       	movw	r22, r8
     a8c:	a3 01       	movw	r20, r6
     a8e:	92 01       	movw	r18, r4
     a90:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <__subsf3>
     a94:	20 e0       	ldi	r18, 0x00	; 0
     a96:	30 e0       	ldi	r19, 0x00	; 0
     a98:	40 e0       	ldi	r20, 0x00	; 0
     a9a:	5f eb       	ldi	r21, 0xBF	; 191
     a9c:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <__cmpsf2>
     aa0:	88 23       	and	r24, r24
     aa2:	09 f4       	brne	.+2      	; 0xaa6 <_Z9direction6vertexS_i+0x10e>
     aa4:	7b c1       	rjmp	.+758    	; 0xd9c <_Z9direction6vertexS_i+0x404>
     aa6:	0e c0       	rjmp	.+28     	; 0xac4 <_Z9direction6vertexS_i+0x12c>
		{
			d =13;
		}
		//North-West
		else if ((dest.x - src.x)==-1 &&(dest.y - src.y) ==-1)
     aa8:	8e 2d       	mov	r24, r14
     aaa:	9f 2d       	mov	r25, r15
     aac:	a0 2f       	mov	r26, r16
     aae:	b1 2f       	mov	r27, r17
     ab0:	bc 01       	movw	r22, r24
     ab2:	cd 01       	movw	r24, r26
     ab4:	20 e0       	ldi	r18, 0x00	; 0
     ab6:	30 e0       	ldi	r19, 0x00	; 0
     ab8:	40 e8       	ldi	r20, 0x80	; 128
     aba:	5f eb       	ldi	r21, 0xBF	; 191
     abc:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <__cmpsf2>
     ac0:	88 23       	and	r24, r24
     ac2:	79 f4       	brne	.+30     	; 0xae2 <_Z9direction6vertexS_i+0x14a>
     ac4:	c5 01       	movw	r24, r10
     ac6:	b4 01       	movw	r22, r8
     ac8:	a3 01       	movw	r20, r6
     aca:	92 01       	movw	r18, r4
     acc:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <__subsf3>
     ad0:	20 e0       	ldi	r18, 0x00	; 0
     ad2:	30 e0       	ldi	r19, 0x00	; 0
     ad4:	40 e8       	ldi	r20, 0x80	; 128
     ad6:	5f eb       	ldi	r21, 0xBF	; 191
     ad8:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <__cmpsf2>
     adc:	88 23       	and	r24, r24
     ade:	09 f4       	brne	.+2      	; 0xae2 <_Z9direction6vertexS_i+0x14a>
     ae0:	60 c1       	rjmp	.+704    	; 0xda2 <_Z9direction6vertexS_i+0x40a>
			d = 14;
		//West
		else if ((dest.y == src.y))
     ae2:	c5 01       	movw	r24, r10
     ae4:	b4 01       	movw	r22, r8
     ae6:	a3 01       	movw	r20, r6
     ae8:	92 01       	movw	r18, r4
     aea:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <__cmpsf2>
     aee:	88 23       	and	r24, r24
     af0:	09 f4       	brne	.+2      	; 0xaf4 <_Z9direction6vertexS_i+0x15c>
     af2:	5a c1       	rjmp	.+692    	; 0xda8 <_Z9direction6vertexS_i+0x410>
			d =12;
		//South-West-West
		else if ((dest.x - src.x) == -1 && (dest.y - src.y) == 0.5)
     af4:	8e 2d       	mov	r24, r14
     af6:	9f 2d       	mov	r25, r15
     af8:	a0 2f       	mov	r26, r16
     afa:	b1 2f       	mov	r27, r17
     afc:	bc 01       	movw	r22, r24
     afe:	cd 01       	movw	r24, r26
     b00:	20 e0       	ldi	r18, 0x00	; 0
     b02:	30 e0       	ldi	r19, 0x00	; 0
     b04:	40 e8       	ldi	r20, 0x80	; 128
     b06:	5f eb       	ldi	r21, 0xBF	; 191
     b08:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <__cmpsf2>
     b0c:	88 23       	and	r24, r24
     b0e:	81 f4       	brne	.+32     	; 0xb30 <_Z9direction6vertexS_i+0x198>
     b10:	c5 01       	movw	r24, r10
     b12:	b4 01       	movw	r22, r8
     b14:	a3 01       	movw	r20, r6
     b16:	92 01       	movw	r18, r4
     b18:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <__subsf3>
     b1c:	20 e0       	ldi	r18, 0x00	; 0
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	40 e0       	ldi	r20, 0x00	; 0
     b22:	5f e3       	ldi	r21, 0x3F	; 63
     b24:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <__cmpsf2>
     b28:	88 23       	and	r24, r24
     b2a:	09 f4       	brne	.+2      	; 0xb2e <_Z9direction6vertexS_i+0x196>
     b2c:	40 c1       	rjmp	.+640    	; 0xdae <_Z9direction6vertexS_i+0x416>
     b2e:	0e c0       	rjmp	.+28     	; 0xb4c <_Z9direction6vertexS_i+0x1b4>
		{
			d = 11;
		}
		//South-West
		else if ((dest.x - src.x) == -1 && (dest.y - src.y) == 1)
     b30:	8e 2d       	mov	r24, r14
     b32:	9f 2d       	mov	r25, r15
     b34:	a0 2f       	mov	r26, r16
     b36:	b1 2f       	mov	r27, r17
     b38:	bc 01       	movw	r22, r24
     b3a:	cd 01       	movw	r24, r26
     b3c:	20 e0       	ldi	r18, 0x00	; 0
     b3e:	30 e0       	ldi	r19, 0x00	; 0
     b40:	40 e8       	ldi	r20, 0x80	; 128
     b42:	5f eb       	ldi	r21, 0xBF	; 191
     b44:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <__cmpsf2>
     b48:	88 23       	and	r24, r24
     b4a:	81 f4       	brne	.+32     	; 0xb6c <_Z9direction6vertexS_i+0x1d4>
     b4c:	c5 01       	movw	r24, r10
     b4e:	b4 01       	movw	r22, r8
     b50:	a3 01       	movw	r20, r6
     b52:	92 01       	movw	r18, r4
     b54:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <__subsf3>
     b58:	20 e0       	ldi	r18, 0x00	; 0
     b5a:	30 e0       	ldi	r19, 0x00	; 0
     b5c:	40 e8       	ldi	r20, 0x80	; 128
     b5e:	5f e3       	ldi	r21, 0x3F	; 63
     b60:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <__cmpsf2>
     b64:	88 23       	and	r24, r24
     b66:	09 f4       	brne	.+2      	; 0xb6a <_Z9direction6vertexS_i+0x1d2>
     b68:	25 c1       	rjmp	.+586    	; 0xdb4 <_Z9direction6vertexS_i+0x41c>
     b6a:	1d c0       	rjmp	.+58     	; 0xba6 <_Z9direction6vertexS_i+0x20e>
			d = 10;
		//South-South-West
		else if ((dest.x - src.x) == -0.5 && (dest.y - src.y) == 1)
     b6c:	8e 2d       	mov	r24, r14
     b6e:	9f 2d       	mov	r25, r15
     b70:	a0 2f       	mov	r26, r16
     b72:	b1 2f       	mov	r27, r17
     b74:	bc 01       	movw	r22, r24
     b76:	cd 01       	movw	r24, r26
     b78:	20 e0       	ldi	r18, 0x00	; 0
     b7a:	30 e0       	ldi	r19, 0x00	; 0
     b7c:	40 e0       	ldi	r20, 0x00	; 0
     b7e:	5f eb       	ldi	r21, 0xBF	; 191
     b80:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <__cmpsf2>
     b84:	88 23       	and	r24, r24
     b86:	79 f4       	brne	.+30     	; 0xba6 <_Z9direction6vertexS_i+0x20e>
     b88:	c5 01       	movw	r24, r10
     b8a:	b4 01       	movw	r22, r8
     b8c:	a3 01       	movw	r20, r6
     b8e:	92 01       	movw	r18, r4
     b90:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <__subsf3>
     b94:	20 e0       	ldi	r18, 0x00	; 0
     b96:	30 e0       	ldi	r19, 0x00	; 0
     b98:	40 e8       	ldi	r20, 0x80	; 128
     b9a:	5f e3       	ldi	r21, 0x3F	; 63
     b9c:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <__cmpsf2>
     ba0:	88 23       	and	r24, r24
     ba2:	09 f4       	brne	.+2      	; 0xba6 <_Z9direction6vertexS_i+0x20e>
     ba4:	0a c1       	rjmp	.+532    	; 0xdba <_Z9direction6vertexS_i+0x422>
		{
			d =9;
		}
		else
		{
			if (dest.y > src.y)
     ba6:	c5 01       	movw	r24, r10
     ba8:	b4 01       	movw	r22, r8
     baa:	a3 01       	movw	r20, r6
     bac:	92 01       	movw	r18, r4
     bae:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <__gesf2>
     bb2:	18 16       	cp	r1, r24
     bb4:	0c f0       	brlt	.+2      	; 0xbb8 <_Z9direction6vertexS_i+0x220>
     bb6:	04 c1       	rjmp	.+520    	; 0xdc0 <_Z9direction6vertexS_i+0x428>
				d = 10;
     bb8:	8a e0       	ldi	r24, 0x0A	; 10
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	1b c1       	rjmp	.+566    	; 0xdf4 <_Z9direction6vertexS_i+0x45c>
			else
				d = 14;
		}
	}
	else if ((dest.x - src.x) == 0)
     bbe:	8e 2d       	mov	r24, r14
     bc0:	9f 2d       	mov	r25, r15
     bc2:	a0 2f       	mov	r26, r16
     bc4:	b1 2f       	mov	r27, r17
     bc6:	bc 01       	movw	r22, r24
     bc8:	cd 01       	movw	r24, r26
     bca:	20 e0       	ldi	r18, 0x00	; 0
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	a9 01       	movw	r20, r18
     bd0:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <__cmpsf2>
     bd4:	88 23       	and	r24, r24
     bd6:	d9 f4       	brne	.+54     	; 0xc0e <_Z9direction6vertexS_i+0x276>
	{
		//North
		if ((dest.y - src.y) < 0)
     bd8:	c5 01       	movw	r24, r10
     bda:	b4 01       	movw	r22, r8
     bdc:	a3 01       	movw	r20, r6
     bde:	92 01       	movw	r18, r4
     be0:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <__subsf3>
     be4:	20 e0       	ldi	r18, 0x00	; 0
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	a9 01       	movw	r20, r18
     bea:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <__cmpsf2>
			d = 0;
		//South
		else
			d = 8;
     bee:	99 27       	eor	r25, r25
     bf0:	87 fd       	sbrc	r24, 7
     bf2:	90 95       	com	r25
     bf4:	80 95       	com	r24
     bf6:	90 95       	com	r25
     bf8:	88 27       	eor	r24, r24
     bfa:	99 0f       	add	r25, r25
     bfc:	88 1f       	adc	r24, r24
     bfe:	99 27       	eor	r25, r25
     c00:	88 0f       	add	r24, r24
     c02:	99 1f       	adc	r25, r25
     c04:	88 0f       	add	r24, r24
     c06:	99 1f       	adc	r25, r25
     c08:	88 0f       	add	r24, r24
     c0a:	99 1f       	adc	r25, r25
     c0c:	f3 c0       	rjmp	.+486    	; 0xdf4 <_Z9direction6vertexS_i+0x45c>
	}
	else
	{
		//North-North-EasT
		if ((dest.x - src.x) == 0.5 && (dest.y - src.y) == -1)
     c0e:	8e 2d       	mov	r24, r14
     c10:	9f 2d       	mov	r25, r15
     c12:	a0 2f       	mov	r26, r16
     c14:	b1 2f       	mov	r27, r17
     c16:	bc 01       	movw	r22, r24
     c18:	cd 01       	movw	r24, r26
     c1a:	20 e0       	ldi	r18, 0x00	; 0
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	40 e0       	ldi	r20, 0x00	; 0
     c20:	5f e3       	ldi	r21, 0x3F	; 63
     c22:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <__cmpsf2>
     c26:	88 23       	and	r24, r24
     c28:	79 f4       	brne	.+30     	; 0xc48 <_Z9direction6vertexS_i+0x2b0>
     c2a:	c5 01       	movw	r24, r10
     c2c:	b4 01       	movw	r22, r8
     c2e:	a3 01       	movw	r20, r6
     c30:	92 01       	movw	r18, r4
     c32:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <__subsf3>
     c36:	20 e0       	ldi	r18, 0x00	; 0
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	40 e8       	ldi	r20, 0x80	; 128
     c3c:	5f eb       	ldi	r21, 0xBF	; 191
     c3e:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <__cmpsf2>
     c42:	88 23       	and	r24, r24
     c44:	e1 f5       	brne	.+120    	; 0xcbe <_Z9direction6vertexS_i+0x326>
     c46:	bf c0       	rjmp	.+382    	; 0xdc6 <_Z9direction6vertexS_i+0x42e>
		{
			d =1;
		}
		//North-East-East
		else if ((dest.x - src.x) == 1 && (dest.y - src.y) == -0.5)
     c48:	8e 2d       	mov	r24, r14
     c4a:	9f 2d       	mov	r25, r15
     c4c:	a0 2f       	mov	r26, r16
     c4e:	b1 2f       	mov	r27, r17
     c50:	bc 01       	movw	r22, r24
     c52:	cd 01       	movw	r24, r26
     c54:	20 e0       	ldi	r18, 0x00	; 0
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	40 e8       	ldi	r20, 0x80	; 128
     c5a:	5f e3       	ldi	r21, 0x3F	; 63
     c5c:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <__cmpsf2>
     c60:	88 23       	and	r24, r24
     c62:	81 f4       	brne	.+32     	; 0xc84 <_Z9direction6vertexS_i+0x2ec>
     c64:	c5 01       	movw	r24, r10
     c66:	b4 01       	movw	r22, r8
     c68:	a3 01       	movw	r20, r6
     c6a:	92 01       	movw	r18, r4
     c6c:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <__subsf3>
     c70:	20 e0       	ldi	r18, 0x00	; 0
     c72:	30 e0       	ldi	r19, 0x00	; 0
     c74:	40 e0       	ldi	r20, 0x00	; 0
     c76:	5f eb       	ldi	r21, 0xBF	; 191
     c78:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <__cmpsf2>
     c7c:	88 23       	and	r24, r24
     c7e:	09 f4       	brne	.+2      	; 0xc82 <_Z9direction6vertexS_i+0x2ea>
     c80:	a5 c0       	rjmp	.+330    	; 0xdcc <_Z9direction6vertexS_i+0x434>
     c82:	0e c0       	rjmp	.+28     	; 0xca0 <_Z9direction6vertexS_i+0x308>
		{
			d =3;
		}
		//North-East
		else if ((dest.x - src.x) == 1 && (dest.y - src.y) == -1)
     c84:	8e 2d       	mov	r24, r14
     c86:	9f 2d       	mov	r25, r15
     c88:	a0 2f       	mov	r26, r16
     c8a:	b1 2f       	mov	r27, r17
     c8c:	bc 01       	movw	r22, r24
     c8e:	cd 01       	movw	r24, r26
     c90:	20 e0       	ldi	r18, 0x00	; 0
     c92:	30 e0       	ldi	r19, 0x00	; 0
     c94:	40 e8       	ldi	r20, 0x80	; 128
     c96:	5f e3       	ldi	r21, 0x3F	; 63
     c98:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <__cmpsf2>
     c9c:	88 23       	and	r24, r24
     c9e:	79 f4       	brne	.+30     	; 0xcbe <_Z9direction6vertexS_i+0x326>
     ca0:	c5 01       	movw	r24, r10
     ca2:	b4 01       	movw	r22, r8
     ca4:	a3 01       	movw	r20, r6
     ca6:	92 01       	movw	r18, r4
     ca8:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <__subsf3>
     cac:	20 e0       	ldi	r18, 0x00	; 0
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	40 e8       	ldi	r20, 0x80	; 128
     cb2:	5f eb       	ldi	r21, 0xBF	; 191
     cb4:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <__cmpsf2>
     cb8:	88 23       	and	r24, r24
     cba:	09 f4       	brne	.+2      	; 0xcbe <_Z9direction6vertexS_i+0x326>
     cbc:	8a c0       	rjmp	.+276    	; 0xdd2 <_Z9direction6vertexS_i+0x43a>
			d = 2;
		//East
		else if ((dest.y == src.y))
     cbe:	c5 01       	movw	r24, r10
     cc0:	b4 01       	movw	r22, r8
     cc2:	a3 01       	movw	r20, r6
     cc4:	92 01       	movw	r18, r4
     cc6:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <__cmpsf2>
     cca:	88 23       	and	r24, r24
     ccc:	09 f4       	brne	.+2      	; 0xcd0 <_Z9direction6vertexS_i+0x338>
     cce:	84 c0       	rjmp	.+264    	; 0xdd8 <_Z9direction6vertexS_i+0x440>
			d = 4;
		//South-East-East
		else if ((dest.x - src.x) == 1 && (dest.y - src.y) == 0.5)
     cd0:	8e 2d       	mov	r24, r14
     cd2:	9f 2d       	mov	r25, r15
     cd4:	a0 2f       	mov	r26, r16
     cd6:	b1 2f       	mov	r27, r17
     cd8:	bc 01       	movw	r22, r24
     cda:	cd 01       	movw	r24, r26
     cdc:	20 e0       	ldi	r18, 0x00	; 0
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	40 e8       	ldi	r20, 0x80	; 128
     ce2:	5f e3       	ldi	r21, 0x3F	; 63
     ce4:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <__cmpsf2>
     ce8:	88 23       	and	r24, r24
     cea:	81 f4       	brne	.+32     	; 0xd0c <_Z9direction6vertexS_i+0x374>
     cec:	c5 01       	movw	r24, r10
     cee:	b4 01       	movw	r22, r8
     cf0:	a3 01       	movw	r20, r6
     cf2:	92 01       	movw	r18, r4
     cf4:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <__subsf3>
     cf8:	20 e0       	ldi	r18, 0x00	; 0
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	40 e0       	ldi	r20, 0x00	; 0
     cfe:	5f e3       	ldi	r21, 0x3F	; 63
     d00:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <__cmpsf2>
     d04:	88 23       	and	r24, r24
     d06:	09 f4       	brne	.+2      	; 0xd0a <_Z9direction6vertexS_i+0x372>
     d08:	6a c0       	rjmp	.+212    	; 0xdde <_Z9direction6vertexS_i+0x446>
     d0a:	0e c0       	rjmp	.+28     	; 0xd28 <_Z9direction6vertexS_i+0x390>
		{
			d = 5;
		}
		//South-East
		else if ((dest.x - src.x) == 1 && (dest.y - src.y) == 1)
     d0c:	8e 2d       	mov	r24, r14
     d0e:	9f 2d       	mov	r25, r15
     d10:	a0 2f       	mov	r26, r16
     d12:	b1 2f       	mov	r27, r17
     d14:	bc 01       	movw	r22, r24
     d16:	cd 01       	movw	r24, r26
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	40 e8       	ldi	r20, 0x80	; 128
     d1e:	5f e3       	ldi	r21, 0x3F	; 63
     d20:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <__cmpsf2>
     d24:	88 23       	and	r24, r24
     d26:	81 f4       	brne	.+32     	; 0xd48 <_Z9direction6vertexS_i+0x3b0>
     d28:	c5 01       	movw	r24, r10
     d2a:	b4 01       	movw	r22, r8
     d2c:	a3 01       	movw	r20, r6
     d2e:	92 01       	movw	r18, r4
     d30:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <__subsf3>
     d34:	20 e0       	ldi	r18, 0x00	; 0
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	40 e8       	ldi	r20, 0x80	; 128
     d3a:	5f e3       	ldi	r21, 0x3F	; 63
     d3c:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <__cmpsf2>
     d40:	88 23       	and	r24, r24
     d42:	09 f4       	brne	.+2      	; 0xd46 <_Z9direction6vertexS_i+0x3ae>
     d44:	4f c0       	rjmp	.+158    	; 0xde4 <_Z9direction6vertexS_i+0x44c>
     d46:	1c c0       	rjmp	.+56     	; 0xd80 <_Z9direction6vertexS_i+0x3e8>
			d = 6;
		//South-South-East
		else if ((dest.x - src.x) == 0.5 && (dest.y - src.y) == 1)
     d48:	8e 2d       	mov	r24, r14
     d4a:	9f 2d       	mov	r25, r15
     d4c:	a0 2f       	mov	r26, r16
     d4e:	b1 2f       	mov	r27, r17
     d50:	bc 01       	movw	r22, r24
     d52:	cd 01       	movw	r24, r26
     d54:	20 e0       	ldi	r18, 0x00	; 0
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	40 e0       	ldi	r20, 0x00	; 0
     d5a:	5f e3       	ldi	r21, 0x3F	; 63
     d5c:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <__cmpsf2>
     d60:	88 23       	and	r24, r24
     d62:	71 f4       	brne	.+28     	; 0xd80 <_Z9direction6vertexS_i+0x3e8>
     d64:	c5 01       	movw	r24, r10
     d66:	b4 01       	movw	r22, r8
     d68:	a3 01       	movw	r20, r6
     d6a:	92 01       	movw	r18, r4
     d6c:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <__subsf3>
     d70:	20 e0       	ldi	r18, 0x00	; 0
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	40 e8       	ldi	r20, 0x80	; 128
     d76:	5f e3       	ldi	r21, 0x3F	; 63
     d78:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <__cmpsf2>
     d7c:	88 23       	and	r24, r24
     d7e:	a9 f1       	breq	.+106    	; 0xdea <_Z9direction6vertexS_i+0x452>
		{
			d = 7;
		}
		else
		{
			if (dest.y > src.y)
     d80:	c5 01       	movw	r24, r10
     d82:	b4 01       	movw	r22, r8
     d84:	a3 01       	movw	r20, r6
     d86:	92 01       	movw	r18, r4
     d88:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <__gesf2>
     d8c:	18 16       	cp	r1, r24
     d8e:	84 f5       	brge	.+96     	; 0xdf0 <_Z9direction6vertexS_i+0x458>
				d = 6;
     d90:	86 e0       	ldi	r24, 0x06	; 6
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	2f c0       	rjmp	.+94     	; 0xdf4 <_Z9direction6vertexS_i+0x45c>
	if ((dest.x - src.x) < 0)
	{
		//North-North-West
		if ((dest.x - src.x) == -0.5 && (dest.y - src.y) == -1)
		{
			d =15;
     d96:	8f e0       	ldi	r24, 0x0F	; 15
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	2c c0       	rjmp	.+88     	; 0xdf4 <_Z9direction6vertexS_i+0x45c>
		}
		//North-West-West
		else if((dest.x - src.x) == -1 && (dest.y - src.y) == -0.5)
		{
			d =13;
     d9c:	8d e0       	ldi	r24, 0x0D	; 13
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	29 c0       	rjmp	.+82     	; 0xdf4 <_Z9direction6vertexS_i+0x45c>
		}
		//North-West
		else if ((dest.x - src.x)==-1 &&(dest.y - src.y) ==-1)
			d = 14;
     da2:	8e e0       	ldi	r24, 0x0E	; 14
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	26 c0       	rjmp	.+76     	; 0xdf4 <_Z9direction6vertexS_i+0x45c>
		//West
		else if ((dest.y == src.y))
			d =12;
     da8:	8c e0       	ldi	r24, 0x0C	; 12
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	23 c0       	rjmp	.+70     	; 0xdf4 <_Z9direction6vertexS_i+0x45c>
		//South-West-West
		else if ((dest.x - src.x) == -1 && (dest.y - src.y) == 0.5)
		{
			d = 11;
     dae:	8b e0       	ldi	r24, 0x0B	; 11
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	20 c0       	rjmp	.+64     	; 0xdf4 <_Z9direction6vertexS_i+0x45c>
		}
		//South-West
		else if ((dest.x - src.x) == -1 && (dest.y - src.y) == 1)
			d = 10;
     db4:	8a e0       	ldi	r24, 0x0A	; 10
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	1d c0       	rjmp	.+58     	; 0xdf4 <_Z9direction6vertexS_i+0x45c>
		//South-South-West
		else if ((dest.x - src.x) == -0.5 && (dest.y - src.y) == 1)
		{
			d =9;
     dba:	89 e0       	ldi	r24, 0x09	; 9
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	1a c0       	rjmp	.+52     	; 0xdf4 <_Z9direction6vertexS_i+0x45c>
		else
		{
			if (dest.y > src.y)
				d = 10;
			else
				d = 14;
     dc0:	8e e0       	ldi	r24, 0x0E	; 14
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	17 c0       	rjmp	.+46     	; 0xdf4 <_Z9direction6vertexS_i+0x45c>
	else
	{
		//North-North-EasT
		if ((dest.x - src.x) == 0.5 && (dest.y - src.y) == -1)
		{
			d =1;
     dc6:	81 e0       	ldi	r24, 0x01	; 1
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	14 c0       	rjmp	.+40     	; 0xdf4 <_Z9direction6vertexS_i+0x45c>
		}
		//North-East-East
		else if ((dest.x - src.x) == 1 && (dest.y - src.y) == -0.5)
		{
			d =3;
     dcc:	83 e0       	ldi	r24, 0x03	; 3
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	11 c0       	rjmp	.+34     	; 0xdf4 <_Z9direction6vertexS_i+0x45c>
		}
		//North-East
		else if ((dest.x - src.x) == 1 && (dest.y - src.y) == -1)
			d = 2;
     dd2:	82 e0       	ldi	r24, 0x02	; 2
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	0e c0       	rjmp	.+28     	; 0xdf4 <_Z9direction6vertexS_i+0x45c>
		//East
		else if ((dest.y == src.y))
			d = 4;
     dd8:	84 e0       	ldi	r24, 0x04	; 4
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	0b c0       	rjmp	.+22     	; 0xdf4 <_Z9direction6vertexS_i+0x45c>
		//South-East-East
		else if ((dest.x - src.x) == 1 && (dest.y - src.y) == 0.5)
		{
			d = 5;
     dde:	85 e0       	ldi	r24, 0x05	; 5
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	08 c0       	rjmp	.+16     	; 0xdf4 <_Z9direction6vertexS_i+0x45c>
		}
		//South-East
		else if ((dest.x - src.x) == 1 && (dest.y - src.y) == 1)
			d = 6;
     de4:	86 e0       	ldi	r24, 0x06	; 6
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	05 c0       	rjmp	.+10     	; 0xdf4 <_Z9direction6vertexS_i+0x45c>
		//South-South-East
		else if ((dest.x - src.x) == 0.5 && (dest.y - src.y) == 1)
		{
			d = 7;
     dea:	87 e0       	ldi	r24, 0x07	; 7
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	02 c0       	rjmp	.+4      	; 0xdf4 <_Z9direction6vertexS_i+0x45c>
		else
		{
			if (dest.y > src.y)
				d = 6;
			else
				d = 2;
     df0:	82 e0       	ldi	r24, 0x02	; 2
     df2:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	return d;
}
     df4:	60 96       	adiw	r28, 0x10	; 16
     df6:	0f b6       	in	r0, 0x3f	; 63
     df8:	f8 94       	cli
     dfa:	de bf       	out	0x3e, r29	; 62
     dfc:	0f be       	out	0x3f, r0	; 63
     dfe:	cd bf       	out	0x3d, r28	; 61
     e00:	df 91       	pop	r29
     e02:	cf 91       	pop	r28
     e04:	1f 91       	pop	r17
     e06:	0f 91       	pop	r16
     e08:	ff 90       	pop	r15
     e0a:	ef 90       	pop	r14
     e0c:	df 90       	pop	r13
     e0e:	cf 90       	pop	r12
     e10:	bf 90       	pop	r11
     e12:	af 90       	pop	r10
     e14:	9f 90       	pop	r9
     e16:	8f 90       	pop	r8
     e18:	7f 90       	pop	r7
     e1a:	6f 90       	pop	r6
     e1c:	5f 90       	pop	r5
     e1e:	4f 90       	pop	r4
     e20:	08 95       	ret

00000e22 <_Z11minDistancePiS_>:
                   which is visited.>
* Example Call	: <minDistance(dist[],visited[])> *
*/

int minDistance(int dist[], int visited[])
{
     e22:	cf 93       	push	r28
     e24:	df 93       	push	r29

	for (int v = 0; v < n; v++)
	{
		if (visited[v] == 0 && dist[v] <= min)
		{
			min = dist[v];
     e26:	a6 2f       	mov	r26, r22
     e28:	b7 2f       	mov	r27, r23
     e2a:	e8 2f       	mov	r30, r24
     e2c:	f9 2f       	mov	r31, r25

int minDistance(int dist[], int visited[])
{
	int min = inf, min_index;

	for (int v = 0; v < n; v++)
     e2e:	20 e0       	ldi	r18, 0x00	; 0
     e30:	30 e0       	ldi	r19, 0x00	; 0
* Example Call	: <minDistance(dist[],visited[])> *
*/

int minDistance(int dist[], int visited[])
{
	int min = inf, min_index;
     e32:	4f e0       	ldi	r20, 0x0F	; 15
     e34:	57 e2       	ldi	r21, 0x27	; 39

	for (int v = 0; v < n; v++)
	{
		if (visited[v] == 0 && dist[v] <= min)
     e36:	8d 91       	ld	r24, X+
     e38:	9d 91       	ld	r25, X+
     e3a:	00 97       	sbiw	r24, 0x00	; 0
     e3c:	41 f4       	brne	.+16     	; 0xe4e <_Z11minDistancePiS_+0x2c>
     e3e:	80 81       	ld	r24, Z
     e40:	91 81       	ldd	r25, Z+1	; 0x01
     e42:	48 17       	cp	r20, r24
     e44:	59 07       	cpc	r21, r25
     e46:	1c f0       	brlt	.+6      	; 0xe4e <_Z11minDistancePiS_+0x2c>
     e48:	c2 2f       	mov	r28, r18
     e4a:	d3 2f       	mov	r29, r19
		{
			min = dist[v];
     e4c:	ac 01       	movw	r20, r24

int minDistance(int dist[], int visited[])
{
	int min = inf, min_index;

	for (int v = 0; v < n; v++)
     e4e:	2f 5f       	subi	r18, 0xFF	; 255
     e50:	3f 4f       	sbci	r19, 0xFF	; 255
     e52:	32 96       	adiw	r30, 0x02	; 2
     e54:	2c 31       	cpi	r18, 0x1C	; 28
     e56:	31 05       	cpc	r19, r1
     e58:	71 f7       	brne	.-36     	; 0xe36 <_Z11minDistancePiS_+0x14>
			min = dist[v];
			min_index = v;
		}
	}
	return min_index;
}
     e5a:	8c 2f       	mov	r24, r28
     e5c:	9d 2f       	mov	r25, r29
     e5e:	df 91       	pop	r29
     e60:	cf 91       	pop	r28
     e62:	08 95       	ret

00000e64 <_Z8dijkstraPA28_iiiRiPi>:
				  >
* Example Call: <dijkstra(int graph[n][n], int src, int goal, int &z, int moves[])> *
*/

void dijkstra(int graph[n][n], int src, int goal, int &z, int moves[])
{
     e64:	2f 92       	push	r2
     e66:	3f 92       	push	r3
     e68:	4f 92       	push	r4
     e6a:	5f 92       	push	r5
     e6c:	6f 92       	push	r6
     e6e:	7f 92       	push	r7
     e70:	8f 92       	push	r8
     e72:	9f 92       	push	r9
     e74:	af 92       	push	r10
     e76:	bf 92       	push	r11
     e78:	cf 92       	push	r12
     e7a:	df 92       	push	r13
     e7c:	ef 92       	push	r14
     e7e:	ff 92       	push	r15
     e80:	0f 93       	push	r16
     e82:	1f 93       	push	r17
     e84:	cf 93       	push	r28
     e86:	df 93       	push	r29
     e88:	cd b7       	in	r28, 0x3d	; 61
     e8a:	de b7       	in	r29, 0x3e	; 62
     e8c:	c4 5b       	subi	r28, 0xB4	; 180
     e8e:	d0 40       	sbci	r29, 0x00	; 0
     e90:	0f b6       	in	r0, 0x3f	; 63
     e92:	f8 94       	cli
     e94:	de bf       	out	0x3e, r29	; 62
     e96:	0f be       	out	0x3f, r0	; 63
     e98:	cd bf       	out	0x3d, r28	; 61
     e9a:	1c 01       	movw	r2, r24
     e9c:	4a 01       	movw	r8, r20
     e9e:	cf 54       	subi	r28, 0x4F	; 79
     ea0:	df 4f       	sbci	r29, 0xFF	; 255
     ea2:	39 83       	std	Y+1, r19	; 0x01
     ea4:	28 83       	st	Y, r18
     ea6:	c1 5b       	subi	r28, 0xB1	; 177
     ea8:	d0 40       	sbci	r29, 0x00	; 0
     eaa:	cd 54       	subi	r28, 0x4D	; 77
     eac:	df 4f       	sbci	r29, 0xFF	; 255
     eae:	19 83       	std	Y+1, r17	; 0x01
     eb0:	08 83       	st	Y, r16
     eb2:	c3 5b       	subi	r28, 0xB3	; 179
     eb4:	d0 40       	sbci	r29, 0x00	; 0
	int i, u, v;
	z = 1;
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	f9 01       	movw	r30, r18
     ebc:	91 83       	std	Z+1, r25	; 0x01
     ebe:	80 83       	st	Z, r24
     ec0:	ae 01       	movw	r20, r28
     ec2:	4f 5f       	subi	r20, 0xFF	; 255
     ec4:	5f 4f       	sbci	r21, 0xFF	; 255
     ec6:	8e 01       	movw	r16, r28
     ec8:	0f 58       	subi	r16, 0x8F	; 143
     eca:	1f 4f       	sbci	r17, 0xFF	; 255
                   if goal node is encountered it returns. Then path is stored in moves[] by finding parent of every node. List of nodes depicting shortest path are stored in moves[] array
				  >
* Example Call: <dijkstra(int graph[n][n], int src, int goal, int &z, int moves[])> *
*/

void dijkstra(int graph[n][n], int src, int goal, int &z, int moves[])
     ecc:	ce 01       	movw	r24, r28
     ece:	c9 96       	adiw	r24, 0x39	; 57
     ed0:	d8 01       	movw	r26, r16
     ed2:	fa 01       	movw	r30, r20
	z = 1;
	int visited[n], parent[n], dist[n];
	//initialize every node to infinity distance from each other and visited array containing zero nodes
	for (i = 0; i < n; i++)
	{
		dist[i] = inf;
     ed4:	2f e0       	ldi	r18, 0x0F	; 15
     ed6:	37 e2       	ldi	r19, 0x27	; 39
     ed8:	21 93       	st	Z+, r18
     eda:	31 93       	st	Z+, r19
		visited[i] = 0;
     edc:	1d 92       	st	X+, r1
     ede:	1d 92       	st	X+, r1
{
	int i, u, v;
	z = 1;
	int visited[n], parent[n], dist[n];
	//initialize every node to infinity distance from each other and visited array containing zero nodes
	for (i = 0; i < n; i++)
     ee0:	e8 17       	cp	r30, r24
     ee2:	f9 07       	cpc	r31, r25
     ee4:	c9 f7       	brne	.-14     	; 0xed8 <_Z8dijkstraPA28_iiiRiPi+0x74>
	{
		dist[i] = inf;
		visited[i] = 0;
	}
	//distance of source to source is zero
	dist[src] = 0;
     ee6:	fb 01       	movw	r30, r22
     ee8:	ee 0f       	add	r30, r30
     eea:	ff 1f       	adc	r31, r31
     eec:	a1 e0       	ldi	r26, 0x01	; 1
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	ac 0f       	add	r26, r28
     ef2:	bd 1f       	adc	r27, r29
     ef4:	ae 0f       	add	r26, r30
     ef6:	bf 1f       	adc	r27, r31
     ef8:	11 96       	adiw	r26, 0x01	; 1
     efa:	1c 92       	st	X, r1
     efc:	1e 92       	st	-X, r1
	visited[src] = 0;
     efe:	21 e7       	ldi	r18, 0x71	; 113
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	2c 0f       	add	r18, r28
     f04:	3d 1f       	adc	r19, r29
     f06:	e2 0f       	add	r30, r18
     f08:	f3 1f       	adc	r31, r19
     f0a:	11 82       	std	Z+1, r1	; 0x01
     f0c:	10 82       	st	Z, r1
	//parent of source is set to -1
	parent[src] = -1;
     f0e:	8f ef       	ldi	r24, 0xFF	; 255
     f10:	9f ef       	ldi	r25, 0xFF	; 255
     f12:	d9 96       	adiw	r26, 0x39	; 57
     f14:	9c 93       	st	X, r25
     f16:	8e 93       	st	-X, r24
     f18:	d8 97       	sbiw	r26, 0x38	; 56
	for (i = 0; i < n; i++)
	{
		//find node minimum distance from current node
		//u=0 for first run
		if (i == 0)
			u = src;
     f1a:	6b 01       	movw	r12, r22
	//distance of source to source is zero
	dist[src] = 0;
	visited[src] = 0;
	//parent of source is set to -1
	parent[src] = -1;
	for (i = 0; i < n; i++)
     f1c:	aa 24       	eor	r10, r10
     f1e:	bb 24       	eor	r11, r11
		//u=0 for first run
		if (i == 0)
			u = src;
		else
			u = minDistance(dist, visited);
		visited[u] = 1;
     f20:	66 24       	eor	r6, r6
     f22:	77 24       	eor	r7, r7
     f24:	63 94       	inc	r6
			return;
		}
		//if distance of the node is less than previous stored distance value than replace
		for (v = 0; v < n; v++)
		{
			if (!visited[v] && graph[u][v] && dist[u] + graph[u][v] < dist[v])
     f26:	c7 55       	subi	r28, 0x57	; 87
     f28:	df 4f       	sbci	r29, 0xFF	; 255
     f2a:	48 83       	st	Y, r20
     f2c:	c9 5a       	subi	r28, 0xA9	; 169
     f2e:	d0 40       	sbci	r29, 0x00	; 0
     f30:	c6 55       	subi	r28, 0x56	; 86
     f32:	df 4f       	sbci	r29, 0xFF	; 255
     f34:	58 83       	st	Y, r21
     f36:	ca 5a       	subi	r28, 0xAA	; 170
     f38:	d0 40       	sbci	r29, 0x00	; 0
     f3a:	c5 55       	subi	r28, 0x55	; 85
     f3c:	df 4f       	sbci	r29, 0xFF	; 255
     f3e:	08 83       	st	Y, r16
     f40:	cb 5a       	subi	r28, 0xAB	; 171
     f42:	d0 40       	sbci	r29, 0x00	; 0
     f44:	c4 55       	subi	r28, 0x54	; 84
     f46:	df 4f       	sbci	r29, 0xFF	; 255
     f48:	18 83       	st	Y, r17
     f4a:	cc 5a       	subi	r28, 0xAC	; 172
     f4c:	d0 40       	sbci	r29, 0x00	; 0
     f4e:	2e 01       	movw	r4, r28
     f50:	08 94       	sec
     f52:	41 1c       	adc	r4, r1
     f54:	51 1c       	adc	r5, r1
     f56:	c3 55       	subi	r28, 0x53	; 83
     f58:	df 4f       	sbci	r29, 0xFF	; 255
     f5a:	48 82       	st	Y, r4
     f5c:	cd 5a       	subi	r28, 0xAD	; 173
     f5e:	d0 40       	sbci	r29, 0x00	; 0
     f60:	c2 55       	subi	r28, 0x52	; 82
     f62:	df 4f       	sbci	r29, 0xFF	; 255
     f64:	58 82       	st	Y, r5
     f66:	ce 5a       	subi	r28, 0xAE	; 174
     f68:	d0 40       	sbci	r29, 0x00	; 0
	for (i = 0; i < n; i++)
	{
		//find node minimum distance from current node
		//u=0 for first run
		if (i == 0)
			u = src;
     f6a:	c1 55       	subi	r28, 0x51	; 81
     f6c:	df 4f       	sbci	r29, 0xFF	; 255
     f6e:	68 83       	st	Y, r22
     f70:	cf 5a       	subi	r28, 0xAF	; 175
     f72:	d0 40       	sbci	r29, 0x00	; 0
     f74:	c0 55       	subi	r28, 0x50	; 80
     f76:	df 4f       	sbci	r29, 0xFF	; 255
     f78:	78 83       	st	Y, r23
     f7a:	c0 5b       	subi	r28, 0xB0	; 176
     f7c:	d0 40       	sbci	r29, 0x00	; 0
     f7e:	1e c0       	rjmp	.+60     	; 0xfbc <_Z8dijkstraPA28_iiiRiPi+0x158>
	parent[src] = -1;
	for (i = 0; i < n; i++)
	{
		//find node minimum distance from current node
		//u=0 for first run
		if (i == 0)
     f80:	a1 14       	cp	r10, r1
     f82:	b1 04       	cpc	r11, r1
     f84:	89 f0       	breq	.+34     	; 0xfa8 <_Z8dijkstraPA28_iiiRiPi+0x144>
			u = src;
		else
			u = minDistance(dist, visited);
     f86:	c3 55       	subi	r28, 0x53	; 83
     f88:	df 4f       	sbci	r29, 0xFF	; 255
     f8a:	88 81       	ld	r24, Y
     f8c:	cd 5a       	subi	r28, 0xAD	; 173
     f8e:	d0 40       	sbci	r29, 0x00	; 0
     f90:	c2 55       	subi	r28, 0x52	; 82
     f92:	df 4f       	sbci	r29, 0xFF	; 255
     f94:	98 81       	ld	r25, Y
     f96:	ce 5a       	subi	r28, 0xAE	; 174
     f98:	d0 40       	sbci	r29, 0x00	; 0
     f9a:	be 01       	movw	r22, r28
     f9c:	6f 58       	subi	r22, 0x8F	; 143
     f9e:	7f 4f       	sbci	r23, 0xFF	; 255
     fa0:	0e 94 11 07 	call	0xe22	; 0xe22 <_Z11minDistancePiS_>
     fa4:	6c 01       	movw	r12, r24
     fa6:	0a c0       	rjmp	.+20     	; 0xfbc <_Z8dijkstraPA28_iiiRiPi+0x158>
	for (i = 0; i < n; i++)
	{
		//find node minimum distance from current node
		//u=0 for first run
		if (i == 0)
			u = src;
     fa8:	c1 55       	subi	r28, 0x51	; 81
     faa:	df 4f       	sbci	r29, 0xFF	; 255
     fac:	c8 80       	ld	r12, Y
     fae:	cf 5a       	subi	r28, 0xAF	; 175
     fb0:	d0 40       	sbci	r29, 0x00	; 0
     fb2:	c0 55       	subi	r28, 0x50	; 80
     fb4:	df 4f       	sbci	r29, 0xFF	; 255
     fb6:	d8 80       	ld	r13, Y
     fb8:	c0 5b       	subi	r28, 0xB0	; 176
     fba:	d0 40       	sbci	r29, 0x00	; 0
		else
			u = minDistance(dist, visited);
		visited[u] = 1;
     fbc:	c6 01       	movw	r24, r12
     fbe:	88 0f       	add	r24, r24
     fc0:	99 1f       	adc	r25, r25
     fc2:	41 e7       	ldi	r20, 0x71	; 113
     fc4:	50 e0       	ldi	r21, 0x00	; 0
     fc6:	4c 0f       	add	r20, r28
     fc8:	5d 1f       	adc	r21, r29
     fca:	84 0f       	add	r24, r20
     fcc:	95 1f       	adc	r25, r21
     fce:	fc 01       	movw	r30, r24
     fd0:	71 82       	std	Z+1, r7	; 0x01
     fd2:	60 82       	st	Z, r6
		//if goal is reached returns
		if (u == goal)
     fd4:	c8 14       	cp	r12, r8
     fd6:	d9 04       	cpc	r13, r9
     fd8:	09 f0       	breq	.+2      	; 0xfdc <_Z8dijkstraPA28_iiiRiPi+0x178>
     fda:	5f c0       	rjmp	.+190    	; 0x109a <_Z8dijkstraPA28_iiiRiPi+0x236>
		{
			//used to find path
			while (parent[u] != -1)
     fdc:	f6 01       	movw	r30, r12
     fde:	ee 0f       	add	r30, r30
     fe0:	ff 1f       	adc	r31, r31
     fe2:	ec 0f       	add	r30, r28
     fe4:	fd 1f       	adc	r31, r29
     fe6:	81 ad       	sts	0x61, r24
     fe8:	92 ad       	sts	0x62, r25
     fea:	ff ef       	ldi	r31, 0xFF	; 255
     fec:	8f 3f       	cpi	r24, 0xFF	; 255
     fee:	9f 07       	cpc	r25, r31
     ff0:	09 f1       	breq	.+66     	; 0x1034 <_Z8dijkstraPA28_iiiRiPi+0x1d0>
     ff2:	cf 54       	subi	r28, 0x4F	; 79
     ff4:	df 4f       	sbci	r29, 0xFF	; 255
     ff6:	e8 81       	ld	r30, Y
     ff8:	f9 81       	ldd	r31, Y+1	; 0x01
     ffa:	c1 5b       	subi	r28, 0xB1	; 177
     ffc:	d0 40       	sbci	r29, 0x00	; 0
     ffe:	20 81       	ld	r18, Z
    1000:	31 81       	ldd	r19, Z+1	; 0x01
			{
				u = parent[u];
				z++;
    1002:	2f 5f       	subi	r18, 0xFF	; 255
    1004:	3f 4f       	sbci	r19, 0xFF	; 255
		visited[u] = 1;
		//if goal is reached returns
		if (u == goal)
		{
			//used to find path
			while (parent[u] != -1)
    1006:	fc 01       	movw	r30, r24
    1008:	ee 0f       	add	r30, r30
    100a:	ff 1f       	adc	r31, r31
    100c:	41 e0       	ldi	r20, 0x01	; 1
    100e:	50 e0       	ldi	r21, 0x00	; 0
    1010:	4c 0f       	add	r20, r28
    1012:	5d 1f       	adc	r21, r29
    1014:	e4 0f       	add	r30, r20
    1016:	f5 1f       	adc	r31, r21
    1018:	80 ad       	sts	0x60, r24
    101a:	91 ad       	sts	0x61, r25
    101c:	5f ef       	ldi	r21, 0xFF	; 255
    101e:	8f 3f       	cpi	r24, 0xFF	; 255
    1020:	95 07       	cpc	r25, r21
    1022:	79 f7       	brne	.-34     	; 0x1002 <_Z8dijkstraPA28_iiiRiPi+0x19e>
    1024:	cf 54       	subi	r28, 0x4F	; 79
    1026:	df 4f       	sbci	r29, 0xFF	; 255
    1028:	e8 81       	ld	r30, Y
    102a:	f9 81       	ldd	r31, Y+1	; 0x01
    102c:	c1 5b       	subi	r28, 0xB1	; 177
    102e:	d0 40       	sbci	r29, 0x00	; 0
    1030:	31 83       	std	Z+1, r19	; 0x01
    1032:	20 83       	st	Z, r18
	//distance of source to source is zero
	dist[src] = 0;
	visited[src] = 0;
	//parent of source is set to -1
	parent[src] = -1;
	for (i = 0; i < n; i++)
    1034:	a4 01       	movw	r20, r8
    1036:	20 e0       	ldi	r18, 0x00	; 0
    1038:	30 e0       	ldi	r19, 0x00	; 0
			u = goal;
			//stores path in moves[]
			for (int k = 0; k < z&&u != -1; k++)
			{
				moves[z - k - 1] = u;
				u = parent[u];
    103a:	cf 54       	subi	r28, 0x4F	; 79
    103c:	df 4f       	sbci	r29, 0xFF	; 255
    103e:	a8 81       	ld	r26, Y
    1040:	b9 81       	ldd	r27, Y+1	; 0x01
    1042:	c1 5b       	subi	r28, 0xB1	; 177
    1044:	d0 40       	sbci	r29, 0x00	; 0
    1046:	cd 54       	subi	r28, 0x4D	; 77
    1048:	df 4f       	sbci	r29, 0xFF	; 255
    104a:	68 81       	ld	r22, Y
    104c:	79 81       	ldd	r23, Y+1	; 0x01
    104e:	c3 5b       	subi	r28, 0xB3	; 179
    1050:	d0 40       	sbci	r29, 0x00	; 0
				u = parent[u];
				z++;
			}
			u = goal;
			//stores path in moves[]
			for (int k = 0; k < z&&u != -1; k++)
    1052:	8d 91       	ld	r24, X+
    1054:	9c 91       	ld	r25, X
    1056:	11 97       	sbiw	r26, 0x01	; 1
    1058:	28 17       	cp	r18, r24
    105a:	39 07       	cpc	r19, r25
    105c:	0c f0       	brlt	.+2      	; 0x1060 <_Z8dijkstraPA28_iiiRiPi+0x1fc>
    105e:	7e c0       	rjmp	.+252    	; 0x115c <_Z8dijkstraPA28_iiiRiPi+0x2f8>
    1060:	ff ef       	ldi	r31, 0xFF	; 255
    1062:	4f 3f       	cpi	r20, 0xFF	; 255
    1064:	5f 07       	cpc	r21, r31
    1066:	09 f4       	brne	.+2      	; 0x106a <_Z8dijkstraPA28_iiiRiPi+0x206>
    1068:	79 c0       	rjmp	.+242    	; 0x115c <_Z8dijkstraPA28_iiiRiPi+0x2f8>
			{
				moves[z - k - 1] = u;
    106a:	82 1b       	sub	r24, r18
    106c:	93 0b       	sbc	r25, r19
    106e:	01 97       	sbiw	r24, 0x01	; 1
    1070:	fc 01       	movw	r30, r24
    1072:	ee 0f       	add	r30, r30
    1074:	ff 1f       	adc	r31, r31
    1076:	e6 0f       	add	r30, r22
    1078:	f7 1f       	adc	r31, r23
    107a:	51 83       	std	Z+1, r21	; 0x01
    107c:	40 83       	st	Z, r20
				u = parent[u];
    107e:	fa 01       	movw	r30, r20
    1080:	ee 0f       	add	r30, r30
    1082:	ff 1f       	adc	r31, r31
    1084:	41 e0       	ldi	r20, 0x01	; 1
    1086:	50 e0       	ldi	r21, 0x00	; 0
    1088:	4c 0f       	add	r20, r28
    108a:	5d 1f       	adc	r21, r29
    108c:	e4 0f       	add	r30, r20
    108e:	f5 1f       	adc	r31, r21
    1090:	40 ad       	sts	0x60, r20
    1092:	51 ad       	sts	0x61, r21
				u = parent[u];
				z++;
			}
			u = goal;
			//stores path in moves[]
			for (int k = 0; k < z&&u != -1; k++)
    1094:	2f 5f       	subi	r18, 0xFF	; 255
    1096:	3f 4f       	sbci	r19, 0xFF	; 255
    1098:	dc cf       	rjmp	.-72     	; 0x1052 <_Z8dijkstraPA28_iiiRiPi+0x1ee>
			return;
		}
		//if distance of the node is less than previous stored distance value than replace
		for (v = 0; v < n; v++)
		{
			if (!visited[v] && graph[u][v] && dist[u] + graph[u][v] < dist[v])
    109a:	c6 01       	movw	r24, r12
    109c:	88 0f       	add	r24, r24
    109e:	99 1f       	adc	r25, r25
    10a0:	88 0f       	add	r24, r24
    10a2:	99 1f       	adc	r25, r25
    10a4:	88 0f       	add	r24, r24
    10a6:	99 1f       	adc	r25, r25
    10a8:	9c 01       	movw	r18, r24
    10aa:	22 0f       	add	r18, r18
    10ac:	33 1f       	adc	r19, r19
    10ae:	22 0f       	add	r18, r18
    10b0:	33 1f       	adc	r19, r19
    10b2:	22 0f       	add	r18, r18
    10b4:	33 1f       	adc	r19, r19
    10b6:	f9 01       	movw	r30, r18
    10b8:	e8 1b       	sub	r30, r24
    10ba:	f9 0b       	sbc	r31, r25
    10bc:	81 01       	movw	r16, r2
    10be:	0e 0f       	add	r16, r30
    10c0:	1f 1f       	adc	r17, r31
    10c2:	c7 55       	subi	r28, 0x57	; 87
    10c4:	df 4f       	sbci	r29, 0xFF	; 255
    10c6:	a8 81       	ld	r26, Y
    10c8:	c9 5a       	subi	r28, 0xA9	; 169
    10ca:	d0 40       	sbci	r29, 0x00	; 0
    10cc:	c6 55       	subi	r28, 0x56	; 86
    10ce:	df 4f       	sbci	r29, 0xFF	; 255
    10d0:	b8 81       	ld	r27, Y
    10d2:	ca 5a       	subi	r28, 0xAA	; 170
    10d4:	d0 40       	sbci	r29, 0x00	; 0
    10d6:	c5 55       	subi	r28, 0x55	; 85
    10d8:	df 4f       	sbci	r29, 0xFF	; 255
    10da:	68 81       	ld	r22, Y
    10dc:	cb 5a       	subi	r28, 0xAB	; 171
    10de:	d0 40       	sbci	r29, 0x00	; 0
    10e0:	c4 55       	subi	r28, 0x54	; 84
    10e2:	df 4f       	sbci	r29, 0xFF	; 255
    10e4:	78 81       	ld	r23, Y
    10e6:	cc 5a       	subi	r28, 0xAC	; 172
    10e8:	d0 40       	sbci	r29, 0x00	; 0
    10ea:	40 e0       	ldi	r20, 0x00	; 0
    10ec:	50 e0       	ldi	r21, 0x00	; 0
    10ee:	c6 01       	movw	r24, r12
    10f0:	88 0f       	add	r24, r24
    10f2:	99 1f       	adc	r25, r25
    10f4:	72 01       	movw	r14, r4
    10f6:	e8 0e       	add	r14, r24
    10f8:	f9 1e       	adc	r15, r25
    10fa:	fb 01       	movw	r30, r22
    10fc:	81 91       	ld	r24, Z+
    10fe:	91 91       	ld	r25, Z+
    1100:	bf 01       	movw	r22, r30
    1102:	00 97       	sbiw	r24, 0x00	; 0
    1104:	e9 f4       	brne	.+58     	; 0x1140 <_Z8dijkstraPA28_iiiRiPi+0x2dc>
                   if goal node is encountered it returns. Then path is stored in moves[] by finding parent of every node. List of nodes depicting shortest path are stored in moves[] array
				  >
* Example Call: <dijkstra(int graph[n][n], int src, int goal, int &z, int moves[])> *
*/

void dijkstra(int graph[n][n], int src, int goal, int &z, int moves[])
    1106:	f8 01       	movw	r30, r16
    1108:	e4 0f       	add	r30, r20
    110a:	f5 1f       	adc	r31, r21
			return;
		}
		//if distance of the node is less than previous stored distance value than replace
		for (v = 0; v < n; v++)
		{
			if (!visited[v] && graph[u][v] && dist[u] + graph[u][v] < dist[v])
    110c:	80 81       	ld	r24, Z
    110e:	91 81       	ldd	r25, Z+1	; 0x01
    1110:	00 97       	sbiw	r24, 0x00	; 0
    1112:	b1 f0       	breq	.+44     	; 0x1140 <_Z8dijkstraPA28_iiiRiPi+0x2dc>
    1114:	f7 01       	movw	r30, r14
    1116:	20 81       	ld	r18, Z
    1118:	31 81       	ldd	r19, Z+1	; 0x01
    111a:	28 0f       	add	r18, r24
    111c:	39 1f       	adc	r19, r25
    111e:	8d 91       	ld	r24, X+
    1120:	9c 91       	ld	r25, X
    1122:	11 97       	sbiw	r26, 0x01	; 1
    1124:	28 17       	cp	r18, r24
    1126:	39 07       	cpc	r19, r25
    1128:	5c f4       	brge	.+22     	; 0x1140 <_Z8dijkstraPA28_iiiRiPi+0x2dc>
                   if goal node is encountered it returns. Then path is stored in moves[] by finding parent of every node. List of nodes depicting shortest path are stored in moves[] array
				  >
* Example Call: <dijkstra(int graph[n][n], int src, int goal, int &z, int moves[])> *
*/

void dijkstra(int graph[n][n], int src, int goal, int &z, int moves[])
    112a:	e9 e3       	ldi	r30, 0x39	; 57
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	ec 0f       	add	r30, r28
    1130:	fd 1f       	adc	r31, r29
    1132:	e4 0f       	add	r30, r20
    1134:	f5 1f       	adc	r31, r21
		for (v = 0; v < n; v++)
		{
			if (!visited[v] && graph[u][v] && dist[u] + graph[u][v] < dist[v])
			{

				parent[v] = u;
    1136:	d1 82       	std	Z+1, r13	; 0x01
    1138:	c0 82       	st	Z, r12
				dist[v] = dist[u] + graph[u][v];
    113a:	11 96       	adiw	r26, 0x01	; 1
    113c:	3c 93       	st	X, r19
    113e:	2e 93       	st	-X, r18
    1140:	4e 5f       	subi	r20, 0xFE	; 254
    1142:	5f 4f       	sbci	r21, 0xFF	; 255
    1144:	12 96       	adiw	r26, 0x02	; 2
				u = parent[u];
			}
			return;
		}
		//if distance of the node is less than previous stored distance value than replace
		for (v = 0; v < n; v++)
    1146:	48 33       	cpi	r20, 0x38	; 56
    1148:	51 05       	cpc	r21, r1
    114a:	b9 f6       	brne	.-82     	; 0x10fa <_Z8dijkstraPA28_iiiRiPi+0x296>
	//distance of source to source is zero
	dist[src] = 0;
	visited[src] = 0;
	//parent of source is set to -1
	parent[src] = -1;
	for (i = 0; i < n; i++)
    114c:	08 94       	sec
    114e:	a1 1c       	adc	r10, r1
    1150:	b1 1c       	adc	r11, r1
    1152:	fc e1       	ldi	r31, 0x1C	; 28
    1154:	af 16       	cp	r10, r31
    1156:	b1 04       	cpc	r11, r1
    1158:	09 f0       	breq	.+2      	; 0x115c <_Z8dijkstraPA28_iiiRiPi+0x2f8>
    115a:	12 cf       	rjmp	.-476    	; 0xf80 <_Z8dijkstraPA28_iiiRiPi+0x11c>
			}
		}

	}

}
    115c:	cc 54       	subi	r28, 0x4C	; 76
    115e:	df 4f       	sbci	r29, 0xFF	; 255
    1160:	0f b6       	in	r0, 0x3f	; 63
    1162:	f8 94       	cli
    1164:	de bf       	out	0x3e, r29	; 62
    1166:	0f be       	out	0x3f, r0	; 63
    1168:	cd bf       	out	0x3d, r28	; 61
    116a:	df 91       	pop	r29
    116c:	cf 91       	pop	r28
    116e:	1f 91       	pop	r17
    1170:	0f 91       	pop	r16
    1172:	ff 90       	pop	r15
    1174:	ef 90       	pop	r14
    1176:	df 90       	pop	r13
    1178:	cf 90       	pop	r12
    117a:	bf 90       	pop	r11
    117c:	af 90       	pop	r10
    117e:	9f 90       	pop	r9
    1180:	8f 90       	pop	r8
    1182:	7f 90       	pop	r7
    1184:	6f 90       	pop	r6
    1186:	5f 90       	pop	r5
    1188:	4f 90       	pop	r4
    118a:	3f 90       	pop	r3
    118c:	2f 90       	pop	r2
    118e:	08 95       	ret

00001190 <_Z13left_turn_wlsv>:
*
*/
void left_turn_wls(void)
{
	unsigned char center_sensor;
	left();
    1190:	0e 94 60 04 	call	0x8c0	; 0x8c0 <_Z4leftv>
	velocity(v_left, v_right);
    1194:	80 91 28 09 	lds	r24, 0x0928
    1198:	60 91 26 09 	lds	r22, 0x0926
    119c:	0e 94 4a 04 	call	0x894	; 0x894 <_Z8velocityhh>
    11a0:	8f ef       	ldi	r24, 0xFF	; 255
    11a2:	99 e6       	ldi	r25, 0x69	; 105
    11a4:	a8 e1       	ldi	r26, 0x18	; 24
    11a6:	81 50       	subi	r24, 0x01	; 1
    11a8:	90 40       	sbci	r25, 0x00	; 0
    11aa:	a0 40       	sbci	r26, 0x00	; 0
    11ac:	e1 f7       	brne	.-8      	; 0x11a6 <_Z13left_turn_wlsv+0x16>
    11ae:	00 c0       	rjmp	.+0      	; 0x11b0 <_Z13left_turn_wlsv+0x20>
    11b0:	00 00       	nop
	//turn away from current direction slightly
	_delay_ms(500);
	while (1)
	{		
		//checks if middle sensor comes on black line
		if ((ADC_Conversion(2) >threshold)&&ADC_Conversion(1)<threshold&&ADC_Conversion(3)<threshold)
    11b2:	82 e0       	ldi	r24, 0x02	; 2
    11b4:	0e 94 1b 04 	call	0x836	; 0x836 <_Z14ADC_Conversionh>
    11b8:	90 91 2a 09 	lds	r25, 0x092A
    11bc:	98 17       	cp	r25, r24
    11be:	c8 f7       	brcc	.-14     	; 0x11b2 <_Z13left_turn_wlsv+0x22>
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	0e 94 1b 04 	call	0x836	; 0x836 <_Z14ADC_Conversionh>
    11c6:	90 91 2a 09 	lds	r25, 0x092A
    11ca:	89 17       	cp	r24, r25
    11cc:	90 f7       	brcc	.-28     	; 0x11b2 <_Z13left_turn_wlsv+0x22>
    11ce:	83 e0       	ldi	r24, 0x03	; 3
    11d0:	0e 94 1b 04 	call	0x836	; 0x836 <_Z14ADC_Conversionh>
    11d4:	90 91 2a 09 	lds	r25, 0x092A
    11d8:	89 17       	cp	r24, r25
    11da:	58 f7       	brcc	.-42     	; 0x11b2 <_Z13left_turn_wlsv+0x22>
			break;
	}
	stop();
    11dc:	0e 94 64 04 	call	0x8c8	; 0x8c8 <_Z4stopv>
}
    11e0:	08 95       	ret

000011e2 <_Z14right_turn_wlsv>:
* Example Call	: right_turn_wls(); //Turns right until black line is encountered
*/
void right_turn_wls(void)
{
	
	right();
    11e2:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <_Z5rightv>
	velocity(v_left, v_right);
    11e6:	80 91 28 09 	lds	r24, 0x0928
    11ea:	60 91 26 09 	lds	r22, 0x0926
    11ee:	0e 94 4a 04 	call	0x894	; 0x894 <_Z8velocityhh>
    11f2:	8f ef       	ldi	r24, 0xFF	; 255
    11f4:	9f e0       	ldi	r25, 0x0F	; 15
    11f6:	a7 e2       	ldi	r26, 0x27	; 39
    11f8:	81 50       	subi	r24, 0x01	; 1
    11fa:	90 40       	sbci	r25, 0x00	; 0
    11fc:	a0 40       	sbci	r26, 0x00	; 0
    11fe:	e1 f7       	brne	.-8      	; 0x11f8 <_Z14right_turn_wlsv+0x16>
    1200:	00 c0       	rjmp	.+0      	; 0x1202 <_Z14right_turn_wlsv+0x20>
    1202:	00 00       	nop
	//turn away from current direction slightly
	_delay_ms(800);
	while (1)
	{
		//checks if middle sensor comes on black line
		if ((ADC_Conversion(2) >threshold)&&ADC_Conversion(1)<threshold&&ADC_Conversion(3)<threshold)
    1204:	82 e0       	ldi	r24, 0x02	; 2
    1206:	0e 94 1b 04 	call	0x836	; 0x836 <_Z14ADC_Conversionh>
    120a:	90 91 2a 09 	lds	r25, 0x092A
    120e:	98 17       	cp	r25, r24
    1210:	c8 f7       	brcc	.-14     	; 0x1204 <_Z14right_turn_wlsv+0x22>
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	0e 94 1b 04 	call	0x836	; 0x836 <_Z14ADC_Conversionh>
    1218:	90 91 2a 09 	lds	r25, 0x092A
    121c:	89 17       	cp	r24, r25
    121e:	90 f7       	brcc	.-28     	; 0x1204 <_Z14right_turn_wlsv+0x22>
    1220:	83 e0       	ldi	r24, 0x03	; 3
    1222:	0e 94 1b 04 	call	0x836	; 0x836 <_Z14ADC_Conversionh>
    1226:	90 91 2a 09 	lds	r25, 0x092A
    122a:	89 17       	cp	r24, r25
    122c:	58 f7       	brcc	.-42     	; 0x1204 <_Z14right_turn_wlsv+0x22>
		{
			break;
		}		
	}
	stop();
    122e:	0e 94 64 04 	call	0x8c8	; 0x8c8 <_Z4stopv>
}
    1232:	08 95       	ret

00001234 <_Z9make_turnii>:
                       now 4<8 this results in right turn>
* Example Call		: <make_turn(0,4)> *
*/
void make_turn(int cd, int dd)
{
	dd =( dd - cd);
    1234:	68 1b       	sub	r22, r24
    1236:	79 0b       	sbc	r23, r25
	if(dd<0)
    1238:	12 f4       	brpl	.+4      	; 0x123e <_Z9make_turnii+0xa>
	{
		dd = dd + 16;
    123a:	60 5f       	subi	r22, 0xF0	; 240
    123c:	7f 4f       	sbci	r23, 0xFF	; 255
	}
	cd = 0;
	if(dd==0)
    123e:	61 15       	cp	r22, r1
    1240:	71 05       	cpc	r23, r1
    1242:	39 f1       	breq	.+78     	; 0x1292 <_Z9make_turnii+0x5e>
	{
		return;
	}
	if (dd > 8)
    1244:	69 30       	cpi	r22, 0x09	; 9
    1246:	71 05       	cpc	r23, r1
    1248:	1c f0       	brlt	.+6      	; 0x1250 <_Z9make_turnii+0x1c>
	{
		left_turn_wls();
    124a:	0e 94 c8 08 	call	0x1190	; 0x1190 <_Z13left_turn_wlsv>
    124e:	08 95       	ret
	}
	else if (dd < 8)
    1250:	68 30       	cpi	r22, 0x08	; 8
    1252:	71 05       	cpc	r23, r1
    1254:	1c f4       	brge	.+6      	; 0x125c <_Z9make_turnii+0x28>
	{
		right_turn_wls();
    1256:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <_Z14right_turn_wlsv>
    125a:	08 95       	ret
	}
	else
	{
		velocity(v_left+60,v_right+60);
    125c:	80 91 28 09 	lds	r24, 0x0928
    1260:	60 91 26 09 	lds	r22, 0x0926
    1264:	64 5c       	subi	r22, 0xC4	; 196
    1266:	84 5c       	subi	r24, 0xC4	; 196
    1268:	0e 94 4a 04 	call	0x894	; 0x894 <_Z8velocityhh>
		right();
    126c:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <_Z5rightv>
    1270:	8f ef       	ldi	r24, 0xFF	; 255
    1272:	96 e4       	ldi	r25, 0x46	; 70
    1274:	a6 e8       	ldi	r26, 0x86	; 134
    1276:	81 50       	subi	r24, 0x01	; 1
    1278:	90 40       	sbci	r25, 0x00	; 0
    127a:	a0 40       	sbci	r26, 0x00	; 0
    127c:	e1 f7       	brne	.-8      	; 0x1276 <_Z9make_turnii+0x42>
    127e:	00 c0       	rjmp	.+0      	; 0x1280 <_Z9make_turnii+0x4c>
    1280:	00 00       	nop
		_delay_ms(2750);
		stop();
    1282:	0e 94 64 04 	call	0x8c8	; 0x8c8 <_Z4stopv>
		velocity(v_left,v_right);
    1286:	80 91 28 09 	lds	r24, 0x0928
    128a:	60 91 26 09 	lds	r22, 0x0926
    128e:	0e 94 4a 04 	call	0x894	; 0x894 <_Z8velocityhh>
    1292:	08 95       	ret

00001294 <_Z11forward_wlsh>:
* Example Call		: <forward_wls(1)>
*/

	
void forward_wls(unsigned char node)
{
    1294:	8f 92       	push	r8
    1296:	9f 92       	push	r9
    1298:	af 92       	push	r10
    129a:	bf 92       	push	r11
    129c:	cf 92       	push	r12
    129e:	df 92       	push	r13
    12a0:	ef 92       	push	r14
    12a2:	ff 92       	push	r15
    12a4:	0f 93       	push	r16
    12a6:	1f 93       	push	r17
    12a8:	cf 93       	push	r28
    12aa:	df 93       	push	r29
    12ac:	08 2f       	mov	r16, r24
	flag=0;
    12ae:	10 92 4a 09 	sts	0x094A, r1
    12b2:	10 92 49 09 	sts	0x0949, r1
	unsigned char left_sensor=ADC_Conversion(1), center_sensor=ADC_Conversion(2), right_sensor=ADC_Conversion(3);
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	0e 94 1b 04 	call	0x836	; 0x836 <_Z14ADC_Conversionh>
    12bc:	c8 2f       	mov	r28, r24
    12be:	82 e0       	ldi	r24, 0x02	; 2
    12c0:	0e 94 1b 04 	call	0x836	; 0x836 <_Z14ADC_Conversionh>
    12c4:	d8 2f       	mov	r29, r24
    12c6:	83 e0       	ldi	r24, 0x03	; 3
    12c8:	0e 94 1b 04 	call	0x836	; 0x836 <_Z14ADC_Conversionh>
    12cc:	18 2f       	mov	r17, r24
	
	print_sensor(2,1,1);
    12ce:	82 e0       	ldi	r24, 0x02	; 2
    12d0:	61 e0       	ldi	r22, 0x01	; 1
    12d2:	41 e0       	ldi	r20, 0x01	; 1
    12d4:	0e 94 36 04 	call	0x86c	; 0x86c <_Z12print_sensorcch>
	print_sensor(2,5,2);
    12d8:	82 e0       	ldi	r24, 0x02	; 2
    12da:	65 e0       	ldi	r22, 0x05	; 5
    12dc:	42 e0       	ldi	r20, 0x02	; 2
    12de:	0e 94 36 04 	call	0x86c	; 0x86c <_Z12print_sensorcch>
	print_sensor(2,9,3);
    12e2:	82 e0       	ldi	r24, 0x02	; 2
    12e4:	69 e0       	ldi	r22, 0x09	; 9
    12e6:	43 e0       	ldi	r20, 0x03	; 3
    12e8:	0e 94 36 04 	call	0x86c	; 0x86c <_Z12print_sensorcch>
	if(ADC_Conversion(FRONT_IR_ADC_CHANNEL)>close)
    12ec:	84 e0       	ldi	r24, 0x04	; 4
    12ee:	0e 94 1b 04 	call	0x836	; 0x836 <_Z14ADC_Conversionh>
    12f2:	90 91 21 09 	lds	r25, 0x0921
    12f6:	98 17       	cp	r25, r24
    12f8:	48 f4       	brcc	.+18     	; 0x130c <_Z11forward_wlsh+0x78>
	{
		wall=1;
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	90 93 4c 09 	sts	0x094C, r25
    1302:	80 93 4b 09 	sts	0x094B, r24
		stop();
    1306:	0e 94 64 04 	call	0x8c8	; 0x8c8 <_Z4stopv>
		return;
    130a:	f1 c0       	rjmp	.+482    	; 0x14ee <_Z11forward_wlsh+0x25a>
	}
	//runs upto given node value
	if (left_sensor >threshold && center_sensor >threshold && right_sensor> threshold)
    130c:	80 91 2a 09 	lds	r24, 0x092A
    1310:	8c 17       	cp	r24, r28
    1312:	88 f4       	brcc	.+34     	; 0x1336 <_Z11forward_wlsh+0xa2>
    1314:	8d 17       	cp	r24, r29
    1316:	78 f4       	brcc	.+30     	; 0x1336 <_Z11forward_wlsh+0xa2>
    1318:	81 17       	cp	r24, r17
    131a:	68 f4       	brcc	.+26     	; 0x1336 <_Z11forward_wlsh+0xa2>
	{
		forward();
    131c:	0e 94 54 04 	call	0x8a8	; 0x8a8 <_Z7forwardv>
    1320:	8f ef       	ldi	r24, 0xFF	; 255
    1322:	96 e1       	ldi	r25, 0x16	; 22
    1324:	a1 e1       	ldi	r26, 0x11	; 17
    1326:	81 50       	subi	r24, 0x01	; 1
    1328:	90 40       	sbci	r25, 0x00	; 0
    132a:	a0 40       	sbci	r26, 0x00	; 0
    132c:	e1 f7       	brne	.-8      	; 0x1326 <_Z11forward_wlsh+0x92>
    132e:	00 c0       	rjmp	.+0      	; 0x1330 <_Z11forward_wlsh+0x9c>
    1330:	00 00       	nop

		_delay_ms(350);
		stop();
    1332:	0e 94 64 04 	call	0x8c8	; 0x8c8 <_Z4stopv>
	}
	forward();
    1336:	0e 94 54 04 	call	0x8a8	; 0x8a8 <_Z7forwardv>
	velocity(v_left,v_right);
    133a:	80 91 28 09 	lds	r24, 0x0928
    133e:	60 91 26 09 	lds	r22, 0x0926
    1342:	0e 94 4a 04 	call	0x894	; 0x894 <_Z8velocityhh>
	while (node)
    1346:	00 23       	and	r16, r16
    1348:	09 f4       	brne	.+2      	; 0x134c <_Z11forward_wlsh+0xb8>
    134a:	d1 c0       	rjmp	.+418    	; 0x14ee <_Z11forward_wlsh+0x25a>
						velocity(0,v_right);
						
					}					
					else if(flag==3)
					{
						velocity(v_left,0);
    134c:	0f 2e       	mov	r0, r31
    134e:	f8 e2       	ldi	r31, 0x28	; 40
    1350:	af 2e       	mov	r10, r31
    1352:	f9 e0       	ldi	r31, 0x09	; 9
    1354:	bf 2e       	mov	r11, r31
    1356:	f0 2d       	mov	r31, r0
				}
				else
				{
					if(flag==1)
					{
						velocity(0,v_right);
    1358:	0f 2e       	mov	r0, r31
    135a:	f6 e2       	ldi	r31, 0x26	; 38
    135c:	cf 2e       	mov	r12, r31
    135e:	f9 e0       	ldi	r31, 0x09	; 9
    1360:	df 2e       	mov	r13, r31
    1362:	f0 2d       	mov	r31, r0
					velocity(0,v_right);
					
				}
				else if(right_sensor>threshold)
				{
					flag=3;
    1364:	0f 2e       	mov	r0, r31
    1366:	f3 e0       	ldi	r31, 0x03	; 3
    1368:	ef 2e       	mov	r14, r31
    136a:	ff 24       	eor	r15, r15
    136c:	f0 2d       	mov	r31, r0
			else
			{
				
				if(left_sensor>threshold)
				{
					flag=1;
    136e:	88 24       	eor	r8, r8
    1370:	99 24       	eor	r9, r9
    1372:	83 94       	inc	r8
	}
	forward();
	velocity(v_left,v_right);
	while (node)
	{
			left_sensor = ADC_Conversion(1);
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	0e 94 1b 04 	call	0x836	; 0x836 <_Z14ADC_Conversionh>
    137a:	c8 2f       	mov	r28, r24
			center_sensor = ADC_Conversion(2);
    137c:	82 e0       	ldi	r24, 0x02	; 2
    137e:	0e 94 1b 04 	call	0x836	; 0x836 <_Z14ADC_Conversionh>
    1382:	d8 2f       	mov	r29, r24
			right_sensor = ADC_Conversion(3);
    1384:	83 e0       	ldi	r24, 0x03	; 3
    1386:	0e 94 1b 04 	call	0x836	; 0x836 <_Z14ADC_Conversionh>
    138a:	18 2f       	mov	r17, r24
			
			if(ADC_Conversion(FRONT_IR_ADC_CHANNEL)>close)
    138c:	84 e0       	ldi	r24, 0x04	; 4
    138e:	0e 94 1b 04 	call	0x836	; 0x836 <_Z14ADC_Conversionh>
    1392:	90 91 21 09 	lds	r25, 0x0921
    1396:	98 17       	cp	r25, r24
    1398:	78 f4       	brcc	.+30     	; 0x13b8 <_Z11forward_wlsh+0x124>
			{
				wall=1;
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	90 93 4c 09 	sts	0x094C, r25
    13a2:	80 93 4b 09 	sts	0x094B, r24
				stop();
    13a6:	0e 94 64 04 	call	0x8c8	; 0x8c8 <_Z4stopv>
				lcd_init();
    13aa:	0e 94 08 01 	call	0x210	; 0x210 <_Z8lcd_initv>
				lcd_string("OBSTACLE");
    13ae:	80 e0       	ldi	r24, 0x00	; 0
    13b0:	92 e0       	ldi	r25, 0x02	; 2
    13b2:	0e 94 49 01 	call	0x292	; 0x292 <_Z10lcd_stringPc>
				return;
    13b6:	9b c0       	rjmp	.+310    	; 0x14ee <_Z11forward_wlsh+0x25a>
			}
			if(center_sensor>threshold)
    13b8:	80 91 2a 09 	lds	r24, 0x092A
    13bc:	8d 17       	cp	r24, r29
    13be:	08 f0       	brcs	.+2      	; 0x13c2 <_Z11forward_wlsh+0x12e>
    13c0:	66 c0       	rjmp	.+204    	; 0x148e <_Z11forward_wlsh+0x1fa>
			{
				forward();
    13c2:	0e 94 54 04 	call	0x8a8	; 0x8a8 <_Z7forwardv>
				if(left_sensor<threshold&&right_sensor<threshold)
    13c6:	80 91 2a 09 	lds	r24, 0x092A
    13ca:	c8 17       	cp	r28, r24
    13cc:	48 f4       	brcc	.+18     	; 0x13e0 <_Z11forward_wlsh+0x14c>
    13ce:	18 17       	cp	r17, r24
    13d0:	38 f4       	brcc	.+14     	; 0x13e0 <_Z11forward_wlsh+0x14c>
				{
					velocity(v_left,v_right);
    13d2:	d5 01       	movw	r26, r10
    13d4:	8c 91       	ld	r24, X
    13d6:	f6 01       	movw	r30, r12
    13d8:	60 81       	ld	r22, Z
    13da:	0e 94 4a 04 	call	0x894	; 0x894 <_Z8velocityhh>
    13de:	84 c0       	rjmp	.+264    	; 0x14e8 <_Z11forward_wlsh+0x254>
				}
				else if(left_sensor>threshold&&right_sensor<threshold)
    13e0:	8c 17       	cp	r24, r28
    13e2:	58 f4       	brcc	.+22     	; 0x13fa <_Z11forward_wlsh+0x166>
    13e4:	18 17       	cp	r17, r24
    13e6:	48 f4       	brcc	.+18     	; 0x13fa <_Z11forward_wlsh+0x166>
				{
					velocity(v_left-40,v_right+40);
    13e8:	d5 01       	movw	r26, r10
    13ea:	8c 91       	ld	r24, X
    13ec:	f6 01       	movw	r30, r12
    13ee:	60 81       	ld	r22, Z
    13f0:	68 5d       	subi	r22, 0xD8	; 216
    13f2:	88 52       	subi	r24, 0x28	; 40
    13f4:	0e 94 4a 04 	call	0x894	; 0x894 <_Z8velocityhh>
    13f8:	77 c0       	rjmp	.+238    	; 0x14e8 <_Z11forward_wlsh+0x254>
				}
				else if(right_sensor>threshold&&left_sensor<threshold)
    13fa:	81 17       	cp	r24, r17
    13fc:	58 f4       	brcc	.+22     	; 0x1414 <_Z11forward_wlsh+0x180>
    13fe:	c8 17       	cp	r28, r24
    1400:	48 f4       	brcc	.+18     	; 0x1414 <_Z11forward_wlsh+0x180>
				{
					velocity(v_left+40,v_right-40);
    1402:	d5 01       	movw	r26, r10
    1404:	8c 91       	ld	r24, X
    1406:	f6 01       	movw	r30, r12
    1408:	60 81       	ld	r22, Z
    140a:	68 52       	subi	r22, 0x28	; 40
    140c:	88 5d       	subi	r24, 0xD8	; 216
    140e:	0e 94 4a 04 	call	0x894	; 0x894 <_Z8velocityhh>
    1412:	6a c0       	rjmp	.+212    	; 0x14e8 <_Z11forward_wlsh+0x254>
				}
				else
				{
					lcd_print(1,1,left_sensor,3);
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	61 e0       	ldi	r22, 0x01	; 1
    1418:	4c 2f       	mov	r20, r28
    141a:	50 e0       	ldi	r21, 0x00	; 0
    141c:	97 01       	movw	r18, r14
    141e:	0e 94 78 01 	call	0x2f0	; 0x2f0 <_Z9lcd_printccji>
					lcd_print(1,5,center_sensor,3);
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	65 e0       	ldi	r22, 0x05	; 5
    1426:	4d 2f       	mov	r20, r29
    1428:	50 e0       	ldi	r21, 0x00	; 0
    142a:	97 01       	movw	r18, r14
    142c:	0e 94 78 01 	call	0x2f0	; 0x2f0 <_Z9lcd_printccji>
					lcd_print(1,9,right_sensor,3);
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	69 e0       	ldi	r22, 0x09	; 9
    1434:	41 2f       	mov	r20, r17
    1436:	50 e0       	ldi	r21, 0x00	; 0
    1438:	97 01       	movw	r18, r14
    143a:	0e 94 78 01 	call	0x2f0	; 0x2f0 <_Z9lcd_printccji>
					node--;
    143e:	01 50       	subi	r16, 0x01	; 1
					stop();
    1440:	0e 94 64 04 	call	0x8c8	; 0x8c8 <_Z4stopv>
					velocity(v_left,v_right);
    1444:	d5 01       	movw	r26, r10
    1446:	8c 91       	ld	r24, X
    1448:	f6 01       	movw	r30, r12
    144a:	60 81       	ld	r22, Z
    144c:	0e 94 4a 04 	call	0x894	; 0x894 <_Z8velocityhh>
					forward();
    1450:	0e 94 54 04 	call	0x8a8	; 0x8a8 <_Z7forwardv>
					if(z==1)
    1454:	80 91 47 09 	lds	r24, 0x0947
    1458:	90 91 48 09 	lds	r25, 0x0948
    145c:	81 30       	cpi	r24, 0x01	; 1
    145e:	91 05       	cpc	r25, r1
    1460:	51 f4       	brne	.+20     	; 0x1476 <_Z11forward_wlsh+0x1e2>
    1462:	8f ef       	ldi	r24, 0xFF	; 255
    1464:	9f e0       	ldi	r25, 0x0F	; 15
    1466:	a7 e2       	ldi	r26, 0x27	; 39
    1468:	81 50       	subi	r24, 0x01	; 1
    146a:	90 40       	sbci	r25, 0x00	; 0
    146c:	a0 40       	sbci	r26, 0x00	; 0
    146e:	e1 f7       	brne	.-8      	; 0x1468 <_Z11forward_wlsh+0x1d4>
    1470:	00 c0       	rjmp	.+0      	; 0x1472 <_Z11forward_wlsh+0x1de>
    1472:	00 00       	nop
    1474:	09 c0       	rjmp	.+18     	; 0x1488 <_Z11forward_wlsh+0x1f4>
    1476:	8f ef       	ldi	r24, 0xFF	; 255
    1478:	95 eb       	ldi	r25, 0xB5	; 181
    147a:	a5 e3       	ldi	r26, 0x35	; 53
    147c:	81 50       	subi	r24, 0x01	; 1
    147e:	90 40       	sbci	r25, 0x00	; 0
    1480:	a0 40       	sbci	r26, 0x00	; 0
    1482:	e1 f7       	brne	.-8      	; 0x147c <_Z11forward_wlsh+0x1e8>
    1484:	00 c0       	rjmp	.+0      	; 0x1486 <_Z11forward_wlsh+0x1f2>
    1486:	00 00       	nop
					_delay_ms(800);
					else 
					_delay_ms(1100);
					stop();
    1488:	0e 94 64 04 	call	0x8c8	; 0x8c8 <_Z4stopv>
					continue;
    148c:	2d c0       	rjmp	.+90     	; 0x14e8 <_Z11forward_wlsh+0x254>
				}
			}
			else
			{
				
				if(left_sensor>threshold)
    148e:	8c 17       	cp	r24, r28
    1490:	50 f4       	brcc	.+20     	; 0x14a6 <_Z11forward_wlsh+0x212>
				{
					flag=1;
    1492:	90 92 4a 09 	sts	0x094A, r9
    1496:	80 92 49 09 	sts	0x0949, r8
					velocity(0,v_right);
    149a:	80 e0       	ldi	r24, 0x00	; 0
    149c:	d6 01       	movw	r26, r12
    149e:	6c 91       	ld	r22, X
    14a0:	0e 94 4a 04 	call	0x894	; 0x894 <_Z8velocityhh>
    14a4:	21 c0       	rjmp	.+66     	; 0x14e8 <_Z11forward_wlsh+0x254>
					
				}
				else if(right_sensor>threshold)
    14a6:	81 17       	cp	r24, r17
    14a8:	50 f4       	brcc	.+20     	; 0x14be <_Z11forward_wlsh+0x22a>
				{
					flag=3;
    14aa:	f0 92 4a 09 	sts	0x094A, r15
    14ae:	e0 92 49 09 	sts	0x0949, r14
					velocity(v_left,0);
    14b2:	f5 01       	movw	r30, r10
    14b4:	80 81       	ld	r24, Z
    14b6:	60 e0       	ldi	r22, 0x00	; 0
    14b8:	0e 94 4a 04 	call	0x894	; 0x894 <_Z8velocityhh>
    14bc:	15 c0       	rjmp	.+42     	; 0x14e8 <_Z11forward_wlsh+0x254>
				}
				else
				{
					if(flag==1)
    14be:	80 91 49 09 	lds	r24, 0x0949
    14c2:	90 91 4a 09 	lds	r25, 0x094A
    14c6:	81 30       	cpi	r24, 0x01	; 1
    14c8:	91 05       	cpc	r25, r1
    14ca:	31 f4       	brne	.+12     	; 0x14d8 <_Z11forward_wlsh+0x244>
					{
						velocity(0,v_right);
    14cc:	80 e0       	ldi	r24, 0x00	; 0
    14ce:	d6 01       	movw	r26, r12
    14d0:	6c 91       	ld	r22, X
    14d2:	0e 94 4a 04 	call	0x894	; 0x894 <_Z8velocityhh>
    14d6:	08 c0       	rjmp	.+16     	; 0x14e8 <_Z11forward_wlsh+0x254>
						
					}					
					else if(flag==3)
    14d8:	83 30       	cpi	r24, 0x03	; 3
    14da:	91 05       	cpc	r25, r1
    14dc:	29 f4       	brne	.+10     	; 0x14e8 <_Z11forward_wlsh+0x254>
					{
						velocity(v_left,0);
    14de:	f5 01       	movw	r30, r10
    14e0:	80 81       	ld	r24, Z
    14e2:	60 e0       	ldi	r22, 0x00	; 0
    14e4:	0e 94 4a 04 	call	0x894	; 0x894 <_Z8velocityhh>
		_delay_ms(350);
		stop();
	}
	forward();
	velocity(v_left,v_right);
	while (node)
    14e8:	00 23       	and	r16, r16
    14ea:	09 f0       	breq	.+2      	; 0x14ee <_Z11forward_wlsh+0x25a>
    14ec:	43 cf       	rjmp	.-378    	; 0x1374 <_Z11forward_wlsh+0xe0>
			}
			

	}

}
    14ee:	df 91       	pop	r29
    14f0:	cf 91       	pop	r28
    14f2:	1f 91       	pop	r17
    14f4:	0f 91       	pop	r16
    14f6:	ff 90       	pop	r15
    14f8:	ef 90       	pop	r14
    14fa:	df 90       	pop	r13
    14fc:	cf 90       	pop	r12
    14fe:	bf 90       	pop	r11
    1500:	af 90       	pop	r10
    1502:	9f 90       	pop	r9
    1504:	8f 90       	pop	r8
    1506:	08 95       	ret

00001508 <_Z4moveRiiS_>:
* Logic				: <Move function moves from robot from <start> to <goal node>, it uses dijkstra algorithm to find path of nodes and stores them in array
                       then it moves from node to node taking appropiate turns using make_turn function >
* Example Call		: <move(0,1,{1,0}>
*/
void move(int &start, int goal, int &curr_dir)
{
    1508:	2f 92       	push	r2
    150a:	3f 92       	push	r3
    150c:	4f 92       	push	r4
    150e:	5f 92       	push	r5
    1510:	6f 92       	push	r6
    1512:	7f 92       	push	r7
    1514:	8f 92       	push	r8
    1516:	9f 92       	push	r9
    1518:	af 92       	push	r10
    151a:	bf 92       	push	r11
    151c:	cf 92       	push	r12
    151e:	df 92       	push	r13
    1520:	ef 92       	push	r14
    1522:	ff 92       	push	r15
    1524:	0f 93       	push	r16
    1526:	1f 93       	push	r17
    1528:	cf 93       	push	r28
    152a:	df 93       	push	r29
    152c:	cd b7       	in	r28, 0x3d	; 61
    152e:	de b7       	in	r29, 0x3e	; 62
    1530:	c0 54       	subi	r28, 0x40	; 64
    1532:	d0 40       	sbci	r29, 0x00	; 0
    1534:	0f b6       	in	r0, 0x3f	; 63
    1536:	f8 94       	cli
    1538:	de bf       	out	0x3e, r29	; 62
    153a:	0f be       	out	0x3f, r0	; 63
    153c:	cd bf       	out	0x3d, r28	; 61
    153e:	2c 01       	movw	r4, r24
    1540:	9b 01       	movw	r18, r22
    1542:	5c af       	sts	0x7c, r21
    1544:	4b af       	sts	0x7b, r20
	int i = 0, j;
	int moves[n], z = 0;
    1546:	1a 82       	std	Y+2, r1	; 0x02
    1548:	19 82       	std	Y+1, r1	; 0x01
	//path finding algorithm
	dijkstra(graph, start, goal, z, moves);
    154a:	dc 01       	movw	r26, r24
    154c:	6d 91       	ld	r22, X+
    154e:	7c 91       	ld	r23, X
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	93 e0       	ldi	r25, 0x03	; 3
    1554:	a9 01       	movw	r20, r18
    1556:	9e 01       	movw	r18, r28
    1558:	2f 5f       	subi	r18, 0xFF	; 255
    155a:	3f 4f       	sbci	r19, 0xFF	; 255
    155c:	8e 01       	movw	r16, r28
    155e:	0d 5f       	subi	r16, 0xFD	; 253
    1560:	1f 4f       	sbci	r17, 0xFF	; 255
    1562:	0e 94 32 07 	call	0xe64	; 0xe64 <_Z8dijkstraPA28_iiiRiPi>
	for (j = 1; j < z; j++)
    1566:	89 81       	ldd	r24, Y+1	; 0x01
    1568:	9a 81       	ldd	r25, Y+2	; 0x02
    156a:	82 30       	cpi	r24, 0x02	; 2
    156c:	91 05       	cpc	r25, r1
    156e:	0c f4       	brge	.+2      	; 0x1572 <_Z4moveRiiS_+0x6a>
    1570:	37 c1       	rjmp	.+622    	; 0x17e0 <_Z4moveRiiS_+0x2d8>
    1572:	0f 2e       	mov	r0, r31
    1574:	f5 e0       	ldi	r31, 0x05	; 5
    1576:	6f 2e       	mov	r6, r31
    1578:	77 24       	eor	r7, r7
    157a:	f0 2d       	mov	r31, r0
    157c:	6c 0e       	add	r6, r28
    157e:	7d 1e       	adc	r7, r29
    1580:	22 24       	eor	r2, r2
    1582:	33 24       	eor	r3, r3
    1584:	23 94       	inc	r2
* Output			: <void>
* Logic				: <Move function moves from robot from <start> to <goal node>, it uses dijkstra algorithm to find path of nodes and stores them in array
                       then it moves from node to node taking appropiate turns using make_turn function >
* Example Call		: <move(0,1,{1,0}>
*/
void move(int &start, int goal, int &curr_dir)
    1586:	7e ae       	sts	0xbe, r23
    1588:	6d ae       	sts	0xbd, r22
	int moves[n], z = 0;
	//path finding algorithm
	dijkstra(graph, start, goal, z, moves);
	for (j = 1; j < z; j++)
	{
		dest_dir = direction(all_nodes[moves[j]], all_nodes[start], curr_dir);//determine final direction which robot will be facing when it reaches destination node
    158a:	f3 01       	movw	r30, r6
    158c:	80 81       	ld	r24, Z
    158e:	91 81       	ldd	r25, Z+1	; 0x01
    1590:	88 0f       	add	r24, r24
    1592:	99 1f       	adc	r25, r25
    1594:	88 0f       	add	r24, r24
    1596:	99 1f       	adc	r25, r25
    1598:	88 0f       	add	r24, r24
    159a:	99 1f       	adc	r25, r25
    159c:	dc 01       	movw	r26, r24
    159e:	a7 5f       	subi	r26, 0xF7	; 247
    15a0:	bd 4f       	sbci	r27, 0xFD	; 253
    15a2:	f2 01       	movw	r30, r4
    15a4:	80 81       	ld	r24, Z
    15a6:	91 81       	ldd	r25, Z+1	; 0x01
    15a8:	fc 01       	movw	r30, r24
    15aa:	ee 0f       	add	r30, r30
    15ac:	ff 1f       	adc	r31, r31
    15ae:	ee 0f       	add	r30, r30
    15b0:	ff 1f       	adc	r31, r31
    15b2:	ee 0f       	add	r30, r30
    15b4:	ff 1f       	adc	r31, r31
    15b6:	cf 01       	movw	r24, r30
    15b8:	87 5f       	subi	r24, 0xF7	; 247
    15ba:	9d 4f       	sbci	r25, 0xFD	; 253
    15bc:	21 96       	adiw	r28, 0x01	; 1
    15be:	9f af       	sts	0x7f, r25
    15c0:	8e af       	sts	0x7e, r24
    15c2:	21 97       	sbiw	r28, 0x01	; 1
    15c4:	eb ad       	sts	0x6b, r30
    15c6:	fc ad       	sts	0x6c, r31
    15c8:	80 80       	ld	r8, Z
    15ca:	91 80       	ldd	r9, Z+1	; 0x01
    15cc:	2c 91       	ld	r18, X
    15ce:	11 96       	adiw	r26, 0x01	; 1
    15d0:	3c 91       	ld	r19, X
    15d2:	11 97       	sbiw	r26, 0x01	; 1
    15d4:	12 96       	adiw	r26, 0x02	; 2
    15d6:	4c 91       	ld	r20, X
    15d8:	12 97       	sbiw	r26, 0x02	; 2
    15da:	13 96       	adiw	r26, 0x03	; 3
    15dc:	5c 91       	ld	r21, X
    15de:	13 97       	sbiw	r26, 0x03	; 3
    15e0:	14 96       	adiw	r26, 0x04	; 4
    15e2:	6c 91       	ld	r22, X
    15e4:	14 97       	sbiw	r26, 0x04	; 4
    15e6:	15 96       	adiw	r26, 0x05	; 5
    15e8:	7c 91       	ld	r23, X
    15ea:	15 97       	sbiw	r26, 0x05	; 5
    15ec:	16 96       	adiw	r26, 0x06	; 6
    15ee:	8c 91       	ld	r24, X
    15f0:	16 97       	sbiw	r26, 0x06	; 6
    15f2:	17 96       	adiw	r26, 0x07	; 7
    15f4:	9c 91       	ld	r25, X
    15f6:	21 96       	adiw	r28, 0x01	; 1
    15f8:	ae ad       	sts	0x6e, r26
    15fa:	bf ad       	sts	0x6f, r27
    15fc:	21 97       	sbiw	r28, 0x01	; 1
    15fe:	ac 90       	ld	r10, X
    1600:	11 96       	adiw	r26, 0x01	; 1
    1602:	bc 90       	ld	r11, X
    1604:	11 97       	sbiw	r26, 0x01	; 1
    1606:	12 96       	adiw	r26, 0x02	; 2
    1608:	cc 90       	ld	r12, X
    160a:	12 97       	sbiw	r26, 0x02	; 2
    160c:	13 96       	adiw	r26, 0x03	; 3
    160e:	dc 90       	ld	r13, X
    1610:	13 97       	sbiw	r26, 0x03	; 3
    1612:	14 96       	adiw	r26, 0x04	; 4
    1614:	ec 90       	ld	r14, X
    1616:	14 97       	sbiw	r26, 0x04	; 4
    1618:	15 96       	adiw	r26, 0x05	; 5
    161a:	fc 90       	ld	r15, X
    161c:	15 97       	sbiw	r26, 0x05	; 5
    161e:	16 96       	adiw	r26, 0x06	; 6
    1620:	0c 91       	ld	r16, X
    1622:	16 97       	sbiw	r26, 0x06	; 6
    1624:	17 96       	adiw	r26, 0x07	; 7
    1626:	1c 91       	ld	r17, X
    1628:	0e 94 cc 04 	call	0x998	; 0x998 <_Z9direction6vertexS_i>
    162c:	90 93 2f 09 	sts	0x092F, r25
    1630:	80 93 2e 09 	sts	0x092E, r24
		lcd_init();
    1634:	0e 94 08 01 	call	0x210	; 0x210 <_Z8lcd_initv>
		lcd_print(1,1,start,1);
    1638:	f2 01       	movw	r30, r4
    163a:	40 81       	ld	r20, Z
    163c:	51 81       	ldd	r21, Z+1	; 0x01
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	61 e0       	ldi	r22, 0x01	; 1
    1642:	21 e0       	ldi	r18, 0x01	; 1
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	0e 94 78 01 	call	0x2f0	; 0x2f0 <_Z9lcd_printccji>
		lcd_print(1,4,moves[j],1);
    164a:	d3 01       	movw	r26, r6
    164c:	4d 91       	ld	r20, X+
    164e:	5c 91       	ld	r21, X
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	64 e0       	ldi	r22, 0x04	; 4
    1654:	21 e0       	ldi	r18, 0x01	; 1
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	0e 94 78 01 	call	0x2f0	; 0x2f0 <_Z9lcd_printccji>
		lcd_print(1,8,curr_dir,1);
    165c:	eb ad       	sts	0x6b, r30
    165e:	fc ad       	sts	0x6c, r31
    1660:	40 81       	ld	r20, Z
    1662:	51 81       	ldd	r21, Z+1	; 0x01
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	68 e0       	ldi	r22, 0x08	; 8
    1668:	21 e0       	ldi	r18, 0x01	; 1
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	0e 94 78 01 	call	0x2f0	; 0x2f0 <_Z9lcd_printccji>
    1670:	8f ef       	ldi	r24, 0xFF	; 255
    1672:	93 ed       	ldi	r25, 0xD3	; 211
    1674:	a0 e3       	ldi	r26, 0x30	; 48
    1676:	81 50       	subi	r24, 0x01	; 1
    1678:	90 40       	sbci	r25, 0x00	; 0
    167a:	a0 40       	sbci	r26, 0x00	; 0
    167c:	e1 f7       	brne	.-8      	; 0x1676 <_Z4moveRiiS_+0x16e>
    167e:	00 c0       	rjmp	.+0      	; 0x1680 <_Z4moveRiiS_+0x178>
    1680:	00 00       	nop
		_delay_ms(1000);
		

		make_turn(curr_dir, dest_dir);
    1682:	60 91 2e 09 	lds	r22, 0x092E
    1686:	70 91 2f 09 	lds	r23, 0x092F
    168a:	ab ad       	sts	0x6b, r26
    168c:	bc ad       	sts	0x6c, r27
    168e:	8d 91       	ld	r24, X+
    1690:	9c 91       	ld	r25, X
    1692:	0e 94 1a 09 	call	0x1234	; 0x1234 <_Z9make_turnii>
		curr_dir = dest_dir;
    1696:	80 91 2e 09 	lds	r24, 0x092E
    169a:	90 91 2f 09 	lds	r25, 0x092F
    169e:	eb ad       	sts	0x6b, r30
    16a0:	fc ad       	sts	0x6c, r31
    16a2:	91 83       	std	Z+1, r25	; 0x01
    16a4:	80 83       	st	Z, r24
		if((start==23&&moves[j]==24)||(start==24&&moves[j]==23))//for the lift to work efficiently
    16a6:	d2 01       	movw	r26, r4
    16a8:	8d 91       	ld	r24, X+
    16aa:	9c 91       	ld	r25, X
    16ac:	11 97       	sbiw	r26, 0x01	; 1
    16ae:	87 31       	cpi	r24, 0x17	; 23
    16b0:	91 05       	cpc	r25, r1
    16b2:	39 f4       	brne	.+14     	; 0x16c2 <_Z4moveRiiS_+0x1ba>
    16b4:	f3 01       	movw	r30, r6
    16b6:	80 81       	ld	r24, Z
    16b8:	91 81       	ldd	r25, Z+1	; 0x01
    16ba:	88 31       	cpi	r24, 0x18	; 24
    16bc:	91 05       	cpc	r25, r1
    16be:	b1 f4       	brne	.+44     	; 0x16ec <_Z4moveRiiS_+0x1e4>
    16c0:	0b c0       	rjmp	.+22     	; 0x16d8 <_Z4moveRiiS_+0x1d0>
    16c2:	88 31       	cpi	r24, 0x18	; 24
    16c4:	91 05       	cpc	r25, r1
    16c6:	91 f4       	brne	.+36     	; 0x16ec <_Z4moveRiiS_+0x1e4>
    16c8:	ad ad       	sts	0x6d, r26
    16ca:	be ad       	sts	0x6e, r27
    16cc:	8d 91       	ld	r24, X+
    16ce:	9c 91       	ld	r25, X
    16d0:	11 97       	sbiw	r26, 0x01	; 1
    16d2:	87 31       	cpi	r24, 0x17	; 23
    16d4:	91 05       	cpc	r25, r1
    16d6:	51 f4       	brne	.+20     	; 0x16ec <_Z4moveRiiS_+0x1e4>
    16d8:	8a ea       	ldi	r24, 0xAA	; 170
    16da:	96 ee       	ldi	r25, 0xE6	; 230
    16dc:	a6 e9       	ldi	r26, 0x96	; 150
    16de:	b1 e0       	ldi	r27, 0x01	; 1
    16e0:	81 50       	subi	r24, 0x01	; 1
    16e2:	90 40       	sbci	r25, 0x00	; 0
    16e4:	a0 40       	sbci	r26, 0x00	; 0
    16e6:	b0 40       	sbci	r27, 0x00	; 0
    16e8:	d9 f7       	brne	.-10     	; 0x16e0 <_Z4moveRiiS_+0x1d8>
    16ea:	00 00       	nop
			_delay_ms(10000);
		forward_wls(1);
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	0e 94 4a 09 	call	0x1294	; 0x1294 <_Z11forward_wlsh>
		if (wall)
    16f2:	80 91 4b 09 	lds	r24, 0x094B
    16f6:	90 91 4c 09 	lds	r25, 0x094C
    16fa:	00 97       	sbiw	r24, 0x00	; 0
    16fc:	09 f4       	brne	.+2      	; 0x1700 <_Z4moveRiiS_+0x1f8>
    16fe:	5b c0       	rjmp	.+182    	; 0x17b6 <_Z4moveRiiS_+0x2ae>
		{
			graph[start][moves[j]] = 0;
    1700:	f1 01       	movw	r30, r2
    1702:	ee 0f       	add	r30, r30
    1704:	ff 1f       	adc	r31, r31
    1706:	ec 0f       	add	r30, r28
    1708:	fd 1f       	adc	r31, r29
    170a:	63 81       	ldd	r22, Z+3	; 0x03
    170c:	74 81       	ldd	r23, Z+4	; 0x04
    170e:	d2 01       	movw	r26, r4
    1710:	8c 91       	ld	r24, X
    1712:	11 96       	adiw	r26, 0x01	; 1
    1714:	9c 91       	ld	r25, X
    1716:	88 0f       	add	r24, r24
    1718:	99 1f       	adc	r25, r25
    171a:	88 0f       	add	r24, r24
    171c:	99 1f       	adc	r25, r25
    171e:	9c 01       	movw	r18, r24
    1720:	22 0f       	add	r18, r18
    1722:	33 1f       	adc	r19, r19
    1724:	22 0f       	add	r18, r18
    1726:	33 1f       	adc	r19, r19
    1728:	22 0f       	add	r18, r18
    172a:	33 1f       	adc	r19, r19
    172c:	28 1b       	sub	r18, r24
    172e:	39 0b       	sbc	r19, r25
    1730:	26 0f       	add	r18, r22
    1732:	37 1f       	adc	r19, r23
    1734:	a1 e0       	ldi	r26, 0x01	; 1
    1736:	b3 e0       	ldi	r27, 0x03	; 3
    1738:	f9 01       	movw	r30, r18
    173a:	ee 0f       	add	r30, r30
    173c:	ff 1f       	adc	r31, r31
    173e:	ea 0f       	add	r30, r26
    1740:	fb 1f       	adc	r31, r27
    1742:	11 82       	std	Z+1, r1	; 0x01
    1744:	10 82       	st	Z, r1
			graph[moves[j]][start] = 0;
    1746:	f2 01       	movw	r30, r4
    1748:	40 81       	ld	r20, Z
    174a:	51 81       	ldd	r21, Z+1	; 0x01
    174c:	cb 01       	movw	r24, r22
    174e:	88 0f       	add	r24, r24
    1750:	99 1f       	adc	r25, r25
    1752:	88 0f       	add	r24, r24
    1754:	99 1f       	adc	r25, r25
    1756:	9c 01       	movw	r18, r24
    1758:	22 0f       	add	r18, r18
    175a:	33 1f       	adc	r19, r19
    175c:	22 0f       	add	r18, r18
    175e:	33 1f       	adc	r19, r19
    1760:	22 0f       	add	r18, r18
    1762:	33 1f       	adc	r19, r19
    1764:	28 1b       	sub	r18, r24
    1766:	39 0b       	sbc	r19, r25
    1768:	24 0f       	add	r18, r20
    176a:	35 1f       	adc	r19, r21
    176c:	22 0f       	add	r18, r18
    176e:	33 1f       	adc	r19, r19
    1770:	a2 0f       	add	r26, r18
    1772:	b3 1f       	adc	r27, r19
    1774:	1d 92       	st	X+, r1
    1776:	1c 92       	st	X, r1
			left();
    1778:	0e 94 60 04 	call	0x8c0	; 0x8c0 <_Z4leftv>
    177c:	8f ef       	ldi	r24, 0xFF	; 255
    177e:	98 e6       	ldi	r25, 0x68	; 104
    1780:	ad e2       	ldi	r26, 0x2D	; 45
    1782:	81 50       	subi	r24, 0x01	; 1
    1784:	90 40       	sbci	r25, 0x00	; 0
    1786:	a0 40       	sbci	r26, 0x00	; 0
    1788:	e1 f7       	brne	.-8      	; 0x1782 <_Z4moveRiiS_+0x27a>
    178a:	00 c0       	rjmp	.+0      	; 0x178c <_Z4moveRiiS_+0x284>
    178c:	00 00       	nop
			_delay_ms(930);
			stop();
    178e:	0e 94 64 04 	call	0x8c8	; 0x8c8 <_Z4stopv>
			forward_wls(1);
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	0e 94 4a 09 	call	0x1294	; 0x1294 <_Z11forward_wlsh>
			curr_dir = (dest_dir+8)%16;
    1798:	80 91 2e 09 	lds	r24, 0x092E
    179c:	90 91 2f 09 	lds	r25, 0x092F
    17a0:	08 96       	adiw	r24, 0x08	; 8
    17a2:	60 e1       	ldi	r22, 0x10	; 16
    17a4:	70 e0       	ldi	r23, 0x00	; 0
    17a6:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <__divmodhi4>
    17aa:	ab ad       	sts	0x6b, r26
    17ac:	bc ad       	sts	0x6c, r27
    17ae:	11 96       	adiw	r26, 0x01	; 1
    17b0:	9c 93       	st	X, r25
    17b2:	8e 93       	st	-X, r24
			return;
    17b4:	15 c0       	rjmp	.+42     	; 0x17e0 <_Z4moveRiiS_+0x2d8>
    17b6:	e2 e0       	ldi	r30, 0x02	; 2
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	6e 0e       	add	r6, r30
    17bc:	7f 1e       	adc	r7, r31
		}

		start = moves[j];
    17be:	ad ad       	sts	0x6d, r26
    17c0:	be ad       	sts	0x6e, r27
    17c2:	8d 91       	ld	r24, X+
    17c4:	9c 91       	ld	r25, X
    17c6:	11 97       	sbiw	r26, 0x01	; 1
    17c8:	f2 01       	movw	r30, r4
    17ca:	91 83       	std	Z+1, r25	; 0x01
    17cc:	80 83       	st	Z, r24
{
	int i = 0, j;
	int moves[n], z = 0;
	//path finding algorithm
	dijkstra(graph, start, goal, z, moves);
	for (j = 1; j < z; j++)
    17ce:	08 94       	sec
    17d0:	21 1c       	adc	r2, r1
    17d2:	31 1c       	adc	r3, r1
    17d4:	89 81       	ldd	r24, Y+1	; 0x01
    17d6:	9a 81       	ldd	r25, Y+2	; 0x02
    17d8:	28 16       	cp	r2, r24
    17da:	39 06       	cpc	r3, r25
    17dc:	0c f4       	brge	.+2      	; 0x17e0 <_Z4moveRiiS_+0x2d8>
    17de:	d3 ce       	rjmp	.-602    	; 0x1586 <_Z4moveRiiS_+0x7e>

		start = moves[j];
	}


}
    17e0:	c0 5c       	subi	r28, 0xC0	; 192
    17e2:	df 4f       	sbci	r29, 0xFF	; 255
    17e4:	0f b6       	in	r0, 0x3f	; 63
    17e6:	f8 94       	cli
    17e8:	de bf       	out	0x3e, r29	; 62
    17ea:	0f be       	out	0x3f, r0	; 63
    17ec:	cd bf       	out	0x3d, r28	; 61
    17ee:	df 91       	pop	r29
    17f0:	cf 91       	pop	r28
    17f2:	1f 91       	pop	r17
    17f4:	0f 91       	pop	r16
    17f6:	ff 90       	pop	r15
    17f8:	ef 90       	pop	r14
    17fa:	df 90       	pop	r13
    17fc:	cf 90       	pop	r12
    17fe:	bf 90       	pop	r11
    1800:	af 90       	pop	r10
    1802:	9f 90       	pop	r9
    1804:	8f 90       	pop	r8
    1806:	7f 90       	pop	r7
    1808:	6f 90       	pop	r6
    180a:	5f 90       	pop	r5
    180c:	4f 90       	pop	r4
    180e:	3f 90       	pop	r3
    1810:	2f 90       	pop	r2
    1812:	08 95       	ret

00001814 <main>:

}


int main()
{
    1814:	2f 92       	push	r2
    1816:	3f 92       	push	r3
    1818:	4f 92       	push	r4
    181a:	5f 92       	push	r5
    181c:	6f 92       	push	r6
    181e:	7f 92       	push	r7
    1820:	8f 92       	push	r8
    1822:	9f 92       	push	r9
    1824:	af 92       	push	r10
    1826:	bf 92       	push	r11
    1828:	cf 92       	push	r12
    182a:	df 92       	push	r13
    182c:	ef 92       	push	r14
    182e:	ff 92       	push	r15
    1830:	0f 93       	push	r16
    1832:	1f 93       	push	r17
    1834:	cf 93       	push	r28
    1836:	df 93       	push	r29
	int i,nut=0;
	int red_nut_cnt=0,green_nut_cnt=0,blue_nut_cnt=0;
	
	init_devices();
    1838:	0e 94 c1 04 	call	0x982	; 0x982 <_Z12init_devicesv>
	servo_1_free();
    183c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <_Z12servo_1_freev>
	servo_2_free();
    1840:	0e 94 80 03 	call	0x700	; 0x700 <_Z12servo_2_freev>
	lcd_init();
    1844:	0e 94 08 01 	call	0x210	; 0x210 <_Z8lcd_initv>
	lcd_set_4bit();
    1848:	0e 94 9c 00 	call	0x138	; 0x138 <_Z12lcd_set_4bitv>
	


	
	for (i = 0; i < nut_count; i++)
    184c:	80 91 22 09 	lds	r24, 0x0922
    1850:	90 91 23 09 	lds	r25, 0x0923
    1854:	18 16       	cp	r1, r24
    1856:	19 06       	cpc	r1, r25
    1858:	0c f0       	brlt	.+2      	; 0x185c <main+0x48>
    185a:	3a c1       	rjmp	.+628    	; 0x1ad0 <main+0x2bc>
    185c:	0f 2e       	mov	r0, r31
    185e:	f5 ef       	ldi	r31, 0xF5	; 245
    1860:	cf 2e       	mov	r12, r31
    1862:	f2 e0       	ldi	r31, 0x02	; 2
    1864:	df 2e       	mov	r13, r31
    1866:	f0 2d       	mov	r31, r0


int main()
{
	int i,nut=0;
	int red_nut_cnt=0,green_nut_cnt=0,blue_nut_cnt=0;
    1868:	44 24       	eor	r4, r4
    186a:	55 24       	eor	r5, r5
    186c:	88 24       	eor	r8, r8
    186e:	99 24       	eor	r9, r9
    1870:	66 24       	eor	r6, r6
    1872:	77 24       	eor	r7, r7
	lcd_set_4bit();
	


	
	for (i = 0; i < nut_count; i++)
    1874:	aa 24       	eor	r10, r10
    1876:	bb 24       	eor	r11, r11
	{
		//move from current position to nut position
		move(curr_node, nuts[i], curr_dir);
    1878:	04 e2       	ldi	r16, 0x24	; 36
    187a:	19 e0       	ldi	r17, 0x09	; 9
    187c:	0f 2e       	mov	r0, r31
    187e:	f0 e3       	ldi	r31, 0x30	; 48
    1880:	ef 2e       	mov	r14, r31
    1882:	f9 e0       	ldi	r31, 0x09	; 9
    1884:	ff 2e       	mov	r15, r31
    1886:	f0 2d       	mov	r31, r0
		}
		else if (nut==1)	//if it is red nut
		{
			pick();
			//move to destination
			move(curr_node, red_deposit[red_nut_cnt], curr_dir);
    1888:	0f 2e       	mov	r0, r31
    188a:	fd ee       	ldi	r31, 0xED	; 237
    188c:	2f 2e       	mov	r2, r31
    188e:	f2 e0       	ldi	r31, 0x02	; 2
    1890:	3f 2e       	mov	r3, r31
    1892:	f0 2d       	mov	r31, r0
	}

}


int main()
    1894:	e6 01       	movw	r28, r12

	
	for (i = 0; i < nut_count; i++)
	{
		//move from current position to nut position
		move(curr_node, nuts[i], curr_dir);
    1896:	68 81       	ld	r22, Y
    1898:	79 81       	ldd	r23, Y+1	; 0x01
    189a:	c8 01       	movw	r24, r16
    189c:	a7 01       	movw	r20, r14
    189e:	0e 94 84 0a 	call	0x1508	; 0x1508 <_Z4moveRiiS_>
		//checks for wall
		while (wall)
    18a2:	80 91 4b 09 	lds	r24, 0x094B
    18a6:	90 91 4c 09 	lds	r25, 0x094C
    18aa:	00 97       	sbiw	r24, 0x00	; 0
    18ac:	81 f0       	breq	.+32     	; 0x18ce <main+0xba>
		{
			wall = 0;
    18ae:	10 92 4c 09 	sts	0x094C, r1
    18b2:	10 92 4b 09 	sts	0x094B, r1
			move(curr_node, nuts[i], curr_dir);
    18b6:	68 81       	ld	r22, Y
    18b8:	79 81       	ldd	r23, Y+1	; 0x01
    18ba:	c8 01       	movw	r24, r16
    18bc:	a7 01       	movw	r20, r14
    18be:	0e 94 84 0a 	call	0x1508	; 0x1508 <_Z4moveRiiS_>
	for (i = 0; i < nut_count; i++)
	{
		//move from current position to nut position
		move(curr_node, nuts[i], curr_dir);
		//checks for wall
		while (wall)
    18c2:	80 91 4b 09 	lds	r24, 0x094B
    18c6:	90 91 4c 09 	lds	r25, 0x094C
    18ca:	00 97       	sbiw	r24, 0x00	; 0
    18cc:	81 f7       	brne	.-32     	; 0x18ae <main+0x9a>
		{
			wall = 0;
			move(curr_node, nuts[i], curr_dir);
		}
		make_turn(curr_dir, 0);
    18ce:	80 91 30 09 	lds	r24, 0x0930
    18d2:	90 91 31 09 	lds	r25, 0x0931
    18d6:	60 e0       	ldi	r22, 0x00	; 0
    18d8:	70 e0       	ldi	r23, 0x00	; 0
    18da:	0e 94 1a 09 	call	0x1234	; 0x1234 <_Z9make_turnii>
		curr_dir = 0;
    18de:	10 92 31 09 	sts	0x0931, r1
    18e2:	10 92 30 09 	sts	0x0930, r1
		stop();
    18e6:	0e 94 64 04 	call	0x8c8	; 0x8c8 <_Z4stopv>
		adjust_pick();
    18ea:	0e 94 68 04 	call	0x8d0	; 0x8d0 <_Z11adjust_pickv>
		//checks if nut is present
		if(ADC_Conversion(FRONT_IR_ADC_CHANNEL)<close)
    18ee:	84 e0       	ldi	r24, 0x04	; 4
    18f0:	0e 94 1b 04 	call	0x836	; 0x836 <_Z14ADC_Conversionh>
    18f4:	90 91 21 09 	lds	r25, 0x0921
    18f8:	89 17       	cp	r24, r25
    18fa:	20 f4       	brcc	.+8      	; 0x1904 <main+0xf0>
		{
			servo_1(153);
    18fc:	89 e9       	ldi	r24, 0x99	; 153
    18fe:	0e 94 47 03 	call	0x68e	; 0x68e <_Z7servo_1h>
			continue;
    1902:	d7 c0       	rjmp	.+430    	; 0x1ab2 <main+0x29e>
		}
		
		
		nut=glow();
    1904:	0e 94 c2 02 	call	0x584	; 0x584 <_Z4glowv>
		
		if (nut==2)	//if its green nut
    1908:	82 30       	cpi	r24, 0x02	; 2
    190a:	91 05       	cpc	r25, r1
    190c:	09 f0       	breq	.+2      	; 0x1910 <main+0xfc>
    190e:	4a c0       	rjmp	.+148    	; 0x19a4 <main+0x190>
		{
			pick();
    1910:	0e 94 87 03 	call	0x70e	; 0x70e <_Z4pickv>
			curr_node = nuts[i];
    1914:	88 81       	ld	r24, Y
    1916:	99 81       	ldd	r25, Y+1	; 0x01
    1918:	90 93 25 09 	sts	0x0925, r25
    191c:	80 93 24 09 	sts	0x0924, r24
			curr_dir = 0;
    1920:	10 92 31 09 	sts	0x0931, r1
    1924:	10 92 30 09 	sts	0x0930, r1
			//move to destination
			move(curr_node, green_deposit[green_nut_cnt], curr_dir);
    1928:	c4 01       	movw	r24, r8
    192a:	88 0f       	add	r24, r24
    192c:	99 1f       	adc	r25, r25
    192e:	87 51       	subi	r24, 0x17	; 23
    1930:	9d 4f       	sbci	r25, 0xFD	; 253
    1932:	fc 01       	movw	r30, r24
    1934:	60 81       	ld	r22, Z
    1936:	71 81       	ldd	r23, Z+1	; 0x01
    1938:	c8 01       	movw	r24, r16
    193a:	a7 01       	movw	r20, r14
    193c:	0e 94 84 0a 	call	0x1508	; 0x1508 <_Z4moveRiiS_>
			//if obstacle encountered
			while (wall)
    1940:	80 91 4b 09 	lds	r24, 0x094B
    1944:	90 91 4c 09 	lds	r25, 0x094C
    1948:	00 97       	sbiw	r24, 0x00	; 0
    194a:	b1 f0       	breq	.+44     	; 0x1978 <main+0x164>
			{
				wall = 0;
				move(curr_node,green_deposit[green_nut_cnt], curr_dir);
    194c:	c4 01       	movw	r24, r8
    194e:	88 0f       	add	r24, r24
    1950:	99 1f       	adc	r25, r25
    1952:	ec 01       	movw	r28, r24
    1954:	c7 51       	subi	r28, 0x17	; 23
    1956:	dd 4f       	sbci	r29, 0xFD	; 253
			//move to destination
			move(curr_node, green_deposit[green_nut_cnt], curr_dir);
			//if obstacle encountered
			while (wall)
			{
				wall = 0;
    1958:	10 92 4c 09 	sts	0x094C, r1
    195c:	10 92 4b 09 	sts	0x094B, r1
				move(curr_node,green_deposit[green_nut_cnt], curr_dir);
    1960:	68 81       	ld	r22, Y
    1962:	79 81       	ldd	r23, Y+1	; 0x01
    1964:	c8 01       	movw	r24, r16
    1966:	a7 01       	movw	r20, r14
    1968:	0e 94 84 0a 	call	0x1508	; 0x1508 <_Z4moveRiiS_>
			curr_node = nuts[i];
			curr_dir = 0;
			//move to destination
			move(curr_node, green_deposit[green_nut_cnt], curr_dir);
			//if obstacle encountered
			while (wall)
    196c:	80 91 4b 09 	lds	r24, 0x094B
    1970:	90 91 4c 09 	lds	r25, 0x094C
    1974:	00 97       	sbiw	r24, 0x00	; 0
    1976:	81 f7       	brne	.-32     	; 0x1958 <main+0x144>
			{
				wall = 0;
				move(curr_node,green_deposit[green_nut_cnt], curr_dir);
			}
			make_turn(curr_dir,8);
    1978:	80 91 30 09 	lds	r24, 0x0930
    197c:	90 91 31 09 	lds	r25, 0x0931
    1980:	68 e0       	ldi	r22, 0x08	; 8
    1982:	70 e0       	ldi	r23, 0x00	; 0
    1984:	0e 94 1a 09 	call	0x1234	; 0x1234 <_Z9make_turnii>
			curr_dir=8;
    1988:	88 e0       	ldi	r24, 0x08	; 8
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	90 93 31 09 	sts	0x0931, r25
    1990:	80 93 30 09 	sts	0x0930, r24
			
			adjust_place();
    1994:	0e 94 9b 04 	call	0x936	; 0x936 <_Z12adjust_placev>
			
			place();
    1998:	0e 94 a6 03 	call	0x74c	; 0x74c <_Z5placev>
			green_nut_cnt++;
    199c:	08 94       	sec
    199e:	81 1c       	adc	r8, r1
    19a0:	91 1c       	adc	r9, r1
    19a2:	87 c0       	rjmp	.+270    	; 0x1ab2 <main+0x29e>
		}
		else if (nut==1)	//if it is red nut
    19a4:	81 30       	cpi	r24, 0x01	; 1
    19a6:	91 05       	cpc	r25, r1
    19a8:	09 f0       	breq	.+2      	; 0x19ac <main+0x198>
    19aa:	40 c0       	rjmp	.+128    	; 0x1a2c <main+0x218>
		{
			pick();
    19ac:	0e 94 87 03 	call	0x70e	; 0x70e <_Z4pickv>
			//move to destination
			move(curr_node, red_deposit[red_nut_cnt], curr_dir);
    19b0:	c3 01       	movw	r24, r6
    19b2:	88 0f       	add	r24, r24
    19b4:	99 1f       	adc	r25, r25
    19b6:	82 0d       	add	r24, r2
    19b8:	93 1d       	adc	r25, r3
    19ba:	fc 01       	movw	r30, r24
    19bc:	60 81       	ld	r22, Z
    19be:	71 81       	ldd	r23, Z+1	; 0x01
    19c0:	c8 01       	movw	r24, r16
    19c2:	a7 01       	movw	r20, r14
    19c4:	0e 94 84 0a 	call	0x1508	; 0x1508 <_Z4moveRiiS_>
			while (wall)
    19c8:	80 91 4b 09 	lds	r24, 0x094B
    19cc:	90 91 4c 09 	lds	r25, 0x094C
    19d0:	00 97       	sbiw	r24, 0x00	; 0
    19d2:	b1 f0       	breq	.+44     	; 0x1a00 <main+0x1ec>
			{
				wall = 0;
				move(curr_node,red_deposit[red_nut_cnt] , curr_dir);
    19d4:	c3 01       	movw	r24, r6
    19d6:	88 0f       	add	r24, r24
    19d8:	99 1f       	adc	r25, r25
    19da:	e1 01       	movw	r28, r2
    19dc:	c8 0f       	add	r28, r24
    19de:	d9 1f       	adc	r29, r25
			pick();
			//move to destination
			move(curr_node, red_deposit[red_nut_cnt], curr_dir);
			while (wall)
			{
				wall = 0;
    19e0:	10 92 4c 09 	sts	0x094C, r1
    19e4:	10 92 4b 09 	sts	0x094B, r1
				move(curr_node,red_deposit[red_nut_cnt] , curr_dir);
    19e8:	68 81       	ld	r22, Y
    19ea:	79 81       	ldd	r23, Y+1	; 0x01
    19ec:	c8 01       	movw	r24, r16
    19ee:	a7 01       	movw	r20, r14
    19f0:	0e 94 84 0a 	call	0x1508	; 0x1508 <_Z4moveRiiS_>
		else if (nut==1)	//if it is red nut
		{
			pick();
			//move to destination
			move(curr_node, red_deposit[red_nut_cnt], curr_dir);
			while (wall)
    19f4:	80 91 4b 09 	lds	r24, 0x094B
    19f8:	90 91 4c 09 	lds	r25, 0x094C
    19fc:	00 97       	sbiw	r24, 0x00	; 0
    19fe:	81 f7       	brne	.-32     	; 0x19e0 <main+0x1cc>
			{
				wall = 0;
				move(curr_node,red_deposit[red_nut_cnt] , curr_dir);
			}
			make_turn(curr_dir,8);
    1a00:	80 91 30 09 	lds	r24, 0x0930
    1a04:	90 91 31 09 	lds	r25, 0x0931
    1a08:	68 e0       	ldi	r22, 0x08	; 8
    1a0a:	70 e0       	ldi	r23, 0x00	; 0
    1a0c:	0e 94 1a 09 	call	0x1234	; 0x1234 <_Z9make_turnii>
			curr_dir = 8;
    1a10:	88 e0       	ldi	r24, 0x08	; 8
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	90 93 31 09 	sts	0x0931, r25
    1a18:	80 93 30 09 	sts	0x0930, r24
			adjust_place();
    1a1c:	0e 94 9b 04 	call	0x936	; 0x936 <_Z12adjust_placev>
			
			place();
    1a20:	0e 94 a6 03 	call	0x74c	; 0x74c <_Z5placev>
			red_nut_cnt++;
    1a24:	08 94       	sec
    1a26:	61 1c       	adc	r6, r1
    1a28:	71 1c       	adc	r7, r1
    1a2a:	43 c0       	rjmp	.+134    	; 0x1ab2 <main+0x29e>
		}
		else if(nut==3)//if its blue nut
    1a2c:	83 30       	cpi	r24, 0x03	; 3
    1a2e:	91 05       	cpc	r25, r1
    1a30:	09 f0       	breq	.+2      	; 0x1a34 <main+0x220>
    1a32:	3f c0       	rjmp	.+126    	; 0x1ab2 <main+0x29e>
		{
			pick();
    1a34:	0e 94 87 03 	call	0x70e	; 0x70e <_Z4pickv>
			//move to destination
			move(curr_node, blue_deposit[blue_nut_cnt], curr_dir);
    1a38:	c2 01       	movw	r24, r4
    1a3a:	88 0f       	add	r24, r24
    1a3c:	99 1f       	adc	r25, r25
    1a3e:	84 5d       	subi	r24, 0xD4	; 212
    1a40:	96 4f       	sbci	r25, 0xF6	; 246
    1a42:	fc 01       	movw	r30, r24
    1a44:	60 81       	ld	r22, Z
    1a46:	71 81       	ldd	r23, Z+1	; 0x01
    1a48:	c8 01       	movw	r24, r16
    1a4a:	a7 01       	movw	r20, r14
    1a4c:	0e 94 84 0a 	call	0x1508	; 0x1508 <_Z4moveRiiS_>
			while (wall)
    1a50:	80 91 4b 09 	lds	r24, 0x094B
    1a54:	90 91 4c 09 	lds	r25, 0x094C
    1a58:	00 97       	sbiw	r24, 0x00	; 0
    1a5a:	b1 f0       	breq	.+44     	; 0x1a88 <main+0x274>
			{
				wall = 0;
				move(curr_node, blue_deposit[blue_nut_cnt], curr_dir);
    1a5c:	c2 01       	movw	r24, r4
    1a5e:	88 0f       	add	r24, r24
    1a60:	99 1f       	adc	r25, r25
    1a62:	ec 01       	movw	r28, r24
    1a64:	c4 5d       	subi	r28, 0xD4	; 212
    1a66:	d6 4f       	sbci	r29, 0xF6	; 246
			pick();
			//move to destination
			move(curr_node, blue_deposit[blue_nut_cnt], curr_dir);
			while (wall)
			{
				wall = 0;
    1a68:	10 92 4c 09 	sts	0x094C, r1
    1a6c:	10 92 4b 09 	sts	0x094B, r1
				move(curr_node, blue_deposit[blue_nut_cnt], curr_dir);
    1a70:	68 81       	ld	r22, Y
    1a72:	79 81       	ldd	r23, Y+1	; 0x01
    1a74:	c8 01       	movw	r24, r16
    1a76:	a7 01       	movw	r20, r14
    1a78:	0e 94 84 0a 	call	0x1508	; 0x1508 <_Z4moveRiiS_>
		else if(nut==3)//if its blue nut
		{
			pick();
			//move to destination
			move(curr_node, blue_deposit[blue_nut_cnt], curr_dir);
			while (wall)
    1a7c:	80 91 4b 09 	lds	r24, 0x094B
    1a80:	90 91 4c 09 	lds	r25, 0x094C
    1a84:	00 97       	sbiw	r24, 0x00	; 0
    1a86:	81 f7       	brne	.-32     	; 0x1a68 <main+0x254>
			{
				wall = 0;
				move(curr_node, blue_deposit[blue_nut_cnt], curr_dir);
			}
			make_turn(curr_dir,8);
    1a88:	80 91 30 09 	lds	r24, 0x0930
    1a8c:	90 91 31 09 	lds	r25, 0x0931
    1a90:	68 e0       	ldi	r22, 0x08	; 8
    1a92:	70 e0       	ldi	r23, 0x00	; 0
    1a94:	0e 94 1a 09 	call	0x1234	; 0x1234 <_Z9make_turnii>
			curr_dir = 8;
    1a98:	88 e0       	ldi	r24, 0x08	; 8
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	90 93 31 09 	sts	0x0931, r25
    1aa0:	80 93 30 09 	sts	0x0930, r24
			adjust_place();
    1aa4:	0e 94 9b 04 	call	0x936	; 0x936 <_Z12adjust_placev>
			place();
    1aa8:	0e 94 a6 03 	call	0x74c	; 0x74c <_Z5placev>
			blue_nut_cnt++;
    1aac:	08 94       	sec
    1aae:	41 1c       	adc	r4, r1
    1ab0:	51 1c       	adc	r5, r1
	lcd_set_4bit();
	


	
	for (i = 0; i < nut_count; i++)
    1ab2:	08 94       	sec
    1ab4:	a1 1c       	adc	r10, r1
    1ab6:	b1 1c       	adc	r11, r1
    1ab8:	82 e0       	ldi	r24, 0x02	; 2
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	c8 0e       	add	r12, r24
    1abe:	d9 1e       	adc	r13, r25
    1ac0:	80 91 22 09 	lds	r24, 0x0922
    1ac4:	90 91 23 09 	lds	r25, 0x0923
    1ac8:	a8 16       	cp	r10, r24
    1aca:	b9 06       	cpc	r11, r25
    1acc:	0c f4       	brge	.+2      	; 0x1ad0 <main+0x2bc>
    1ace:	e2 ce       	rjmp	.-572    	; 0x1894 <main+0x80>
			place();
			blue_nut_cnt++;
		}

	}
	buzzer_on();
    1ad0:	0e 94 ac 04 	call	0x958	; 0x958 <_Z9buzzer_onv>


    1ad4:	80 e0       	ldi	r24, 0x00	; 0
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	df 91       	pop	r29
    1ada:	cf 91       	pop	r28
    1adc:	1f 91       	pop	r17
    1ade:	0f 91       	pop	r16
    1ae0:	ff 90       	pop	r15
    1ae2:	ef 90       	pop	r14
    1ae4:	df 90       	pop	r13
    1ae6:	cf 90       	pop	r12
    1ae8:	bf 90       	pop	r11
    1aea:	af 90       	pop	r10
    1aec:	9f 90       	pop	r9
    1aee:	8f 90       	pop	r8
    1af0:	7f 90       	pop	r7
    1af2:	6f 90       	pop	r6
    1af4:	5f 90       	pop	r5
    1af6:	4f 90       	pop	r4
    1af8:	3f 90       	pop	r3
    1afa:	2f 90       	pop	r2
    1afc:	08 95       	ret

00001afe <__subsf3>:
    1afe:	50 58       	subi	r21, 0x80	; 128

00001b00 <__addsf3>:
    1b00:	bb 27       	eor	r27, r27
    1b02:	aa 27       	eor	r26, r26
    1b04:	0e d0       	rcall	.+28     	; 0x1b22 <__addsf3x>
    1b06:	70 c1       	rjmp	.+736    	; 0x1de8 <__fp_round>
    1b08:	61 d1       	rcall	.+706    	; 0x1dcc <__fp_pscA>
    1b0a:	30 f0       	brcs	.+12     	; 0x1b18 <__addsf3+0x18>
    1b0c:	66 d1       	rcall	.+716    	; 0x1dda <__fp_pscB>
    1b0e:	20 f0       	brcs	.+8      	; 0x1b18 <__addsf3+0x18>
    1b10:	31 f4       	brne	.+12     	; 0x1b1e <__addsf3+0x1e>
    1b12:	9f 3f       	cpi	r25, 0xFF	; 255
    1b14:	11 f4       	brne	.+4      	; 0x1b1a <__addsf3+0x1a>
    1b16:	1e f4       	brtc	.+6      	; 0x1b1e <__addsf3+0x1e>
    1b18:	56 c1       	rjmp	.+684    	; 0x1dc6 <__fp_nan>
    1b1a:	0e f4       	brtc	.+2      	; 0x1b1e <__addsf3+0x1e>
    1b1c:	e0 95       	com	r30
    1b1e:	e7 fb       	bst	r30, 7
    1b20:	4c c1       	rjmp	.+664    	; 0x1dba <__fp_inf>

00001b22 <__addsf3x>:
    1b22:	e9 2f       	mov	r30, r25
    1b24:	72 d1       	rcall	.+740    	; 0x1e0a <__fp_split3>
    1b26:	80 f3       	brcs	.-32     	; 0x1b08 <__addsf3+0x8>
    1b28:	ba 17       	cp	r27, r26
    1b2a:	62 07       	cpc	r22, r18
    1b2c:	73 07       	cpc	r23, r19
    1b2e:	84 07       	cpc	r24, r20
    1b30:	95 07       	cpc	r25, r21
    1b32:	18 f0       	brcs	.+6      	; 0x1b3a <__addsf3x+0x18>
    1b34:	71 f4       	brne	.+28     	; 0x1b52 <__addsf3x+0x30>
    1b36:	9e f5       	brtc	.+102    	; 0x1b9e <__addsf3x+0x7c>
    1b38:	8a c1       	rjmp	.+788    	; 0x1e4e <__fp_zero>
    1b3a:	0e f4       	brtc	.+2      	; 0x1b3e <__addsf3x+0x1c>
    1b3c:	e0 95       	com	r30
    1b3e:	0b 2e       	mov	r0, r27
    1b40:	ba 2f       	mov	r27, r26
    1b42:	a0 2d       	mov	r26, r0
    1b44:	0b 01       	movw	r0, r22
    1b46:	b9 01       	movw	r22, r18
    1b48:	90 01       	movw	r18, r0
    1b4a:	0c 01       	movw	r0, r24
    1b4c:	ca 01       	movw	r24, r20
    1b4e:	a0 01       	movw	r20, r0
    1b50:	11 24       	eor	r1, r1
    1b52:	ff 27       	eor	r31, r31
    1b54:	59 1b       	sub	r21, r25
    1b56:	99 f0       	breq	.+38     	; 0x1b7e <__addsf3x+0x5c>
    1b58:	59 3f       	cpi	r21, 0xF9	; 249
    1b5a:	50 f4       	brcc	.+20     	; 0x1b70 <__addsf3x+0x4e>
    1b5c:	50 3e       	cpi	r21, 0xE0	; 224
    1b5e:	68 f1       	brcs	.+90     	; 0x1bba <__addsf3x+0x98>
    1b60:	1a 16       	cp	r1, r26
    1b62:	f0 40       	sbci	r31, 0x00	; 0
    1b64:	a2 2f       	mov	r26, r18
    1b66:	23 2f       	mov	r18, r19
    1b68:	34 2f       	mov	r19, r20
    1b6a:	44 27       	eor	r20, r20
    1b6c:	58 5f       	subi	r21, 0xF8	; 248
    1b6e:	f3 cf       	rjmp	.-26     	; 0x1b56 <__addsf3x+0x34>
    1b70:	46 95       	lsr	r20
    1b72:	37 95       	ror	r19
    1b74:	27 95       	ror	r18
    1b76:	a7 95       	ror	r26
    1b78:	f0 40       	sbci	r31, 0x00	; 0
    1b7a:	53 95       	inc	r21
    1b7c:	c9 f7       	brne	.-14     	; 0x1b70 <__addsf3x+0x4e>
    1b7e:	7e f4       	brtc	.+30     	; 0x1b9e <__addsf3x+0x7c>
    1b80:	1f 16       	cp	r1, r31
    1b82:	ba 0b       	sbc	r27, r26
    1b84:	62 0b       	sbc	r22, r18
    1b86:	73 0b       	sbc	r23, r19
    1b88:	84 0b       	sbc	r24, r20
    1b8a:	ba f0       	brmi	.+46     	; 0x1bba <__addsf3x+0x98>
    1b8c:	91 50       	subi	r25, 0x01	; 1
    1b8e:	a1 f0       	breq	.+40     	; 0x1bb8 <__addsf3x+0x96>
    1b90:	ff 0f       	add	r31, r31
    1b92:	bb 1f       	adc	r27, r27
    1b94:	66 1f       	adc	r22, r22
    1b96:	77 1f       	adc	r23, r23
    1b98:	88 1f       	adc	r24, r24
    1b9a:	c2 f7       	brpl	.-16     	; 0x1b8c <__addsf3x+0x6a>
    1b9c:	0e c0       	rjmp	.+28     	; 0x1bba <__addsf3x+0x98>
    1b9e:	ba 0f       	add	r27, r26
    1ba0:	62 1f       	adc	r22, r18
    1ba2:	73 1f       	adc	r23, r19
    1ba4:	84 1f       	adc	r24, r20
    1ba6:	48 f4       	brcc	.+18     	; 0x1bba <__addsf3x+0x98>
    1ba8:	87 95       	ror	r24
    1baa:	77 95       	ror	r23
    1bac:	67 95       	ror	r22
    1bae:	b7 95       	ror	r27
    1bb0:	f7 95       	ror	r31
    1bb2:	9e 3f       	cpi	r25, 0xFE	; 254
    1bb4:	08 f0       	brcs	.+2      	; 0x1bb8 <__addsf3x+0x96>
    1bb6:	b3 cf       	rjmp	.-154    	; 0x1b1e <__addsf3+0x1e>
    1bb8:	93 95       	inc	r25
    1bba:	88 0f       	add	r24, r24
    1bbc:	08 f0       	brcs	.+2      	; 0x1bc0 <__addsf3x+0x9e>
    1bbe:	99 27       	eor	r25, r25
    1bc0:	ee 0f       	add	r30, r30
    1bc2:	97 95       	ror	r25
    1bc4:	87 95       	ror	r24
    1bc6:	08 95       	ret

00001bc8 <__cmpsf2>:
    1bc8:	d4 d0       	rcall	.+424    	; 0x1d72 <__fp_cmp>
    1bca:	08 f4       	brcc	.+2      	; 0x1bce <__cmpsf2+0x6>
    1bcc:	81 e0       	ldi	r24, 0x01	; 1
    1bce:	08 95       	ret

00001bd0 <__divsf3>:
    1bd0:	0c d0       	rcall	.+24     	; 0x1bea <__divsf3x>
    1bd2:	0a c1       	rjmp	.+532    	; 0x1de8 <__fp_round>
    1bd4:	02 d1       	rcall	.+516    	; 0x1dda <__fp_pscB>
    1bd6:	40 f0       	brcs	.+16     	; 0x1be8 <__divsf3+0x18>
    1bd8:	f9 d0       	rcall	.+498    	; 0x1dcc <__fp_pscA>
    1bda:	30 f0       	brcs	.+12     	; 0x1be8 <__divsf3+0x18>
    1bdc:	21 f4       	brne	.+8      	; 0x1be6 <__divsf3+0x16>
    1bde:	5f 3f       	cpi	r21, 0xFF	; 255
    1be0:	19 f0       	breq	.+6      	; 0x1be8 <__divsf3+0x18>
    1be2:	eb c0       	rjmp	.+470    	; 0x1dba <__fp_inf>
    1be4:	51 11       	cpse	r21, r1
    1be6:	34 c1       	rjmp	.+616    	; 0x1e50 <__fp_szero>
    1be8:	ee c0       	rjmp	.+476    	; 0x1dc6 <__fp_nan>

00001bea <__divsf3x>:
    1bea:	0f d1       	rcall	.+542    	; 0x1e0a <__fp_split3>
    1bec:	98 f3       	brcs	.-26     	; 0x1bd4 <__divsf3+0x4>

00001bee <__divsf3_pse>:
    1bee:	99 23       	and	r25, r25
    1bf0:	c9 f3       	breq	.-14     	; 0x1be4 <__divsf3+0x14>
    1bf2:	55 23       	and	r21, r21
    1bf4:	b1 f3       	breq	.-20     	; 0x1be2 <__divsf3+0x12>
    1bf6:	95 1b       	sub	r25, r21
    1bf8:	55 0b       	sbc	r21, r21
    1bfa:	bb 27       	eor	r27, r27
    1bfc:	aa 27       	eor	r26, r26
    1bfe:	62 17       	cp	r22, r18
    1c00:	73 07       	cpc	r23, r19
    1c02:	84 07       	cpc	r24, r20
    1c04:	38 f0       	brcs	.+14     	; 0x1c14 <__divsf3_pse+0x26>
    1c06:	9f 5f       	subi	r25, 0xFF	; 255
    1c08:	5f 4f       	sbci	r21, 0xFF	; 255
    1c0a:	22 0f       	add	r18, r18
    1c0c:	33 1f       	adc	r19, r19
    1c0e:	44 1f       	adc	r20, r20
    1c10:	aa 1f       	adc	r26, r26
    1c12:	a9 f3       	breq	.-22     	; 0x1bfe <__divsf3_pse+0x10>
    1c14:	33 d0       	rcall	.+102    	; 0x1c7c <__divsf3_pse+0x8e>
    1c16:	0e 2e       	mov	r0, r30
    1c18:	3a f0       	brmi	.+14     	; 0x1c28 <__divsf3_pse+0x3a>
    1c1a:	e0 e8       	ldi	r30, 0x80	; 128
    1c1c:	30 d0       	rcall	.+96     	; 0x1c7e <__divsf3_pse+0x90>
    1c1e:	91 50       	subi	r25, 0x01	; 1
    1c20:	50 40       	sbci	r21, 0x00	; 0
    1c22:	e6 95       	lsr	r30
    1c24:	00 1c       	adc	r0, r0
    1c26:	ca f7       	brpl	.-14     	; 0x1c1a <__divsf3_pse+0x2c>
    1c28:	29 d0       	rcall	.+82     	; 0x1c7c <__divsf3_pse+0x8e>
    1c2a:	fe 2f       	mov	r31, r30
    1c2c:	27 d0       	rcall	.+78     	; 0x1c7c <__divsf3_pse+0x8e>
    1c2e:	66 0f       	add	r22, r22
    1c30:	77 1f       	adc	r23, r23
    1c32:	88 1f       	adc	r24, r24
    1c34:	bb 1f       	adc	r27, r27
    1c36:	26 17       	cp	r18, r22
    1c38:	37 07       	cpc	r19, r23
    1c3a:	48 07       	cpc	r20, r24
    1c3c:	ab 07       	cpc	r26, r27
    1c3e:	b0 e8       	ldi	r27, 0x80	; 128
    1c40:	09 f0       	breq	.+2      	; 0x1c44 <__divsf3_pse+0x56>
    1c42:	bb 0b       	sbc	r27, r27
    1c44:	80 2d       	mov	r24, r0
    1c46:	bf 01       	movw	r22, r30
    1c48:	ff 27       	eor	r31, r31
    1c4a:	93 58       	subi	r25, 0x83	; 131
    1c4c:	5f 4f       	sbci	r21, 0xFF	; 255
    1c4e:	2a f0       	brmi	.+10     	; 0x1c5a <__divsf3_pse+0x6c>
    1c50:	9e 3f       	cpi	r25, 0xFE	; 254
    1c52:	51 05       	cpc	r21, r1
    1c54:	68 f0       	brcs	.+26     	; 0x1c70 <__divsf3_pse+0x82>
    1c56:	b1 c0       	rjmp	.+354    	; 0x1dba <__fp_inf>
    1c58:	fb c0       	rjmp	.+502    	; 0x1e50 <__fp_szero>
    1c5a:	5f 3f       	cpi	r21, 0xFF	; 255
    1c5c:	ec f3       	brlt	.-6      	; 0x1c58 <__divsf3_pse+0x6a>
    1c5e:	98 3e       	cpi	r25, 0xE8	; 232
    1c60:	dc f3       	brlt	.-10     	; 0x1c58 <__divsf3_pse+0x6a>
    1c62:	86 95       	lsr	r24
    1c64:	77 95       	ror	r23
    1c66:	67 95       	ror	r22
    1c68:	b7 95       	ror	r27
    1c6a:	f7 95       	ror	r31
    1c6c:	9f 5f       	subi	r25, 0xFF	; 255
    1c6e:	c9 f7       	brne	.-14     	; 0x1c62 <__divsf3_pse+0x74>
    1c70:	88 0f       	add	r24, r24
    1c72:	91 1d       	adc	r25, r1
    1c74:	96 95       	lsr	r25
    1c76:	87 95       	ror	r24
    1c78:	97 f9       	bld	r25, 7
    1c7a:	08 95       	ret
    1c7c:	e1 e0       	ldi	r30, 0x01	; 1
    1c7e:	66 0f       	add	r22, r22
    1c80:	77 1f       	adc	r23, r23
    1c82:	88 1f       	adc	r24, r24
    1c84:	bb 1f       	adc	r27, r27
    1c86:	62 17       	cp	r22, r18
    1c88:	73 07       	cpc	r23, r19
    1c8a:	84 07       	cpc	r24, r20
    1c8c:	ba 07       	cpc	r27, r26
    1c8e:	20 f0       	brcs	.+8      	; 0x1c98 <__divsf3_pse+0xaa>
    1c90:	62 1b       	sub	r22, r18
    1c92:	73 0b       	sbc	r23, r19
    1c94:	84 0b       	sbc	r24, r20
    1c96:	ba 0b       	sbc	r27, r26
    1c98:	ee 1f       	adc	r30, r30
    1c9a:	88 f7       	brcc	.-30     	; 0x1c7e <__divsf3_pse+0x90>
    1c9c:	e0 95       	com	r30
    1c9e:	08 95       	ret

00001ca0 <__fixunssfsi>:
    1ca0:	bc d0       	rcall	.+376    	; 0x1e1a <__fp_splitA>
    1ca2:	88 f0       	brcs	.+34     	; 0x1cc6 <__fixunssfsi+0x26>
    1ca4:	9f 57       	subi	r25, 0x7F	; 127
    1ca6:	90 f0       	brcs	.+36     	; 0x1ccc <__fixunssfsi+0x2c>
    1ca8:	b9 2f       	mov	r27, r25
    1caa:	99 27       	eor	r25, r25
    1cac:	b7 51       	subi	r27, 0x17	; 23
    1cae:	a0 f0       	brcs	.+40     	; 0x1cd8 <__fixunssfsi+0x38>
    1cb0:	d1 f0       	breq	.+52     	; 0x1ce6 <__fixunssfsi+0x46>
    1cb2:	66 0f       	add	r22, r22
    1cb4:	77 1f       	adc	r23, r23
    1cb6:	88 1f       	adc	r24, r24
    1cb8:	99 1f       	adc	r25, r25
    1cba:	1a f0       	brmi	.+6      	; 0x1cc2 <__fixunssfsi+0x22>
    1cbc:	ba 95       	dec	r27
    1cbe:	c9 f7       	brne	.-14     	; 0x1cb2 <__fixunssfsi+0x12>
    1cc0:	12 c0       	rjmp	.+36     	; 0x1ce6 <__fixunssfsi+0x46>
    1cc2:	b1 30       	cpi	r27, 0x01	; 1
    1cc4:	81 f0       	breq	.+32     	; 0x1ce6 <__fixunssfsi+0x46>
    1cc6:	c3 d0       	rcall	.+390    	; 0x1e4e <__fp_zero>
    1cc8:	b1 e0       	ldi	r27, 0x01	; 1
    1cca:	08 95       	ret
    1ccc:	c0 c0       	rjmp	.+384    	; 0x1e4e <__fp_zero>
    1cce:	67 2f       	mov	r22, r23
    1cd0:	78 2f       	mov	r23, r24
    1cd2:	88 27       	eor	r24, r24
    1cd4:	b8 5f       	subi	r27, 0xF8	; 248
    1cd6:	39 f0       	breq	.+14     	; 0x1ce6 <__fixunssfsi+0x46>
    1cd8:	b9 3f       	cpi	r27, 0xF9	; 249
    1cda:	cc f3       	brlt	.-14     	; 0x1cce <__fixunssfsi+0x2e>
    1cdc:	86 95       	lsr	r24
    1cde:	77 95       	ror	r23
    1ce0:	67 95       	ror	r22
    1ce2:	b3 95       	inc	r27
    1ce4:	d9 f7       	brne	.-10     	; 0x1cdc <__fixunssfsi+0x3c>
    1ce6:	3e f4       	brtc	.+14     	; 0x1cf6 <__fixunssfsi+0x56>
    1ce8:	90 95       	com	r25
    1cea:	80 95       	com	r24
    1cec:	70 95       	com	r23
    1cee:	61 95       	neg	r22
    1cf0:	7f 4f       	sbci	r23, 0xFF	; 255
    1cf2:	8f 4f       	sbci	r24, 0xFF	; 255
    1cf4:	9f 4f       	sbci	r25, 0xFF	; 255
    1cf6:	08 95       	ret

00001cf8 <__floatunsisf>:
    1cf8:	e8 94       	clt
    1cfa:	09 c0       	rjmp	.+18     	; 0x1d0e <__floatsisf+0x12>

00001cfc <__floatsisf>:
    1cfc:	97 fb       	bst	r25, 7
    1cfe:	3e f4       	brtc	.+14     	; 0x1d0e <__floatsisf+0x12>
    1d00:	90 95       	com	r25
    1d02:	80 95       	com	r24
    1d04:	70 95       	com	r23
    1d06:	61 95       	neg	r22
    1d08:	7f 4f       	sbci	r23, 0xFF	; 255
    1d0a:	8f 4f       	sbci	r24, 0xFF	; 255
    1d0c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d0e:	99 23       	and	r25, r25
    1d10:	a9 f0       	breq	.+42     	; 0x1d3c <__floatsisf+0x40>
    1d12:	f9 2f       	mov	r31, r25
    1d14:	96 e9       	ldi	r25, 0x96	; 150
    1d16:	bb 27       	eor	r27, r27
    1d18:	93 95       	inc	r25
    1d1a:	f6 95       	lsr	r31
    1d1c:	87 95       	ror	r24
    1d1e:	77 95       	ror	r23
    1d20:	67 95       	ror	r22
    1d22:	b7 95       	ror	r27
    1d24:	f1 11       	cpse	r31, r1
    1d26:	f8 cf       	rjmp	.-16     	; 0x1d18 <__floatsisf+0x1c>
    1d28:	fa f4       	brpl	.+62     	; 0x1d68 <__floatsisf+0x6c>
    1d2a:	bb 0f       	add	r27, r27
    1d2c:	11 f4       	brne	.+4      	; 0x1d32 <__floatsisf+0x36>
    1d2e:	60 ff       	sbrs	r22, 0
    1d30:	1b c0       	rjmp	.+54     	; 0x1d68 <__floatsisf+0x6c>
    1d32:	6f 5f       	subi	r22, 0xFF	; 255
    1d34:	7f 4f       	sbci	r23, 0xFF	; 255
    1d36:	8f 4f       	sbci	r24, 0xFF	; 255
    1d38:	9f 4f       	sbci	r25, 0xFF	; 255
    1d3a:	16 c0       	rjmp	.+44     	; 0x1d68 <__floatsisf+0x6c>
    1d3c:	88 23       	and	r24, r24
    1d3e:	11 f0       	breq	.+4      	; 0x1d44 <__floatsisf+0x48>
    1d40:	96 e9       	ldi	r25, 0x96	; 150
    1d42:	11 c0       	rjmp	.+34     	; 0x1d66 <__floatsisf+0x6a>
    1d44:	77 23       	and	r23, r23
    1d46:	21 f0       	breq	.+8      	; 0x1d50 <__floatsisf+0x54>
    1d48:	9e e8       	ldi	r25, 0x8E	; 142
    1d4a:	87 2f       	mov	r24, r23
    1d4c:	76 2f       	mov	r23, r22
    1d4e:	05 c0       	rjmp	.+10     	; 0x1d5a <__floatsisf+0x5e>
    1d50:	66 23       	and	r22, r22
    1d52:	71 f0       	breq	.+28     	; 0x1d70 <__floatsisf+0x74>
    1d54:	96 e8       	ldi	r25, 0x86	; 134
    1d56:	86 2f       	mov	r24, r22
    1d58:	70 e0       	ldi	r23, 0x00	; 0
    1d5a:	60 e0       	ldi	r22, 0x00	; 0
    1d5c:	2a f0       	brmi	.+10     	; 0x1d68 <__floatsisf+0x6c>
    1d5e:	9a 95       	dec	r25
    1d60:	66 0f       	add	r22, r22
    1d62:	77 1f       	adc	r23, r23
    1d64:	88 1f       	adc	r24, r24
    1d66:	da f7       	brpl	.-10     	; 0x1d5e <__floatsisf+0x62>
    1d68:	88 0f       	add	r24, r24
    1d6a:	96 95       	lsr	r25
    1d6c:	87 95       	ror	r24
    1d6e:	97 f9       	bld	r25, 7
    1d70:	08 95       	ret

00001d72 <__fp_cmp>:
    1d72:	99 0f       	add	r25, r25
    1d74:	00 08       	sbc	r0, r0
    1d76:	55 0f       	add	r21, r21
    1d78:	aa 0b       	sbc	r26, r26
    1d7a:	e0 e8       	ldi	r30, 0x80	; 128
    1d7c:	fe ef       	ldi	r31, 0xFE	; 254
    1d7e:	16 16       	cp	r1, r22
    1d80:	17 06       	cpc	r1, r23
    1d82:	e8 07       	cpc	r30, r24
    1d84:	f9 07       	cpc	r31, r25
    1d86:	c0 f0       	brcs	.+48     	; 0x1db8 <__fp_cmp+0x46>
    1d88:	12 16       	cp	r1, r18
    1d8a:	13 06       	cpc	r1, r19
    1d8c:	e4 07       	cpc	r30, r20
    1d8e:	f5 07       	cpc	r31, r21
    1d90:	98 f0       	brcs	.+38     	; 0x1db8 <__fp_cmp+0x46>
    1d92:	62 1b       	sub	r22, r18
    1d94:	73 0b       	sbc	r23, r19
    1d96:	84 0b       	sbc	r24, r20
    1d98:	95 0b       	sbc	r25, r21
    1d9a:	39 f4       	brne	.+14     	; 0x1daa <__fp_cmp+0x38>
    1d9c:	0a 26       	eor	r0, r26
    1d9e:	61 f0       	breq	.+24     	; 0x1db8 <__fp_cmp+0x46>
    1da0:	23 2b       	or	r18, r19
    1da2:	24 2b       	or	r18, r20
    1da4:	25 2b       	or	r18, r21
    1da6:	21 f4       	brne	.+8      	; 0x1db0 <__fp_cmp+0x3e>
    1da8:	08 95       	ret
    1daa:	0a 26       	eor	r0, r26
    1dac:	09 f4       	brne	.+2      	; 0x1db0 <__fp_cmp+0x3e>
    1dae:	a1 40       	sbci	r26, 0x01	; 1
    1db0:	a6 95       	lsr	r26
    1db2:	8f ef       	ldi	r24, 0xFF	; 255
    1db4:	81 1d       	adc	r24, r1
    1db6:	81 1d       	adc	r24, r1
    1db8:	08 95       	ret

00001dba <__fp_inf>:
    1dba:	97 f9       	bld	r25, 7
    1dbc:	9f 67       	ori	r25, 0x7F	; 127
    1dbe:	80 e8       	ldi	r24, 0x80	; 128
    1dc0:	70 e0       	ldi	r23, 0x00	; 0
    1dc2:	60 e0       	ldi	r22, 0x00	; 0
    1dc4:	08 95       	ret

00001dc6 <__fp_nan>:
    1dc6:	9f ef       	ldi	r25, 0xFF	; 255
    1dc8:	80 ec       	ldi	r24, 0xC0	; 192
    1dca:	08 95       	ret

00001dcc <__fp_pscA>:
    1dcc:	00 24       	eor	r0, r0
    1dce:	0a 94       	dec	r0
    1dd0:	16 16       	cp	r1, r22
    1dd2:	17 06       	cpc	r1, r23
    1dd4:	18 06       	cpc	r1, r24
    1dd6:	09 06       	cpc	r0, r25
    1dd8:	08 95       	ret

00001dda <__fp_pscB>:
    1dda:	00 24       	eor	r0, r0
    1ddc:	0a 94       	dec	r0
    1dde:	12 16       	cp	r1, r18
    1de0:	13 06       	cpc	r1, r19
    1de2:	14 06       	cpc	r1, r20
    1de4:	05 06       	cpc	r0, r21
    1de6:	08 95       	ret

00001de8 <__fp_round>:
    1de8:	09 2e       	mov	r0, r25
    1dea:	03 94       	inc	r0
    1dec:	00 0c       	add	r0, r0
    1dee:	11 f4       	brne	.+4      	; 0x1df4 <__fp_round+0xc>
    1df0:	88 23       	and	r24, r24
    1df2:	52 f0       	brmi	.+20     	; 0x1e08 <__fp_round+0x20>
    1df4:	bb 0f       	add	r27, r27
    1df6:	40 f4       	brcc	.+16     	; 0x1e08 <__fp_round+0x20>
    1df8:	bf 2b       	or	r27, r31
    1dfa:	11 f4       	brne	.+4      	; 0x1e00 <__fp_round+0x18>
    1dfc:	60 ff       	sbrs	r22, 0
    1dfe:	04 c0       	rjmp	.+8      	; 0x1e08 <__fp_round+0x20>
    1e00:	6f 5f       	subi	r22, 0xFF	; 255
    1e02:	7f 4f       	sbci	r23, 0xFF	; 255
    1e04:	8f 4f       	sbci	r24, 0xFF	; 255
    1e06:	9f 4f       	sbci	r25, 0xFF	; 255
    1e08:	08 95       	ret

00001e0a <__fp_split3>:
    1e0a:	57 fd       	sbrc	r21, 7
    1e0c:	90 58       	subi	r25, 0x80	; 128
    1e0e:	44 0f       	add	r20, r20
    1e10:	55 1f       	adc	r21, r21
    1e12:	59 f0       	breq	.+22     	; 0x1e2a <__fp_splitA+0x10>
    1e14:	5f 3f       	cpi	r21, 0xFF	; 255
    1e16:	71 f0       	breq	.+28     	; 0x1e34 <__fp_splitA+0x1a>
    1e18:	47 95       	ror	r20

00001e1a <__fp_splitA>:
    1e1a:	88 0f       	add	r24, r24
    1e1c:	97 fb       	bst	r25, 7
    1e1e:	99 1f       	adc	r25, r25
    1e20:	61 f0       	breq	.+24     	; 0x1e3a <__fp_splitA+0x20>
    1e22:	9f 3f       	cpi	r25, 0xFF	; 255
    1e24:	79 f0       	breq	.+30     	; 0x1e44 <__fp_splitA+0x2a>
    1e26:	87 95       	ror	r24
    1e28:	08 95       	ret
    1e2a:	12 16       	cp	r1, r18
    1e2c:	13 06       	cpc	r1, r19
    1e2e:	14 06       	cpc	r1, r20
    1e30:	55 1f       	adc	r21, r21
    1e32:	f2 cf       	rjmp	.-28     	; 0x1e18 <__fp_split3+0xe>
    1e34:	46 95       	lsr	r20
    1e36:	f1 df       	rcall	.-30     	; 0x1e1a <__fp_splitA>
    1e38:	08 c0       	rjmp	.+16     	; 0x1e4a <__fp_splitA+0x30>
    1e3a:	16 16       	cp	r1, r22
    1e3c:	17 06       	cpc	r1, r23
    1e3e:	18 06       	cpc	r1, r24
    1e40:	99 1f       	adc	r25, r25
    1e42:	f1 cf       	rjmp	.-30     	; 0x1e26 <__fp_splitA+0xc>
    1e44:	86 95       	lsr	r24
    1e46:	71 05       	cpc	r23, r1
    1e48:	61 05       	cpc	r22, r1
    1e4a:	08 94       	sec
    1e4c:	08 95       	ret

00001e4e <__fp_zero>:
    1e4e:	e8 94       	clt

00001e50 <__fp_szero>:
    1e50:	bb 27       	eor	r27, r27
    1e52:	66 27       	eor	r22, r22
    1e54:	77 27       	eor	r23, r23
    1e56:	cb 01       	movw	r24, r22
    1e58:	97 f9       	bld	r25, 7
    1e5a:	08 95       	ret

00001e5c <__gesf2>:
    1e5c:	8a df       	rcall	.-236    	; 0x1d72 <__fp_cmp>
    1e5e:	08 f4       	brcc	.+2      	; 0x1e62 <__gesf2+0x6>
    1e60:	8f ef       	ldi	r24, 0xFF	; 255
    1e62:	08 95       	ret

00001e64 <__udivmodhi4>:
    1e64:	aa 1b       	sub	r26, r26
    1e66:	bb 1b       	sub	r27, r27
    1e68:	51 e1       	ldi	r21, 0x11	; 17
    1e6a:	07 c0       	rjmp	.+14     	; 0x1e7a <__udivmodhi4_ep>

00001e6c <__udivmodhi4_loop>:
    1e6c:	aa 1f       	adc	r26, r26
    1e6e:	bb 1f       	adc	r27, r27
    1e70:	a6 17       	cp	r26, r22
    1e72:	b7 07       	cpc	r27, r23
    1e74:	10 f0       	brcs	.+4      	; 0x1e7a <__udivmodhi4_ep>
    1e76:	a6 1b       	sub	r26, r22
    1e78:	b7 0b       	sbc	r27, r23

00001e7a <__udivmodhi4_ep>:
    1e7a:	88 1f       	adc	r24, r24
    1e7c:	99 1f       	adc	r25, r25
    1e7e:	5a 95       	dec	r21
    1e80:	a9 f7       	brne	.-22     	; 0x1e6c <__udivmodhi4_loop>
    1e82:	80 95       	com	r24
    1e84:	90 95       	com	r25
    1e86:	bc 01       	movw	r22, r24
    1e88:	cd 01       	movw	r24, r26
    1e8a:	08 95       	ret

00001e8c <__divmodhi4>:
    1e8c:	97 fb       	bst	r25, 7
    1e8e:	09 2e       	mov	r0, r25
    1e90:	07 26       	eor	r0, r23
    1e92:	0a d0       	rcall	.+20     	; 0x1ea8 <__divmodhi4_neg1>
    1e94:	77 fd       	sbrc	r23, 7
    1e96:	04 d0       	rcall	.+8      	; 0x1ea0 <__divmodhi4_neg2>
    1e98:	e5 df       	rcall	.-54     	; 0x1e64 <__udivmodhi4>
    1e9a:	06 d0       	rcall	.+12     	; 0x1ea8 <__divmodhi4_neg1>
    1e9c:	00 20       	and	r0, r0
    1e9e:	1a f4       	brpl	.+6      	; 0x1ea6 <__divmodhi4_exit>

00001ea0 <__divmodhi4_neg2>:
    1ea0:	70 95       	com	r23
    1ea2:	61 95       	neg	r22
    1ea4:	7f 4f       	sbci	r23, 0xFF	; 255

00001ea6 <__divmodhi4_exit>:
    1ea6:	08 95       	ret

00001ea8 <__divmodhi4_neg1>:
    1ea8:	f6 f7       	brtc	.-4      	; 0x1ea6 <__divmodhi4_exit>
    1eaa:	90 95       	com	r25
    1eac:	81 95       	neg	r24
    1eae:	9f 4f       	sbci	r25, 0xFF	; 255
    1eb0:	08 95       	ret

00001eb2 <_exit>:
    1eb2:	f8 94       	cli

00001eb4 <__stop_program>:
    1eb4:	ff cf       	rjmp	.-2      	; 0x1eb4 <__stop_program>
