
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000001a0  00000234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800104  00800104  00000238  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000904  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00000990  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000004b7  00000000  00000000  00000a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001b3  00000000  00000000  00000ec7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000353  00000000  00000000  0000107a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a8  00000000  00000000  000013d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000152  00000000  00000000  00001478  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000f4  00000000  00000000  000015ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__vector_1>
   8:	0c 94 90 00 	jmp	0x120	; 0x120 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ea       	ldi	r30, 0xA0	; 160
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 30       	cpi	r26, 0x06	; 6
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b5 00 	call	0x16a	; 0x16a <main>
  9e:	0c 94 ce 00 	jmp	0x19c	; 0x19c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <motor_port_config>:
int dir=1;
unsigned int motor_flag=1;

void motor_port_config()
{
	DDRB|=0x03;
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	83 60       	ori	r24, 0x03	; 3
  aa:	84 b9       	out	0x04, r24	; 4
	PORTB&=0xFC;//off motor
  ac:	85 b1       	in	r24, 0x05	; 5
  ae:	8c 7f       	andi	r24, 0xFC	; 252
  b0:	85 b9       	out	0x05, r24	; 5
}
  b2:	08 95       	ret

000000b4 <interrupt_config>:
void interrupt_config(void) //Interrupt 0 enable
{
	PORTD=0x0C;//pull-up
  b4:	8c e0       	ldi	r24, 0x0C	; 12
  b6:	8b b9       	out	0x0b, r24	; 11
	EICRA = 0x00; // INT0 and INT1 is set to trigger with low
  b8:	10 92 69 00 	sts	0x0069, r1
	EIMSK = 0x03; // Enable Interrupt INT0 for limit and INT1 for motor/IR
  bc:	83 e0       	ldi	r24, 0x03	; 3
  be:	8d bb       	out	0x1d, r24	; 29
	
}
  c0:	08 95       	ret

000000c2 <__vector_1>:
ISR(INT0_vect)
{
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	8f 93       	push	r24
  ce:	9f 93       	push	r25
  d0:	af 93       	push	r26
  d2:	bf 93       	push	r27
	PORTB&=0xFC;//stops motor
  d4:	85 b1       	in	r24, 0x05	; 5
  d6:	8c 7f       	andi	r24, 0xFC	; 252
  d8:	85 b9       	out	0x05, r24	; 5
	dir=dir*(-1);
  da:	80 91 02 01 	lds	r24, 0x0102
  de:	90 91 03 01 	lds	r25, 0x0103
  e2:	90 95       	com	r25
  e4:	81 95       	neg	r24
  e6:	9f 4f       	sbci	r25, 0xFF	; 255
  e8:	90 93 03 01 	sts	0x0103, r25
  ec:	80 93 02 01 	sts	0x0102, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	8f ef       	ldi	r24, 0xFF	; 255
  f2:	93 e2       	ldi	r25, 0x23	; 35
  f4:	a4 ef       	ldi	r26, 0xF4	; 244
  f6:	81 50       	subi	r24, 0x01	; 1
  f8:	90 40       	sbci	r25, 0x00	; 0
  fa:	a0 40       	sbci	r26, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <__vector_1+0x34>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <__vector_1+0x3e>
 100:	00 00       	nop
	_delay_ms(5000);
	flag=1;
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	90 93 05 01 	sts	0x0105, r25
 10a:	80 93 04 01 	sts	0x0104, r24
}
 10e:	bf 91       	pop	r27
 110:	af 91       	pop	r26
 112:	9f 91       	pop	r25
 114:	8f 91       	pop	r24
 116:	0f 90       	pop	r0
 118:	0f be       	out	0x3f, r0	; 63
 11a:	0f 90       	pop	r0
 11c:	1f 90       	pop	r1
 11e:	18 95       	reti

00000120 <__vector_2>:
ISR(INT1_vect)
{
 120:	1f 92       	push	r1
 122:	0f 92       	push	r0
 124:	0f b6       	in	r0, 0x3f	; 63
 126:	0f 92       	push	r0
 128:	11 24       	eor	r1, r1
 12a:	8f 93       	push	r24
 12c:	9f 93       	push	r25
	
		if(dir==1)
 12e:	80 91 02 01 	lds	r24, 0x0102
 132:	90 91 03 01 	lds	r25, 0x0103
 136:	81 30       	cpi	r24, 0x01	; 1
 138:	91 05       	cpc	r25, r1
 13a:	19 f4       	brne	.+6      	; 0x142 <__vector_2+0x22>
			PORTB=0x02;//starts motor upwards
 13c:	82 e0       	ldi	r24, 0x02	; 2
 13e:	85 b9       	out	0x05, r24	; 5
 140:	02 c0       	rjmp	.+4      	; 0x146 <__vector_2+0x26>
		else
			PORTB=0x01;//starts motor downwards
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	85 b9       	out	0x05, r24	; 5
	flag=1;
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	90 93 05 01 	sts	0x0105, r25
 14e:	80 93 04 01 	sts	0x0104, r24
}
 152:	9f 91       	pop	r25
 154:	8f 91       	pop	r24
 156:	0f 90       	pop	r0
 158:	0f be       	out	0x3f, r0	; 63
 15a:	0f 90       	pop	r0
 15c:	1f 90       	pop	r1
 15e:	18 95       	reti

00000160 <init_devices>:
void init_devices()
{
	motor_port_config();
 160:	0e 94 53 00 	call	0xa6	; 0xa6 <motor_port_config>
	interrupt_config();
 164:	0e 94 5a 00 	call	0xb4	; 0xb4 <interrupt_config>
}
 168:	08 95       	ret

0000016a <main>:
int main(void)
{
    init_devices();
 16a:	0e 94 b0 00 	call	0x160	; 0x160 <init_devices>
	while(1)
	{
		if(flag)
 16e:	80 91 04 01 	lds	r24, 0x0104
 172:	90 91 05 01 	lds	r25, 0x0105
 176:	00 97       	sbiw	r24, 0x00	; 0
 178:	79 f0       	breq	.+30     	; 0x198 <main+0x2e>
		{
			cli();
 17a:	f8 94       	cli
 17c:	8f ef       	ldi	r24, 0xFF	; 255
 17e:	91 ee       	ldi	r25, 0xE1	; 225
 180:	a4 e0       	ldi	r26, 0x04	; 4
 182:	81 50       	subi	r24, 0x01	; 1
 184:	90 40       	sbci	r25, 0x00	; 0
 186:	a0 40       	sbci	r26, 0x00	; 0
 188:	e1 f7       	brne	.-8      	; 0x182 <main+0x18>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <main+0x22>
 18c:	00 00       	nop
			_delay_ms(100);
			flag=0;
 18e:	10 92 05 01 	sts	0x0105, r1
 192:	10 92 04 01 	sts	0x0104, r1
 196:	eb cf       	rjmp	.-42     	; 0x16e <main+0x4>
		}
		else
			sei();
 198:	78 94       	sei
 19a:	e9 cf       	rjmp	.-46     	; 0x16e <main+0x4>

0000019c <_exit>:
 19c:	f8 94       	cli

0000019e <__stop_program>:
 19e:	ff cf       	rjmp	.-2      	; 0x19e <__stop_program>
